{"version":3,"file":"core.worker.dev.js","sources":["../src/internal/to-class-name.ts","../src/runtime.ts","../src/internal/format.ts","../src/utils.ts","../src/internal/precedence.ts","../src/internal/registry.ts","../src/internal/stringify.ts","../src/internal/sorted-insertion-index.ts","../src/colors.ts","../src/internal/serialize.ts","../src/internal/merge.ts","../src/internal/translate.ts","../src/internal/define.ts","../src/parse.ts","../src/internal/interleave.ts","../src/internal/interpolate.ts","../src/alias.ts","../src/internal/astish.ts","../src/css.ts","../src/animation.ts","../src/rules.ts","../src/autocomplete.ts","../src/cx.ts","../src/define-config.ts","../src/internal/warn.ts","../src/internal/context.ts","../src/twind.ts","../src/internal/theme.ts","../src/internal/changed.ts","../src/observe.ts","../src/sheets.ts","../src/inject-global.ts","../src/install.ts","../src/keyframes.ts","../src/ssr.ts","../src/internal/parse-html.ts","../src/style.ts","../src/tx.ts"],"sourcesContent":["import type { ParsedRule } from '../parse'\n\nexport function toClassName(rule: ParsedRule): string {\n  return [...rule.v, (rule.i ? '!' : '') + rule.n].join(':')\n}\n","import type {\n  Twind,\n  BaseTheme,\n  TwindConfig,\n  Sheet,\n  TwindUserConfig,\n  ExtractThemes,\n  Preset,\n} from './types'\n\nimport { twind } from './twind'\nimport { observe } from './observe'\nimport { getSheet } from './sheets'\nimport { noop } from './utils'\nimport { DEV } from 'distilt/env'\n\n/**\n * @group Runtime\n * @param install\n * @returns\n */\nexport function auto(install: () => void): () => void {\n  // If we run in the browser we call install at latest when the body is inserted\n  // This algorith works well for _normal_ scripts (`<script src=\"...\"></script>`)\n  // but not for modules because those are executed __after__ the DOM is ready\n  // and we would have FOUC\n  if (typeof document != 'undefined' && document.currentScript) {\n    const cancelAutoInstall = () => observer.disconnect()\n\n    const observer: MutationObserver = new MutationObserver((mutationsList) => {\n      for (const { target } of mutationsList) {\n        // If we reach the body we immediately run the install to prevent FOUC\n        if (target === document.body) {\n          install()\n          return cancelAutoInstall()\n        }\n      }\n    })\n\n    observer.observe(document.documentElement, {\n      childList: true,\n      subtree: true,\n    })\n\n    return cancelAutoInstall\n  }\n\n  return noop\n}\n\nlet active: Twind\n\nfunction assertActive() {\n  if (DEV && !active) {\n    throw new Error(\n      `No active twind instance found. Make sure to call setup or install before accessing tw.`,\n    )\n  }\n}\n\n/**\n * A proxy to the currently active Twind instance.\n * @group Style Injectors\n */\nexport const tw: Twind<any, any> = /* #__PURE__ */ new Proxy(\n  // just exposing the active as tw should work with most bundlers\n  // as ES module export can be re-assigned BUT some bundlers to not honor this\n  // -> using a delegation proxy here\n  noop as unknown as Twind<any, any>,\n  {\n    apply(_target, _thisArg, args) {\n      if (DEV) assertActive()\n\n      return active(args[0])\n    },\n    get(target, property) {\n      if (DEV) {\n        // Workaround webpack accessing the prototype in dev mode\n        if (!active && property in target) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          return (target as any)[property]\n        }\n\n        assertActive()\n      }\n\n      const value = active[property as keyof Twind]\n\n      if (typeof value === 'function') {\n        return function () {\n          if (DEV) assertActive()\n\n          // eslint-disable-next-line prefer-rest-params\n          return value.apply(active, arguments)\n        }\n      }\n\n      return value\n    },\n  },\n)\n\nexport type SheetFactory<SheetTarget = unknown> = () => Sheet<SheetTarget>\n\n/**\n * Manages a single Twind instance — works in browser, Node.js, Deno, workers...\n *\n * @group Runtime\n * @param config\n * @param sheet\n * @param target\n * @returns\n */\nexport function setup<Theme extends BaseTheme = BaseTheme, SheetTarget = unknown>(\n  config?: TwindConfig<Theme>,\n  sheet?: Sheet<SheetTarget> | SheetFactory<SheetTarget>,\n  target?: HTMLElement,\n): Twind<Theme, SheetTarget>\n\nexport function setup<\n  Theme = BaseTheme,\n  Presets extends Preset<any>[] = Preset[],\n  SheetTarget = unknown,\n>(\n  config?: TwindUserConfig<Theme, Presets>,\n  sheet?: Sheet<SheetTarget> | SheetFactory<SheetTarget>,\n  target?: HTMLElement,\n): Twind<BaseTheme & ExtractThemes<Theme, Presets>, SheetTarget>\n\nexport function setup<Theme extends BaseTheme = BaseTheme, SheetTarget = unknown>(\n  config: TwindConfig<any> | TwindUserConfig<any> = {},\n  sheet: Sheet<SheetTarget> | SheetFactory<SheetTarget> = getSheet as SheetFactory<SheetTarget>,\n  target?: HTMLElement,\n): Twind<Theme, SheetTarget> {\n  active?.destroy()\n\n  active = observe(\n    twind(config as TwindUserConfig, typeof sheet == 'function' ? sheet() : sheet),\n    target,\n  )\n\n  return active as unknown as Twind<Theme, SheetTarget>\n}\n","import type { ParsedRule } from '../parse'\nimport { toClassName } from './to-class-name'\n\nexport function format(rules: ParsedRule[], seperator = ','): string {\n  return rules.map(toClassName).join(seperator)\n}\n","import type { MaybeArray, ScreenValue } from './types'\n\n/**\n * @internal\n */\nexport const escape =\n  (typeof CSS !== 'undefined' && CSS.escape) ||\n  // Simplified: escaping only special characters\n  // Needed for NodeJS and Edge <79 (https://caniuse.com/mdn-api_css_escape)\n  ((className: string): string =>\n    className\n      // Simplifed escape testing only for chars that we know happen to be in tailwind directives\n      .replace(/[!\"'`*+.,;:\\\\/<=>?@#$%&^|~()[\\]{}]/g, '\\\\$&')\n      // If the character is the first character and is in the range [0-9] (2xl, ...)\n      // https://drafts.csswg.org/cssom/#escape-a-character-as-code-point\n      .replace(/^\\d/, '\\\\3$& '))\n\n// Based on https://stackoverflow.com/a/52171480\n/**\n * @group Configuration\n * @param value\n * @returns\n */\nexport function hash(value: string): string {\n  // eslint-disable-next-line no-var\n  for (var h = 9, index = value.length; index--; ) {\n    h = Math.imul(h ^ value.charCodeAt(index), 0x5f356495)\n  }\n\n  return '#' + ((h ^ (h >>> 9)) >>> 0).toString(36)\n}\n\n/**\n * @internal\n * @param screen\n * @param prefix\n * @returns\n */\nexport function mql(screen: MaybeArray<ScreenValue>, prefix = '@media '): string {\n  return (\n    prefix +\n    asArray(screen)\n      .map((screen) => {\n        if (typeof screen == 'string') {\n          screen = { min: screen }\n        }\n\n        return (\n          (screen as { raw?: string }).raw ||\n          Object.keys(screen)\n            .map((feature) => `(${feature}-width:${(screen as Record<string, string>)[feature]})`)\n            .join(' and ')\n        )\n      })\n      .join(',')\n  )\n}\n\n/**\n * @internal\n * @param value\n * @returns\n */\nexport function asArray<T>(value: T = [] as unknown as T): T extends Array<any> ? T : T[] {\n  return (Array.isArray(value) ? value : value == null ? [] : [value]) as T extends Array<any>\n    ? T\n    : T[]\n}\n\n/**\n * @internal\n * @param value\n * @returns\n */\nexport function identity<T>(value: T): T {\n  return value\n}\n\n/**\n * @internal\n */\nexport function noop(): void {\n  // no-op\n}\n","import type { BaseTheme, Context } from '../types'\nimport type { ParsedRule } from '../parse'\nimport { asArray, mql } from '../utils'\nimport { toClassName } from './to-class-name'\n\n// Based on https://github.com/kripod/otion\n// License MIT\n\n// export const enum Shifts {\n//   darkMode = 30,\n//   layer = 27,\n//   screens = 26,\n//   responsive = 22,\n//   atRules = 18,\n//   variants = 0,\n// }\n\nexport const Layer = {\n  /**\n   * 1. `default` (public)\n   */\n  d /* efaults */: 0b000 << 27 /* Shifts.layer */,\n\n  /**\n   * 2. `base` (public) — for things like reset rules or default styles applied to plain HTML elements.\n   */\n  b /* ase */: 0b001 << 27 /* Shifts.layer */,\n\n  /**\n   * 3. `components` (public, used by `style()`) — is for class-based styles that you want to be able to override with utilities.\n   */\n  c /* omponents */: 0b010 << 27 /* Shifts.layer */,\n  // reserved for style():\n  // - props: 0b011\n  // - when: 0b100\n\n  /**\n   * 6. `aliases` (public, used by `apply()`) — `~(...)`\n   */\n  a /* liases */: 0b101 << 27 /* Shifts.layer */,\n\n  /**\n   * 6. `utilities` (public) — for small, single-purpose classes\n   */\n  u /* tilities */: 0b110 << 27 /* Shifts.layer */,\n\n  /**\n   * 7. `overrides` (public, used by `css()`)\n   */\n  o /* verrides */: 0b111 << 27 /* Shifts.layer */,\n} as const\n\n/*\nTo have a predictable styling the styles must be ordered.\n\nThis order is represented by a precedence number. The lower values\nare inserted before higher values. Meaning higher precedence styles\noverwrite lower precedence styles.\n\nEach rule has some traits that are put into a bit set which form\nthe precedence:\n\n| bits | trait                                                |\n| ---- | ---------------------------------------------------- |\n| 1    | dark mode                                            |\n| 2    | layer: preflight, global, components, utilities, css |\n| 1    | screens: is this a responsive variation of a rule    |\n| 5    | responsive based on min-width                        |\n| 4    | at-rules                                             |\n| 18   | pseudo and group variants                            |\n| 4    | number of declarations (descending)                  |\n| 4    | greatest precedence of properties                    |\n\n**Dark Mode: 1 bit**\n\nFlag for dark mode rules.\n\n**Layer: 3 bits**\n\n- defaults = 0: The preflight styles and any base styles registered by plugins.\n- base = 1: The global styles registered by plugins.\n- components = 2\n- variants = 3\n- compounds = 4\n- aliases = 5\n- utilities = 6: Utility classes and any utility classes registered by plugins.\n- css = 7: Styles generated by css\n\n**Screens: 1 bit**\n\nFlag for screen variants. They may not always have a `min-width` to be detected by _Responsive_ below.\n\n**Responsive: 4 bits**\n\nBased on extracted `min-width` value:\n\n- 576px -> 3\n- 1536px -> 10\n- 36rem -> 3\n- 96rem -> 9\n\n**At-Rules: 4 bits**\n\nBased on the count of special chars (`-:,`) within the at-rule.\n\n**Pseudo and group variants: 18 bits**\n\nEnsures predictable order of pseudo classes.\n\n- https://bitsofco.de/when-do-the-hover-focus-and-active-pseudo-classes-apply/#orderofstyleshoverthenfocusthenactive\n- https://developer.mozilla.org/docs/Web/CSS/:active#Active_links\n- https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js#L718\n\n**Number of declarations (descending): 4 bits**\n\nAllows single declaration styles to overwrite styles from multi declaration styles.\n\n**Greatest precedence of properties: 4 bits**\n\nEnsure shorthand properties are inserted before longhand properties; eg longhand override shorthand\n*/\n\nexport function moveToLayer(precedence: number, layer: number): number {\n  // Set layer (first reset, than set)\n  return (precedence & ~Layer.o) | layer\n}\n\n/*\nTo set a bit: n |= mask;\nTo clear a bit: n &= ~mask;\nTo test if a bit is set: (n & mask)\n\nBit shifts for the primary bits:\n\n| bits | trait                                                   | shift |\n| ---- | ------------------------------------------------------- | ----- |\n| 1    | dark mode                                               | 30    |\n| 3    | layer: preflight, global, components, utilities, css    | 27    |\n| 1    | screens: is this a responsive variation of a rule       | 26    |\n| 4    | responsive based on min-width, max-width or width       | 22    |\n| 4    | at-rules                                                | 18    |\n| 18   | pseudo and group variants                               | 0     |\n\nLayer: 0 - 7: 3 bits\n  - defaults: 0 << 27\n  - base: 1 << 27\n  - components: 2 << 27\n  - variants: 3 << 27\n  - joints: 4 << 27\n  - aliases: 5 << 27\n  - utilities: 6 << 27\n  - overrides: 7 << 27\n\nThese are calculated by serialize and added afterwards:\n\n| bits | trait                               |\n| ---- | ----------------------------------- |\n| 4    | number of selectors (descending)    |\n| 4    | number of declarations (descending) |\n| 4    | greatest precedence of properties   |\n\nThese are added by shifting the primary bits using multiplication as js only\nsupports bit shift up to 32 bits.\n*/\n\n// Colon and dash count of string (ascending)\nexport function seperatorPrecedence(string: string): number {\n  return string.match(/[-=:;]/g)?.length || 0\n}\n\nexport function atRulePrecedence(css: string): number {\n  // 0 - 15: 4 bits (max 144rem or 2304px)\n  // rem -> bit\n  // <20 ->  0 (<320px)\n  //  20 ->  1 (320px)\n  //  24 ->  2 (384px)\n  //  28 ->  3 (448px)\n  //  32 ->  4 (512px)\n  //  36 ->  5 (576px)\n  //  42 ->  6 (672px)\n  //  48 ->  7 (768px)\n  //  56 ->  8 (896px)\n  //  64 ->  9 (1024px)\n  //  72 -> 10 (1152px)\n  //  80 -> 11 (1280px)\n  //  96 -> 12 (1536px)\n  // 112 -> 13 (1792px)\n  // 128 -> 14 (2048px)\n  // 144 -> 15 (2304px)\n  // https://www.dcode.fr/function-equation-finder\n  return (\n    (Math.min(\n      /(?:^|width[^\\d]+)(\\d+(?:.\\d+)?)(p)?/.test(css)\n        ? Math.max(0, 29.63 * (+RegExp.$1 / (RegExp.$2 ? 15 : 1)) ** 0.137 - 43)\n        : 0,\n      15,\n    ) <<\n      22) /* Shifts.responsive */ |\n    (Math.min(seperatorPrecedence(css), 15) << 18) /* Shifts.atRules */\n  )\n}\n\n// Pesudo variant presedence\n// Chars 3 - 8: Uniquely identifies a pseudo selector\n// represented as a bit set for each relevant value\n// 18 bits: one for each variant plus one for unknown variants\n//\n// ':group-*' variants are normalized to their native pseudo class (':group-hover' -> ':hover')\n// as they already have a higher selector presedence due to the add '.group' ('.group:hover .group-hover:...')\n\n// Sources:\n// - https://bitsofco.de/when-do-the-hover-focus-and-active-pseudo-classes-apply/#orderofstyleshoverthenfocusthenactive\n// - https://developer.mozilla.org/docs/Web/CSS/:active#Active_links\n// - https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js#L931\n\nconst PRECEDENCES_BY_PSEUDO_CLASS = [\n  /* fi */ 'rst-c' /* hild: 0 */,\n  /* la */ 'st-ch' /* ild: 1 */,\n  // even and odd use: nth-child\n  /* nt */ 'h-chi' /* ld: 2 */,\n  /* an */ 'y-lin' /* k: 3 */,\n  /* li */ 'nk' /* : 4 */,\n  /* vi */ 'sited' /* : 5 */,\n  /* ch */ 'ecked' /* : 6 */,\n  /* em */ 'pty' /* : 7 */,\n  /* re */ 'ad-on' /* ly: 8 */,\n  /* fo */ 'cus-w' /* ithin : 9 */,\n  /* ho */ 'ver' /* : 10 */,\n  /* fo */ 'cus' /* : 11 */,\n  /* fo */ 'cus-v' /* isible : 12 */,\n  /* ac */ 'tive' /* : 13 */,\n  /* di */ 'sable' /* d : 14 */,\n  /* op */ 'tiona' /* l: 15 */,\n  /* re */ 'quire' /* d: 16 */,\n]\n\nfunction pseudoPrecedence(selector: string): number {\n  // use first found pseudo-class\n\n  return (\n    1 <<\n    ~(\n      (/:([a-z-]+)/.test(selector) &&\n        ~PRECEDENCES_BY_PSEUDO_CLASS.indexOf(RegExp.$1.slice(2, 7))) ||\n      ~17\n    )\n  )\n}\n\n// https://github.com/kripod/otion/blob/main/packages/otion/src/propertyMatchers.ts\n// \"+1\": [\n// \t/* ^border-.*(w|c|sty) */\n// \t\"border-.*(width,color,style)\",\n\n// \t/* ^[tlbr].{2,4}m?$ */\n// \t\"top\",\n// \t\"left\",\n// \t\"bottom\",\n// \t\"right\",\n\n// \t/* ^c.{7}$ */\n// \t\"continue\",\n\n// \t/* ^c.{8}$ */\n// \t\"container\",\n// ],\n\n// \"-1\": [\n// \t/* ^[fl].{5}l */\n// \t\"flex-flow\",\n// \t\"line-clamp\",\n\n// \t/* ^g.{8}$ */\n// \t\"grid-area\",\n\n// \t/* ^pl */\n// \t\"place-content\",\n// \t\"place-items\",\n// \t\"place-self\",\n\n// ],\n\n// group: 1 => +1\n// group: 2 => -1\n\n// 0 - 15 => 4 bits\n// Ignore vendor prefixed and custom properties\nexport function declarationPropertyPrecedence(property: string): number {\n  return property[0] == '-'\n    ? 0\n    : seperatorPrecedence(property) +\n        (/^(?:(border-(?!w|c|sty)|[tlbr].{2,4}m?$|c.{7,8}$)|([fl].{5}l|g.{8}$|pl))/.test(property)\n          ? +!!RegExp.$1 /* +1 */ || -!!RegExp.$2 /* -1 */\n          : 0) +\n        1\n}\n\nexport interface ConvertedRule {\n  /** The name to use for `&` expansion in selectors. Maybe empty for at-rules like `@import`, `@font-face`, `@media`, ... */\n  n?: string | undefined\n\n  /** The calculated precedence taking all variants into account. */\n  p: number\n\n  /** The rulesets (selectors and at-rules). expanded variants `@media ...`, `@supports ...`, `&:focus`, `.dark &` */\n  r?: string[]\n\n  /** Is this rule `!important` eg something like `!underline` or `!bg-red-500` or `!red-500` */\n  i?: boolean | undefined\n}\n\nexport function convert<Theme extends BaseTheme = BaseTheme>(\n  { n: name, i: important, v: variants = [] }: Partial<ParsedRule>,\n  context: Context<Theme>,\n  precedence: number,\n  conditions?: string[],\n): ConvertedRule {\n  if (name) {\n    name = toClassName({ n: name, i: important, v: variants })\n  }\n\n  conditions = [...asArray(conditions)]\n\n  for (const variant of variants) {\n    const screen = context.theme('screens', variant)\n\n    for (const condition of asArray((screen && mql(screen)) || context.v(variant))) {\n      conditions.push(condition)\n\n      precedence |= screen\n        ? (1 << 26) /* Shifts.screens */ | atRulePrecedence(condition)\n        : variant == 'dark'\n        ? 1 << 30 /* Shifts.darkMode */\n        : condition[0] == '@'\n        ? atRulePrecedence(condition)\n        : pseudoPrecedence(condition)\n    }\n  }\n\n  return { n: name, p: precedence, r: conditions, i: important }\n}\n","import type { BaseTheme, Context, Falsey, RuleResult, TwindRule } from '../types'\nimport type { ParsedRule } from '../parse'\n\nconst registry = new Map<string, RegisterCallback>()\n\nexport type RegisterCallback = (rule: ParsedRule, context: Context) => Falsey | TwindRule[]\n\nexport function register(className: string, factory: RegisterCallback): string {\n  registry.set(className, factory)\n  return className\n}\n\nexport function resolve<Theme extends BaseTheme = BaseTheme>(\n  rule: ParsedRule,\n  context: Context<Theme>,\n): RuleResult | TwindRule[] {\n  const factory = registry.get(rule.n)\n\n  return factory ? factory(rule, context as any) : context.r(rule.n, rule.v[0] == 'dark')\n}\n","import type { TwindRule } from '../types'\nimport { escape } from '../utils'\n\nexport function stringify(rule: TwindRule): string | undefined {\n  if (rule.d) {\n    const groups: string[] = []\n\n    const selector = replaceEach(\n      // merge all conditions into a selector string\n      rule.r.reduce((selector, condition) => {\n        if (condition[0] == '@') {\n          groups.push(condition)\n          return selector\n        }\n\n        // Go over the selector and replace the matching multiple selectors if any\n        return condition ? merge(selector, condition) : selector\n      }, '&'),\n      // replace '&' with rule name or an empty string\n      (selectorPart) => replaceReference(selectorPart, rule.n ? '.' + escape(rule.n) : ''),\n    )\n\n    if (selector) {\n      groups.push(selector.replace(/:merge\\((.+?)\\)/g, '$1'))\n    }\n\n    return groups.reduceRight((body, grouping) => grouping + '{' + body + '}', rule.d)\n  }\n}\n\nfunction replaceEach(selector: string, iteratee: (selectorPart: string) => string): string {\n  return selector.replace(\n    / *((?:\\(.+?\\)|\\[.+?\\]|[^,])+) *(,|$)/g,\n    (_, selectorPart: string, comma: string) => iteratee(selectorPart) + comma,\n  )\n}\n\nfunction replaceReference(selector: string, reference: string): string {\n  return selector.replace(/&/g, reference)\n}\n\nfunction merge(selector: string, condition: string): string {\n  return replaceEach(selector, (selectorPart) =>\n    replaceEach(\n      condition,\n      // If the current condition has a nested selector replace it\n      (conditionPart) => {\n        const mergeMatch = /(:merge\\(.+?\\))(:[a-z-]+|\\\\[.+])/.exec(conditionPart)\n\n        if (mergeMatch) {\n          const selectorIndex = selectorPart.indexOf(mergeMatch[1])\n\n          if (~selectorIndex) {\n            // [':merge(.group):hover .rule', ':merge(.group):focus &'] -> ':merge(.group):focus:hover .rule'\n            // ':merge(.group)' + ':focus' + ':hover .rule'\n            return (\n              selectorPart.slice(0, selectorIndex) +\n              mergeMatch[0] +\n              selectorPart.slice(selectorIndex + mergeMatch[1].length)\n            )\n          }\n\n          // [':merge(.peer):focus~&', ':merge(.group):hover &'] -> ':merge(.peer):focus~:merge(.group):hover &'\n          return replaceReference(selectorPart, conditionPart)\n        }\n\n        // Return the current selector with the key matching multiple selectors if any\n        return replaceReference(conditionPart, selectorPart)\n      },\n    ),\n  )\n}\n","import { Layer } from './precedence'\n\nconst collator = new Intl.Collator('en', { numeric: true })\n\nexport interface SortableRule {\n  /** The calculated precedence taking all variants into account. */\n  p: number\n\n  /* The precedence of the properties within {@link d}. */\n  o: number\n\n  /** The name to use for `&` expansion in selectors. Maybe empty for at-rules like `@import`, `@font-face`, `@media`, ... */\n  n?: string | null\n}\n\n/**\n * Find the array index of where to add an element to keep it sorted.\n *\n * @returns The insertion index\n */\nexport function sortedInsertionIndex(\n  array: readonly SortableRule[],\n  element: SortableRule,\n): number {\n  // Find position using binary search\n  // eslint-disable-next-line no-var\n  for (var low = 0, high = array.length; low < high; ) {\n    const pivot = (high + low) >> 1\n\n    // Less-Then-Equal to add new equal element after all existing equal elements (stable sort)\n    if (compareTwindRules(array[pivot], element) <= 0) {\n      low = pivot + 1\n    } else {\n      high = pivot\n    }\n  }\n\n  return high\n}\n\nexport function compareTwindRules(a: SortableRule, b: SortableRule): number {\n  // base and overrides (css) layers are kept in order they are declared\n  const layer = a.p & Layer.o\n\n  if (layer == (b.p & Layer.o) && (layer == Layer.b || layer == Layer.o)) {\n    return 0\n  }\n\n  return (\n    a.p - b.p ||\n    a.o - b.o ||\n    collator.compare(byModifier(a.n), byModifier(b.n)) ||\n    collator.compare(byName(a.n), byName(b.n))\n  )\n}\n\nfunction byModifier(s: string | null | undefined) {\n  return ((s || '').split(/:/).pop() as string).split('/').pop() || '\\x00'\n}\n\nfunction byName(s: string | null | undefined) {\n  return (s || '').replace(/\\W/g, (c) => String.fromCharCode(127 + c.charCodeAt(0))) + '\\x00'\n}\n","import type { ColorValue, ColorFunctionOptions, Context, Falsey } from './types'\n\nfunction parseColorComponent(chars: string, factor: number): number {\n  return Math.round(parseInt(chars, 16) * factor)\n}\n\n/**\n * @internal\n * @param color\n * @param options\n * @returns\n */\nexport function toColorValue(color: ColorValue, options: ColorFunctionOptions = {}): string {\n  if (typeof color == 'function') {\n    return color(options)\n  }\n\n  const { opacityValue = '1', opacityVariable } = options\n  const opacity = opacityVariable ? `var(${opacityVariable})` : opacityValue\n\n  if (color.includes('<alpha-value>')) {\n    return color.replace('<alpha-value>', opacity)\n  }\n\n  // rgb hex: #0123 and #001122\n  if (color[0] == '#' && (color.length == 4 || color.length == 7)) {\n    const size = (color.length - 1) / 3\n    const factor = [17, 1, 0.062272][size - 1]\n\n    return `rgba(${[\n      parseColorComponent(color.substr(1, size), factor),\n      parseColorComponent(color.substr(1 + size, size), factor),\n      parseColorComponent(color.substr(1 + 2 * size, size), factor),\n      opacity,\n    ]})`\n  }\n\n  if (opacity == '1') return color\n  if (opacity == '0') return '#0000'\n\n  // convert rgb and hsl to alpha variant\n  return color.replace(/^(rgb|hsl)(\\([^)]+)\\)$/, `$1a$2,${opacity})`)\n}\n\n/**\n * Looks for a matching dark color within a [tailwind color palette](https://tailwindcss.com/docs/customizing-colors) (`50`, `100`, `200`, ..., `800`, `900`).\n *\n * ```js\n * defineConfig({\n *   darkColor: autoDarkColor,\n * })\n * ```\n *\n * **Note**: Does not work for arbitrary values like `[theme(colors.gray.500)]` or `[theme(colors.gray.500, #ccc)]`.\n *\n * @group Configuration\n * @param section within theme to use\n * @param key of the light color or an arbitrary value\n * @param context to use\n * @returns the dark color if found\n */\nexport function autoDarkColor(\n  section: string,\n  key: string,\n  { theme }: Context<any>,\n): ColorValue | Falsey {\n  // 50 -> 900, 100 -> 800, ..., 800 -> 100, 900 -> 50\n  // key: gray-50, gray.50\n  key = key.replace(\n    /\\d+$/,\n    (shade) =>\n      // ~~(parseInt(shade, 10) / 100): 50 -> 0, 900 -> 9\n      // (9 - 0) -> 900, (9 - 9) -> 50\n      ((9 - ~~(parseInt(shade, 10) / 100) || 0.5) * 100) as any,\n  )\n\n  return theme(section as 'colors', key)\n}\n","import type {\n  CSSObject,\n  Falsey,\n  Context,\n  TwindRule,\n  BaseTheme,\n  MaybeArray,\n  ColorValue,\n} from '../types'\nimport type { ParsedRule } from '../parse'\nimport type { ConvertedRule } from './precedence'\nimport { Layer, moveToLayer } from './precedence'\nimport { mql, hash, asArray } from '../utils'\n\nimport { atRulePrecedence, declarationPropertyPrecedence, convert } from './precedence'\nimport { stringify } from './stringify'\nimport { translateWith } from './translate'\nimport { parse } from '../parse'\nimport { compareTwindRules } from './sorted-insertion-index'\nimport { toColorValue } from '../colors'\n\nexport function serialize<Theme extends BaseTheme = BaseTheme>(\n  style: CSSObject | Falsey,\n  rule: Partial<ParsedRule>,\n  context: Context<Theme>,\n  precedence: number,\n  conditions: string[] = [],\n): TwindRule[] {\n  return serialize$(style, convert(rule, context, precedence, conditions), context)\n}\n\nfunction serialize$<Theme extends BaseTheme = BaseTheme>(\n  style: CSSObject | Falsey,\n  { n: name, p: precedence, r: conditions = [], i: important }: ConvertedRule,\n  context: Context<Theme>,\n): TwindRule[] {\n  const rules: TwindRule[] = []\n\n  // The generated declaration block eg body of the css rule\n  let declarations = ''\n\n  // This ensures that 'border-top-width' has a higher precedence than 'border-top'\n  let maxPropertyPrecedence = 0\n\n  // More specific utilities have less declarations and a higher precedence\n  let numberOfDeclarations = 0\n\n  for (let key in style || {}) {\n    const value = (style as Record<string, unknown>)[key]\n\n    if (key[0] == '@') {\n      // at rules: https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\n      if (!value) continue\n\n      // @apply ...;\n      if (key[1] == 'a') {\n        rules.push(\n          ...translateWith(\n            name as string,\n            precedence,\n            parse('' + value),\n            context,\n            precedence,\n            conditions,\n            important,\n            true /* useOrderOfRules */,\n          ),\n        )\n        continue\n      }\n\n      // @layer <layer>\n      if (key[1] == 'l') {\n        for (const css of asArray(value as MaybeArray<CSSObject>)) {\n          rules.push(\n            ...serialize$(\n              css,\n              {\n                n: name,\n                p: moveToLayer(precedence, Layer[key[7] as 'b']),\n                r: key[7] == 'd' ? [] : conditions,\n                i: important,\n              },\n              context,\n            ),\n          )\n        }\n\n        continue\n      }\n\n      // @import\n      if (key[1] == 'i') {\n        rules.push(\n          ...asArray(value).map((value) => ({\n            // before all layers\n            p: -1,\n            o: 0,\n            r: [],\n            d: key + ' ' + (value as string),\n          })),\n        )\n        continue\n      }\n\n      // @keyframes\n      if (key[1] == 'k') {\n        // Use defaults layer\n        rules.push({\n          p: Layer.d,\n          o: 0,\n          r: [key],\n          d: serialize$(value as CSSObject, { p: Layer.d }, context)\n            .map(stringify)\n            .join(''),\n        })\n        continue\n      }\n\n      // @font-face\n      // TODO @font-feature-values\n      if (key[1] == 'f') {\n        // Use defaults layer\n        rules.push(\n          ...asArray(value).map((value) => ({\n            p: Layer.d,\n            o: 0,\n            r: [key],\n            d: serialize$(value as CSSObject, { p: Layer.d }, context)\n              .map(stringify)\n              .join(''),\n          })),\n        )\n        continue\n      }\n      // -> All other are handled below; same as selector\n    }\n\n    // @media\n    // @supports\n    // selector\n    if (typeof value == 'object' && !Array.isArray(value)) {\n      // at-rule or non-global selector\n      if (key[0] == '@' || key.includes('&')) {\n        let rulePrecedence = precedence\n        if (key[0] == '@') {\n          // Handle `@media screen(sm)` and `@media (screen(sm) or ...)`\n          key = key.replace(/\\bscreen\\(([^)]+)\\)/g, (_, screenKey) => {\n            const screen = context.theme('screens', screenKey)\n\n            if (screen) {\n              rulePrecedence |= 1 << 26 /* Shifts.screens */\n              return mql(screen, '')\n            }\n\n            return _\n          })\n\n          rulePrecedence |= atRulePrecedence(key)\n        }\n\n        rules.push(\n          ...serialize$(\n            value as CSSObject,\n            {\n              n: name,\n              p: rulePrecedence,\n              r: [...conditions, key],\n              i: important,\n            },\n            context,\n          ),\n        )\n      } else {\n        // global selector\n        rules.push(\n          ...serialize$(value as CSSObject, { p: precedence, r: [...conditions, key] }, context),\n        )\n      }\n    } else if (key == 'label' && value) {\n      name = (value as string) + hash(JSON.stringify([precedence, important, style]))\n    } else if (value || value === 0) {\n      // property -> hyphenate\n      key = key.replace(/[A-Z]/g, (_) => '-' + _.toLowerCase())\n\n      // Update precedence\n      numberOfDeclarations += 1\n      maxPropertyPrecedence = Math.max(maxPropertyPrecedence, declarationPropertyPrecedence(key))\n\n      declarations +=\n        (declarations ? ';' : '') +\n        asArray(value)\n          .map((value) =>\n            context.s(\n              key,\n              // support theme(...) function in values\n              // calc(100vh - theme('spacing.12'))\n              resolveThemeFunction('' + value, context.theme) + (important ? ' !important' : ''),\n            ),\n          )\n          .join(';')\n    }\n  }\n\n  // PERF: prevent unshift using `rules = [{}]` above and then `rules[0] = {...}`\n  rules.unshift({\n    n: name,\n\n    p: precedence,\n\n    o:\n      // number of declarations (descending)\n      Math.max(0, 15 - numberOfDeclarations) +\n      // greatest precedence of properties\n      // if there is no property precedence this is most likely a custom property only declaration\n      // these have the highest precedence\n      Math.min(maxPropertyPrecedence || 15, 15) * 1.5,\n\n    r: conditions,\n\n    // stringified declarations\n    d: declarations,\n  })\n\n  return rules.sort(compareTwindRules)\n}\n\nexport function resolveThemeFunction<Theme extends BaseTheme = BaseTheme>(\n  value: string,\n  theme: Context<Theme>['theme'],\n): string {\n  // support theme(...) function in values\n  // calc(100vh - theme('spacing.12'))\n  // theme('borderColor.DEFAULT', 'currentColor')\n\n  // PERF: check for theme before running the regexp\n  // if (value.includes('theme')) {\n  return value.replace(\n    /theme\\(([\"'`])?(.+?)\\1(?:\\s*,\\s*([\"'`])?(.+?)\\3)?\\)/g,\n    (_, __, key: string, ___, defaultValue = '') => {\n      const value = theme(key, defaultValue)\n\n      if (typeof value == 'function' && /color|fill|stroke/i.test(key)) {\n        return toColorValue(value as ColorValue)\n      }\n\n      return '' + asArray(value as unknown).filter((v) => Object(v) !== v)\n    },\n  )\n  // }\n\n  // return value\n}\n","import type { TwindRule } from '../types'\n\nexport function merge(rules: TwindRule[], name: string): TwindRule[] {\n  // merge:\n  // - same conditions\n  // - replace name with hash of name + condititions + declarations\n  // - precedence:\n  //   - combine bits or use max precendence\n  //   - set layer bit to merged\n  const result: TwindRule[] = []\n\n  let current: TwindRule | undefined\n\n  for (const rule of rules) {\n    // only merge rules with declarations and names (eg no global rules)\n    if (!(rule.d && rule.n)) {\n      result.push({ ...rule, n: rule.n && name })\n    } else if (current?.p == rule.p && '' + current.r == '' + rule.r) {\n      current.c = [current.c, rule.c].filter(Boolean).join(' ')\n      current.d = current.d + ';' + rule.d\n    } else {\n      // only set name for named rules eg not for global or className propagation rules\n      result.push((current = { ...rule, n: rule.n && name }))\n    }\n  }\n\n  return result\n}\n","import type { TwindRule, Context, BaseTheme } from '../types'\nimport type { ParsedRule } from '../parse'\n\nimport { parse } from '../parse'\nimport { convert, Layer, moveToLayer } from './precedence'\n\nimport { resolve } from './registry'\nimport { serialize } from './serialize'\nimport { sortedInsertionIndex } from './sorted-insertion-index'\nimport { toClassName } from './to-class-name'\nimport { asArray } from '../utils'\nimport { merge } from './merge'\n\nexport function translate<Theme extends BaseTheme = BaseTheme>(\n  rules: readonly ParsedRule[],\n  context: Context<Theme>,\n  precedence = Layer.u,\n  conditions?: string[],\n  important?: boolean,\n): TwindRule[] {\n  // Sorted by precedence\n  const result: TwindRule[] = []\n\n  for (const rule of rules) {\n    for (const cssRule of translate$(rule, context, precedence, conditions, important)) {\n      result.splice(sortedInsertionIndex(result, cssRule), 0, cssRule)\n    }\n  }\n\n  return result\n}\n\nfunction translate$<Theme extends BaseTheme = BaseTheme>(\n  rule: ParsedRule,\n  context: Context<Theme>,\n  precedence: number,\n  conditions?: string[],\n  important?: boolean,\n): TwindRule[] {\n  rule = { ...rule, i: rule.i || important }\n\n  const resolved = resolve(rule, context)\n\n  if (!resolved) {\n    // propagate className as is\n    return [{ c: toClassName(rule), p: 0, o: 0, r: [] }]\n  }\n\n  // a list of class names\n  if (typeof resolved == 'string') {\n    ;({ r: conditions, p: precedence } = convert(rule, context, precedence, conditions))\n\n    return merge(translate(parse(resolved), context, precedence, conditions, rule.i), rule.n)\n  }\n\n  if (Array.isArray(resolved)) {\n    return resolved.map((rule) => ({\n      o: 0,\n      ...rule,\n      r: [...asArray(conditions), ...asArray(rule.r)],\n      p: moveToLayer(precedence, rule.p ?? precedence),\n    }))\n  }\n\n  return serialize(resolved, rule, context, precedence, conditions)\n}\n\nexport function translateWith<Theme extends BaseTheme = BaseTheme>(\n  name: string,\n  layer: number,\n  rules: ParsedRule[],\n  context: Context<Theme>,\n  precedence: number,\n  conditions?: string[] | undefined,\n  important?: boolean | undefined,\n  useOrderOfRules?: boolean,\n) {\n  return merge(\n    (useOrderOfRules\n      ? rules.flatMap((rule) => translate([rule], context, precedence, conditions, important))\n      : translate(rules, context, precedence, conditions, important)\n    ).map((rule) =>\n      // do not move defaults\n      // move only rules with a name unless they are in the base layer\n      rule.p & Layer.o && (rule.n || layer == Layer.b)\n        ? { ...rule, p: moveToLayer(rule.p, layer), o: 0 }\n        : rule,\n    ),\n    name,\n  )\n}\n","import type { Falsey } from '../types'\nimport type { ParsedRule } from '../parse'\nimport { convert } from './precedence'\nimport { register } from './registry'\nimport { translateWith } from './translate'\n\nexport function define(\n  className: string,\n  layer: number,\n  rules: Falsey | ParsedRule[],\n  useOrderOfRules?: boolean,\n): string {\n  return register(className, (rule, context) => {\n    const { n: name, p: precedence, r: conditions, i: important } = convert(rule, context, layer)\n\n    return (\n      rules &&\n      translateWith(\n        name as string,\n        layer,\n        rules,\n        context,\n        precedence,\n        conditions,\n        important,\n        useOrderOfRules,\n      )\n    )\n  })\n}\n","import { DEV } from 'distilt/env'\n\nimport { hash } from './utils'\nimport { define } from './internal/define'\nimport { format } from './internal/format'\nimport { Layer } from './internal/precedence'\n\nexport interface ParsedRule {\n  /**\n   * The utility name including `-` if set, but without `!` and variants\n   */\n  readonly n: string\n\n  /**\n   * All variants without trailing colon: `hover`, `after:`, `[...]`\n   */\n  readonly v: string[]\n\n  /**\n   * Something like `!underline` or `!bg-red-500` or `!red-500`\n   */\n  readonly i?: boolean\n}\n\nexport interface ParsedDevRule extends ParsedRule {\n  readonly a: string[]\n  readonly l: [start: number, end: number]\n}\n\nfunction createRule(\n  active: string[],\n  current: ParsedRule[][],\n  loc?: ParsedDevRule['l'] | false,\n): void {\n  if (active[active.length - 1] != '(') {\n    const variants: string[] = []\n    let important = false\n    let negated = false\n    let name = ''\n\n    for (let value of active) {\n      if (value == '(' || /[~@]$/.test(value)) continue\n\n      if (value[0] == '!') {\n        value = value.slice(1)\n        important = !important\n      }\n\n      if (value.endsWith(':')) {\n        variants[value == 'dark:' ? 'unshift' : 'push'](value.slice(0, -1))\n        continue\n      }\n\n      if (value[0] == '-') {\n        value = value.slice(1)\n        negated = !negated\n      }\n\n      if (value.endsWith('-')) {\n        value = value.slice(0, -1)\n      }\n\n      if (value && value != '&') {\n        name += (name && '-') + value\n      }\n    }\n\n    if (name) {\n      if (negated) name = '-' + name\n\n      current[0].push(\n        DEV\n          ? Object.defineProperties(\n              { n: name, v: variants.filter(uniq), i: important },\n              {\n                a: { value: [...active] },\n                l: { value: loc },\n              },\n            )\n          : { n: name, v: variants.filter(uniq), i: important },\n      )\n    }\n  }\n}\n\nfunction uniq<T>(value: T, index: number, values: T[]): boolean {\n  return values.indexOf(value) == index\n}\n\nconst cache = new Map<string, ParsedRule[]>()\n\n/**\n * @internal\n * @param token\n * @returns\n */\nexport function parse(token: string): ParsedRule[] {\n  let parsed = cache.get(token)\n\n  if (!parsed) {\n    // Stack of active groupings (`(`), variants, or nested (`~` or `@`)\n    const active: string[] = []\n\n    // Stack of current rule list to put new rules in\n    // the first `0` element is the current list\n    const current: ParsedRule[][] = [[]]\n\n    let startIndex = 0\n    let skip = 0\n    let comment: RegExp | null = null\n    let position = 0\n\n    // eslint-disable-next-line no-inner-declarations\n    const commit = (isRule?: boolean, endOffset = 0) => {\n      if (startIndex != position) {\n        active.push(token.slice(startIndex, position + endOffset))\n\n        if (isRule) {\n          createRule(active, current, DEV && [startIndex, position + endOffset])\n        }\n      }\n      startIndex = position + 1\n    }\n\n    for (; position < token.length; position++) {\n      const char = token[position]\n\n      if (skip) {\n        // within [...]\n        // skip over until not skipping\n        // ignore escaped chars\n        if (token[position - 1] != '\\\\') {\n          skip += +(char == '[') || -(char == ']')\n        }\n      } else if (char == '[') {\n        // start to skip\n        skip += 1\n      } else if (comment) {\n        if (token[position - 1] != '\\\\' && comment.test(token.slice(position))) {\n          comment = null\n          startIndex = position + RegExp.lastMatch.length\n        }\n      } else if (\n        char == '/' &&\n        token[position - 1] != '\\\\' &&\n        (token[position + 1] == '*' || token[position + 1] == '/')\n      ) {\n        // multiline or single line comment\n        comment = token[position + 1] == '*' ? /^\\*\\// : /^[\\r\\n]/\n      } else if (char == '(') {\n        // hover:(...) or utilitity-(...)\n        commit()\n        active.push(char)\n      } else if (char == ':') {\n        // hover: or after::\n        if (token[position + 1] != ':') {\n          commit(false, 1)\n        }\n      } else if (/[\\s,)]/.test(char)) {\n        // whitespace, comma or closing brace\n        commit(true)\n\n        let lastGroup = active.lastIndexOf('(')\n\n        if (char == ')') {\n          // Close nested block\n          const nested = active[lastGroup - 1]\n\n          if (/[~@]$/.test(nested)) {\n            const rules = current.shift() as ParsedRule[]\n\n            active.length = lastGroup\n\n            // remove variants that are already applied through active\n            createRule([...active, '#'], current, DEV && [startIndex, position])\n            const { v } = current[0].pop() as ParsedRule\n\n            for (const rule of rules) {\n              // if a rule has dark we need to splice after the first entry eg dark\n              rule.v.splice(+(rule.v[0] == 'dark') - +(v[0] == 'dark'), v.length)\n            }\n\n            createRule(\n              [\n                ...active,\n                define(\n                  // named nested\n                  nested.length > 1\n                    ? nested.slice(0, -1) + hash(JSON.stringify([nested, rules]))\n                    : nested + '(' + format(rules) + ')',\n                  Layer.a,\n                  rules,\n                  /@$/.test(nested),\n                ),\n              ],\n              current,\n              DEV && [startIndex, position],\n            )\n          }\n\n          lastGroup = active.lastIndexOf('(', lastGroup - 1)\n        }\n\n        active.length = lastGroup + 1\n      } else if (/[~@]/.test(char) && token[position + 1] == '(') {\n        // start nested block\n        // ~(...) or button~(...)\n        // @(...) or button@(...)\n        current.unshift([])\n      }\n    }\n\n    // Consume remaining stack\n    commit(true)\n\n    cache.set(token, (parsed = current[0]))\n  }\n\n  return parsed\n}\n","export function interleave<Interpolations>(\n  strings: TemplateStringsArray,\n  interpolations: readonly Interpolations[],\n  handle: (interpolation: Interpolations) => string,\n): string {\n  return interpolations.reduce(\n    (result: string, interpolation, index) => result + handle(interpolation) + strings[index + 1],\n    strings[0],\n  )\n}\n","import type { Class } from '../types'\nimport { interleave } from './interleave'\n\n// based on https://github.com/lukeed/clsx and https://github.com/jorgebucaran/classcat\nexport function interpolate(\n  strings: TemplateStringsArray | Class,\n  interpolations: Class[],\n): string {\n  return Array.isArray(strings) && Array.isArray((strings as unknown as TemplateStringsArray).raw)\n    ? interleave(strings as unknown as TemplateStringsArray, interpolations, (value) =>\n        toString(value).trim(),\n      )\n    : interpolations\n        .filter(Boolean)\n        .reduce(\n          (result: string, value) => result + toString(value),\n          strings ? toString(strings as Class) : '',\n        )\n}\n\nfunction toString(value: Class): string {\n  let result = ''\n  let tmp: string\n\n  if (value && typeof value == 'object') {\n    if (Array.isArray(value)) {\n      if ((tmp = interpolate(value[0], value.slice(1)))) {\n        result += ' ' + tmp\n      }\n    } else {\n      for (const key in value) {\n        if (value[key]) result += ' ' + key\n      }\n    }\n  } else if (value != null && typeof value != 'boolean') {\n    result += ' ' + value\n  }\n\n  return result\n}\n","import type { Class, Nested } from './types'\nimport { format } from './internal/format'\nimport { parse } from './parse'\nimport { interpolate } from './internal/interpolate'\n\n/**\n * @group Class Name Generators\n */\nexport const apply = /* #__PURE__ */ alias('@')\n\n/**\n * @group Class Name Generators\n */\nexport const shortcut = /* #__PURE__ */ alias('~')\n\nfunction alias(marker: string): Nested {\n  return new Proxy(\n    function alias(strings: TemplateStringsArray | Class, ...interpolations: Class[]): string {\n      return alias$('', strings, interpolations)\n    } as Nested,\n    {\n      get(target, name) {\n        if (name in target) return target[name as string]\n\n        return function namedAlias(\n          strings: TemplateStringsArray | Class,\n          ...interpolations: Class[]\n        ): string {\n          return alias$(name as string, strings, interpolations)\n        }\n      },\n    },\n  )\n\n  function alias$(\n    name: string,\n    strings: TemplateStringsArray | Class,\n    interpolations: Class[],\n  ): string {\n    return format(parse(name + marker + '(' + interpolate(strings, interpolations) + ')'))\n  }\n}\n","import type { CSSObject, CSSValue } from '../types'\nimport { interleave } from './interleave'\n\nexport function astish(\n  strings: CSSObject | string | TemplateStringsArray,\n  interpolations: readonly CSSValue[],\n): CSSObject[] {\n  return Array.isArray(strings)\n    ? astish$(\n        interleave(strings as TemplateStringsArray, interpolations, (interpolation) =>\n          interpolation != null && typeof interpolation != 'boolean'\n            ? (interpolation as unknown as string)\n            : '',\n        ),\n      )\n    : typeof strings == 'string'\n    ? astish$(strings)\n    : [strings as CSSObject]\n}\n\n// Based on https://github.com/cristianbote/goober/blob/master/src/core/astish.js\nconst newRule = / *(?:(?:([\\u0080-\\uFFFF\\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}))/g\n\n/**\n * Convert a css style string into a object\n */\nfunction astish$(css: string): CSSObject[] {\n  css = removeComments(css)\n\n  const tree: CSSObject[] = [{}]\n  const rules: CSSObject[] = [tree[0]]\n  const conditions: string[] = []\n  let block: RegExpExecArray | null\n\n  while ((block = newRule.exec(css))) {\n    // Remove the current entry\n    if (block[4]) {\n      tree.shift()\n      conditions.shift()\n    }\n\n    if (block[3]) {\n      // new nested\n      conditions.unshift(block[3])\n      tree.unshift({})\n      rules.push(conditions.reduce((body, condition) => ({ [condition]: body }), tree[0]))\n    } else if (!block[4]) {\n      // if we already have that property — start a new CSSObject\n      if (tree[0][block[1]]) {\n        tree.unshift({})\n        rules.push(conditions.reduce((body, condition) => ({ [condition]: body }), tree[0]))\n      }\n      tree[0][block[1]] = block[2]\n    }\n  }\n\n  // console.log(rules)\n  return rules\n}\n\n// Remove comments (multiline and single line)\nfunction removeComments(css: string): string {\n  return css.replace(/\\/\\*[^]*?\\*\\/|\\s\\s+|\\n/gm, ' ')\n}\n","import type { CSSObject, CSSValue } from './types'\n\nimport { register } from './internal/registry'\nimport { serialize } from './internal/serialize'\nimport { hash } from './utils'\nimport { Layer } from './internal/precedence'\nimport { merge } from './internal/merge'\nimport { astish } from './internal/astish'\n\n/**\n * @group Class Name Generators\n * @param strings\n * @param interpolations\n */\nexport function css(strings: TemplateStringsArray, ...interpolations: readonly CSSValue[]): string\n\nexport function css(style: CSSObject | string): string\n\nexport function css(\n  strings: CSSObject | string | TemplateStringsArray,\n  ...interpolations: readonly CSSValue[]\n): string {\n  const ast = astish(strings, interpolations)\n\n  const className = (ast.find((o) => o.label)?.label || 'css') + hash(JSON.stringify(ast))\n\n  return register(className, (rule, context) =>\n    merge(\n      ast.flatMap((css) => serialize(css, rule, context, Layer.o)),\n      className,\n    ),\n  )\n}\n","import type { CSSObject, CSSProperties, StringLike } from './types'\n\nimport { css } from './css'\n\nexport interface AnimationFunction {\n  (animation: string | CSSProperties, waypoints: StringLike): StringLike\n}\n\nexport type Animation = AnimationFunction & {\n  [label: string]: AnimationFunction\n}\n\n/**\n * @group Class Name Generators\n */\nexport const animation = /* #__PURE__ */ new Proxy(\n  function animation(animation: string | CSSProperties, waypoints: StringLike): StringLike {\n    return animation$('animation', animation, waypoints)\n  } as Animation,\n  {\n    get(target, name) {\n      if (name in target) return target[name as string]\n\n      return function namedAnimation(\n        animation: string | CSSProperties,\n        waypoints: StringLike,\n      ): StringLike {\n        return animation$(name as string, animation, waypoints)\n      }\n    },\n  },\n)\n\nfunction animation$(\n  label: string,\n  animation: string | CSSProperties,\n  waypoints: StringLike,\n): StringLike {\n  return {\n    toString() {\n      return css({\n        label,\n        '@layer components': {\n          ...(typeof animation == 'object' ? animation : { animation }),\n          animationName: '' + waypoints,\n        },\n      } as CSSObject)\n    },\n  } as StringLike\n}\n","import { DEV } from 'distilt/env'\n\nimport type {\n  Context,\n  ColorValue,\n  ColorFunction,\n  BaseTheme,\n  MatchResult,\n  RuleResolver,\n  CSSProperties,\n  CSSObject,\n  RuleResult,\n  ThemeValue,\n  KebabCase,\n  MatchConverter,\n  Rule,\n  MaybeArray,\n} from './types'\n\nimport { toColorValue } from './colors'\nimport { resolveThemeFunction } from './internal/serialize'\nimport {\n  type AutocompleteProvider,\n  type AutocompleteItem,\n  withAutocomplete,\n  type AutocompleteModifier,\n} from './autocomplete'\n\nexport type ThemeMatchResult<Value> = MatchResult & {\n  /** The found theme value */\n  _: Value\n}\n\nexport type ThemeRuleResolver<Value, Theme extends BaseTheme = BaseTheme> = RuleResolver<\n  Theme,\n  ThemeMatchResult<Value>\n>\n\nexport type ThemeMatchConverter<Value, Theme extends BaseTheme = BaseTheme> = MatchConverter<\n  Theme,\n  ThemeMatchResult<Value>\n>\n\n// indirection wrapper to remove autocomplete functions from production bundles\nfunction withAutocomplete$<Theme extends BaseTheme = BaseTheme>(\n  resolver: RuleResolver<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false,\n): RuleResolver<Theme> {\n  if (DEV) {\n    return withAutocomplete(resolver, autocomplete)\n  }\n\n  return resolver\n}\n\n/**\n * @group Configuration\n * @param pattern\n */\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n): Rule<Theme>\n\n/**\n * @group Configuration\n * @param pattern\n * @param resolver\n */\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n  resolver: RuleResolver<Theme>,\n): Rule<Theme>\n\n/**\n * @group Configuration\n * @param pattern\n * @param resolve\n */\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  resolve: (string & {}) | CSSObject,\n): Rule<Theme>\n\n/**\n * @group Configuration\n * @param pattern\n * @param resolve\n * @param convert\n */\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n  resolve: keyof CSSProperties,\n  convert?: MatchConverter<Theme>,\n): Rule<Theme>\n\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  resolve?: RuleResolver<Theme> | (string & {}) | CSSObject | keyof CSSProperties,\n  convert?: MatchConverter<Theme>,\n): Rule<Theme> {\n  return [pattern, fromMatch(resolve as keyof CSSProperties, convert)]\n}\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(): RuleResolver<Theme>\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(\n  resolver: RuleResolver<Theme>,\n): RuleResolver<Theme>\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(\n  resolve: keyof CSSProperties,\n  convert?: MatchConverter<Theme>,\n): RuleResolver<Theme>\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(\n  resolve: string | CSSObject,\n): RuleResolver<Theme>\n\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(\n  resolve?: RuleResolver<Theme> | keyof CSSProperties | string | CSSObject,\n  convert?: MatchConverter<Theme>,\n): RuleResolver<Theme> {\n  return typeof resolve == 'function'\n    ? resolve\n    : typeof resolve == 'string' && /^[\\w-]+$/.test(resolve) // a CSS property alias\n    ? (match, context) =>\n        ({\n          [resolve]: convert ? convert(match, context) : maybeNegate(match, 1),\n        } as CSSObject)\n    : (match) =>\n        // CSSObject, shortcut or apply\n        resolve ||\n        ({\n          [match[1]]: maybeNegate(match, 2),\n        } as CSSObject)\n}\n\nfunction maybeNegate<T>(\n  match: MatchResult,\n  offset: number,\n  value: T | string = match.slice(offset).find(Boolean) || match.$$ || match.input,\n): T | string {\n  return match.input[0] == '-' ? `calc(${value} * -1)` : value\n}\n\n/**\n * @group Configuration\n * @param pattern\n * @param section\n * @param resolve\n * @param convert\n * @returns\n */\nexport function matchTheme<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof Theme & string = keyof Theme & string,\n>(\n  pattern: MaybeArray<string | RegExp>,\n\n  /** Theme section to use (default: `$1` — The first matched group) */\n  section?: '' | Section | KebabCase<Section>,\n\n  /** The css property (default: value of {@link section}) */\n  resolve?: keyof CSSProperties | ThemeRuleResolver<ThemeValue<Theme[Section]>, Theme>,\n\n  convert?: ThemeMatchConverter<ThemeValue<Theme[Section]>, Theme>,\n): Rule<Theme> {\n  return [pattern, fromTheme(section, resolve, convert)]\n}\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link matchTheme} instead.\n * @param section\n * @param resolve\n * @param convert\n * @returns\n */\nexport function fromTheme<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof Theme & string = keyof Theme & string,\n>(\n  /** Theme section to use (default: `$1` — The first matched group) */\n  section?: '' | Section | KebabCase<Section>,\n\n  /** The css property (default: value of {@link section}) */\n  resolve?: keyof CSSProperties | ThemeRuleResolver<ThemeValue<Theme[Section]>, Theme>,\n\n  convert?: ThemeMatchConverter<ThemeValue<Theme[Section]>, Theme>,\n): RuleResolver<Theme> {\n  const factory: (\n    match: ThemeMatchResult<ThemeValue<Theme[Section]>>,\n    context: Context<Theme>,\n    section: Section,\n  ) => RuleResult =\n    typeof resolve == 'string'\n      ? (match, context) =>\n          ({ [resolve]: convert ? convert(match, context) : match._ } as CSSObject)\n      : resolve || (({ 1: $1, _ }, context, section) => ({ [$1 || section]: _ } as CSSObject))\n\n  return withAutocomplete$(\n    (match, context) => {\n      const themeSection = camelize(section || match[1]) as Section\n\n      const value =\n        context.theme(themeSection, match.$$) ??\n        (arbitrary(match.$$, themeSection, context) as ThemeValue<Theme[Section]>)\n\n      if (value != null) {\n        ;(match as ThemeMatchResult<ThemeValue<Theme[Section]>>)._ = maybeNegate(\n          match,\n          0,\n          value,\n        ) as ThemeValue<Theme[Section]>\n\n        return factory(match as ThemeMatchResult<ThemeValue<Theme[Section]>>, context, themeSection)\n      }\n    },\n    DEV &&\n      ((match, context) => {\n        const themeSection = camelize(section || match[1]) as Section\n\n        const isKeyLookup = match.input.endsWith('-')\n\n        if (isKeyLookup) {\n          return Object.entries(context.theme(themeSection) || {})\n            .filter(\n              ([key, value]) =>\n                key &&\n                key != 'DEFAULT' &&\n                (!/color|fill|stroke/i.test(themeSection) ||\n                  ['string', 'function'].includes(typeof value)),\n            )\n            .map(\n              ([key, value]): AutocompleteItem => ({\n                suffix: key.replace(/-DEFAULT/g, ''),\n                theme: { section: themeSection, key },\n                color:\n                  /color|fill|stroke/i.test(themeSection) &&\n                  toColorValue(value as ColorValue, { opacityValue: '1' }),\n              }),\n            )\n            .concat([{ suffix: '[' }])\n        }\n\n        const value = context.theme(themeSection, 'DEFAULT')\n\n        if (value) {\n          return [\n            {\n              suffix: '',\n              theme: { section: themeSection, key: 'DEFAULT' },\n              color:\n                /color|fill|stroke/i.test(themeSection) &&\n                toColorValue(value as ColorValue, { opacityValue: '1' }),\n            },\n          ]\n        }\n\n        return []\n      }),\n  )\n}\n\nexport type FilterByThemeValue<Theme, Value> = {\n  [key in keyof Theme & string]: ThemeValue<Theme[key]> extends Value ? Theme[key] : never\n}\n\nexport interface ColorFromThemeValue {\n  value: string\n  color: ColorFunction\n  opacityVariable: string | undefined\n  opacityValue: string | undefined\n}\n\nexport interface ColorFromThemeOptions<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof FilterByThemeValue<Theme, ColorValue> = keyof FilterByThemeValue<\n    Theme,\n    ColorValue\n  >,\n  OpacitySection extends keyof FilterByThemeValue<Theme, string> = keyof FilterByThemeValue<\n    Theme,\n    string\n  >,\n> {\n  /** Theme section to use (default: `$0.replace('-', 'Color')` — The matched string with `Color` appended) */\n  section?: Section | KebabCase<Section>\n  /** The css property (default: value of {@link section}) */\n  property?: keyof CSSProperties\n  /** `--tw-${$0}opacity` -> '--tw-text-opacity' */\n  opacityVariable?: string | false\n  /** `section.replace('Color', 'Opacity')` -> 'textOpacity' */\n  opacitySection?: OpacitySection\n  selector?: string\n}\n\n/**\n * @group Configuration\n * @param pattern\n * @param options\n * @param resolve\n * @returns\n */\nexport function matchColor<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof FilterByThemeValue<Theme, ColorValue> = keyof FilterByThemeValue<\n    Theme,\n    ColorValue\n  >,\n  OpacitySection extends keyof FilterByThemeValue<Theme, string> = keyof FilterByThemeValue<\n    Theme,\n    string\n  >,\n>(\n  pattern: MaybeArray<string | RegExp>,\n  options: ColorFromThemeOptions<Theme, Section, OpacitySection> = {},\n  resolve?: ThemeRuleResolver<ColorFromThemeValue, Theme>,\n): Rule<Theme> {\n  return [pattern, colorFromTheme(options, resolve)]\n}\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link matchColor} instead.\n * @param options\n * @param resolve\n * @returns\n */\nexport function colorFromTheme<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof FilterByThemeValue<Theme, ColorValue> = keyof FilterByThemeValue<\n    Theme,\n    ColorValue\n  >,\n  OpacitySection extends keyof FilterByThemeValue<Theme, string> = keyof FilterByThemeValue<\n    Theme,\n    string\n  >,\n>(\n  options: ColorFromThemeOptions<Theme, Section, OpacitySection> = {},\n  resolve?: ThemeRuleResolver<ColorFromThemeValue, Theme>,\n): RuleResolver<Theme> {\n  return withAutocomplete$(\n    (match, context) => {\n      // text- -> textColor\n      // ring-offset(?:-|$) -> ringOffsetColor\n      const { section = (camelize(match[0]).replace('-', '') + 'Color') as Section } = options\n\n      // extract color and opacity\n      // rose-500                  -> ['rose-500']\n      // [hsl(0_100%_/_50%)]       -> ['[hsl(0_100%_/_50%)]']\n      // indigo-500/100            -> ['indigo-500', '100']\n      // [hsl(0_100%_/_50%)]/[.25] -> ['[hsl(0_100%_/_50%)]', '[.25]']\n      const [colorMatch, opacityMatch] = parseValue(match.$$)\n\n      if (!colorMatch) return\n\n      const colorValue =\n        (context.theme(section, colorMatch) as ColorValue) ||\n        arbitrary(colorMatch, section, context)\n\n      if (!colorValue || typeof colorValue == 'object') return\n\n      const {\n        // text- -> --tw-text-opacity\n        // ring-offset(?:-|$) -> --tw-ring-offset-opacity\n        // TODO move this default into preset-tailwind?\n        opacityVariable = `--tw-${match[0].replace(/-$/, '')}-opacity`,\n        opacitySection = section.replace('Color', 'Opacity') as OpacitySection,\n        property = section,\n        selector,\n      } = options\n\n      const opacityValue =\n        (context.theme(opacitySection, opacityMatch || 'DEFAULT') as string | undefined) ||\n        (opacityMatch && arbitrary(opacityMatch, opacitySection, context))\n\n      // if (typeof color != 'string') {\n      //   console.warn(`Invalid color ${colorMatch} (from ${match.input}):`, color)\n      //   return\n      // }\n\n      const create =\n        resolve ||\n        (({ _ }) => {\n          const properties = toCSS(property, _)\n\n          return selector ? { [selector]: properties } : properties\n        })\n\n      ;(match as ThemeMatchResult<ColorFromThemeValue>)._ = {\n        value: toColorValue(colorValue, {\n          opacityVariable: opacityVariable || undefined,\n          opacityValue: opacityValue || undefined,\n        }),\n        color: (options) => toColorValue(colorValue, options),\n        opacityVariable: opacityVariable || undefined,\n        opacityValue: opacityValue || undefined,\n      }\n\n      let properties = create(match as ThemeMatchResult<ColorFromThemeValue>, context)\n\n      // auto support dark mode colors\n      if (!match.dark) {\n        const darkColorValue = context.d(section, colorMatch, colorValue)\n\n        if (darkColorValue && darkColorValue !== colorValue) {\n          ;(match as ThemeMatchResult<ColorFromThemeValue>)._ = {\n            value: toColorValue(darkColorValue, {\n              opacityVariable: opacityVariable || undefined,\n              opacityValue: opacityValue || '1',\n            }),\n            color: (options) => toColorValue(darkColorValue, options),\n            opacityVariable: opacityVariable || undefined,\n            opacityValue: opacityValue || undefined,\n          }\n\n          properties = {\n            '&': properties,\n            [context.v('dark') as string]: create(\n              match as ThemeMatchResult<ColorFromThemeValue>,\n              context,\n            ),\n          } as CSSObject\n        }\n      }\n\n      return properties\n    },\n    DEV &&\n      ((match, context) => {\n        const {\n          section = (camelize(match[0]).replace('-', '') + 'Color') as Section,\n          opacitySection = section.replace('Color', 'Opacity') as OpacitySection,\n        } = options\n\n        const isKeyLookup = match.input.endsWith('-')\n\n        const opacities = Object.entries<string>(context.theme(opacitySection) || {}).filter(\n          ([key, value]) => key != 'DEFAULT' && /^[\\w-]+$/.test(key) && typeof value == 'string',\n        )\n\n        if (isKeyLookup) {\n          // ['gray-50', ['/0', '/10', ...]],\n          // ['gray-100', ['/0', '/10', ...]],\n\n          return Object.entries(context.theme(section) || {})\n            .filter(\n              ([key, value]) =>\n                key && key != 'DEFAULT' && ['string', 'function'].includes(typeof value),\n            )\n            .map(\n              ([key, value]): AutocompleteItem => ({\n                suffix: key.replace(/-DEFAULT/g, ''),\n                theme: { section, key },\n                color: toColorValue(value as ColorValue, {\n                  opacityValue: (context.theme(opacitySection, 'DEFAULT') as string) || '1',\n                }),\n                modifiers:\n                  (typeof value == 'function' ||\n                    (typeof value == 'string' &&\n                      (value.includes('<alpha-value>') ||\n                        (value[0] == '#' && (value.length == 4 || value.length == 7))))) &&\n                  opacities\n                    .map(\n                      ([key, opacityValue]): AutocompleteModifier => ({\n                        modifier: key,\n                        theme: { section: opacitySection, key },\n                        color: toColorValue(value as ColorValue, { opacityValue }),\n                      }),\n                    )\n                    .concat([\n                      {\n                        modifier: '[',\n                        color: toColorValue(value as ColorValue, { opacityValue: '1' }),\n                      },\n                    ]),\n              }),\n            )\n            .concat([{ suffix: '[' }])\n        }\n\n        const value = context.theme(section, 'DEFAULT')\n\n        if (value) {\n          return [\n            {\n              suffix: '',\n              theme: { section, key: 'DEFAULT' },\n              color: toColorValue(value as ColorValue, {\n                opacityValue: (context.theme(opacitySection, 'DEFAULT') as string) || '1',\n              }),\n              modifiers:\n                (typeof value == 'function' ||\n                  (typeof value == 'string' &&\n                    (value.includes('<alpha-value>') ||\n                      (value[0] == '#' && (value.length == 4 || value.length == 7))))) &&\n                opacities\n                  .map(\n                    ([key, opacityValue]): AutocompleteModifier => ({\n                      modifier: key,\n                      theme: { section: opacitySection, key },\n                      color: toColorValue(value as ColorValue, { opacityValue }),\n                    }),\n                  )\n                  .concat([\n                    {\n                      modifier: '[',\n                      color: toColorValue(value as ColorValue, { opacityValue: '1' }),\n                    },\n                  ]),\n            },\n          ]\n        }\n\n        return []\n      }),\n  )\n}\n\n/**\n * @internal\n * @param input\n */\nexport function parseValue(\n  input: string,\n):\n  | [value: string, modifier: string | undefined]\n  | [value: undefined, modifier: string | undefined] {\n  // extract color and opacity\n  // rose-500                  -> ['rose-500']\n  // [hsl(0_100%_/_50%)]       -> ['[hsl(0_100%_/_50%)]']\n  // indigo-500/100            -> ['indigo-500', '100']\n  // [hsl(0_100%_/_50%)]/[.25] -> ['[hsl(0_100%_/_50%)]', '[.25]']\n  return (input.match(/^(\\[[^\\]]+]|[^/]+?)(?:\\/(.+))?$/) || []).slice(1) as [\n    value: string,\n    modifier: string | undefined,\n  ]\n}\n\n/**\n * @internal\n * @param property\n * @param value\n * @returns\n */\nexport function toCSS(property: string, value: string | ColorFromThemeValue): CSSObject {\n  const properties: CSSObject = {}\n\n  if (typeof value === 'string') {\n    properties[property] = value\n  } else {\n    if (value.opacityVariable && value.value.includes(value.opacityVariable)) {\n      properties[value.opacityVariable] = value.opacityValue || '1'\n    }\n\n    properties[property] = value.value\n  }\n\n  return properties\n}\n\n/**\n * @internal\n * @param value\n * @param section\n * @param context\n * @returns\n */\nexport function arbitrary<Theme extends BaseTheme = BaseTheme>(\n  value: string,\n  section: string | undefined,\n  context: Context<Theme>,\n): string | undefined {\n  if (value[0] == '[' && value.slice(-1) == ']') {\n    value = normalize(resolveThemeFunction(value.slice(1, -1), context.theme))\n\n    if (!section) return value\n\n    if (\n      // Respect type hints from the user on ambiguous arbitrary values - https://tailwindcss.com/docs/adding-custom-styles#resolving-ambiguities\n      !(\n        // If this is a color section and the value is a hex color, color function or color name\n        (\n          (/color|fill|stroke/i.test(section) &&\n            !(\n              /^color:/.test(value) || /^(#|((hsl|rgb)a?|hwb|lab|lch|color)\\(|[a-z]+$)/.test(value)\n            )) ||\n          // url(, [a-z]-gradient(, image(, cross-fade(, image-set(\n          (/image/i.test(section) && !(/^image:/.test(value) || /^[a-z-]+\\(/.test(value))) ||\n          // font-*\n          // - fontWeight (type: ['lookup', 'number', 'any'])\n          // - fontFamily (type: ['lookup', 'generic-name', 'family-name'])\n          (/weight/i.test(section) && !(/^(number|any):/.test(value) || /^\\d+$/.test(value))) ||\n          // bg-*\n          // - backgroundPosition (type: ['lookup', ['position', { preferOnConflict: true }]])\n          // - backgroundSize (type: ['lookup', 'length', 'percentage', 'size'])\n          (/position/i.test(section) && /^(length|size):/.test(value))\n        )\n      )\n    ) {\n      // remove arbitrary type prefix — we do not need it but user may use it\n      // https://github.com/tailwindlabs/tailwindcss/blob/master/src/util/dataTypes.js\n      // url, number, percentage, length, line-width, shadow, color, image, gradient, position, family-name, lookup, any, generic-name, absolute-size, relative-size\n      return value.replace(/^[a-z-]+:/, '')\n    }\n  }\n}\n\nfunction camelize(value: string): string {\n  return value.replace(/-./g, (x) => x[1].toUpperCase())\n}\n\n/**\n * @internal\n * @param value\n * @returns\n */\nexport function normalize(value: string): string {\n  // Keep raw strings if it starts with `url(`\n  if (value.includes('url(')) {\n    return value.replace(\n      /(.*?)(url\\(.*?\\))(.*?)/g,\n      (_, before = '', url, after = '') => normalize(before) + url + normalize(after),\n    )\n  }\n\n  return (\n    value\n      // Convert `_` to ` `, except for escaped underscores `\\_`\n      .replace(\n        /(^|[^\\\\])_+/g,\n        (fullMatch, characterBefore: string) =>\n          characterBefore + ' '.repeat(fullMatch.length - characterBefore.length),\n      )\n      .replace(/\\\\_/g, '_')\n\n      // Add spaces around operators inside math functions like calc() that do not follow an operator\n      // or '('.\n      .replace(/(calc|min|max|clamp)\\(.+\\)/g, (match) =>\n        match.replace(\n          /(-?\\d*\\.?\\d(?!\\b-.+[,)](?![^+\\-/*])\\D)(?:%|[a-z]+)?|\\))([+\\-/*])/g,\n          '$1 $2 ',\n        ),\n      )\n  )\n}\n","import type {\n  BaseTheme,\n  CSSProperties,\n  MatchResult,\n  Rule,\n  RuleResolver,\n  ThemeFunction,\n  VariantResolver,\n} from './types'\nimport { DEV } from 'distilt/env'\nimport { fromMatch } from './rules'\nimport { asArray } from './utils'\n\nexport type AutocompleteItem = {\n  prefix?: string\n  suffix: string\n  theme?: { section: string; key: string }\n  modifiers?: AutocompleteModifier[] | false | null | undefined\n  color?: string | false | null | undefined\n  label?: string\n}\n\nexport type AutocompleteModifier = {\n  modifier: string\n  theme?: { section: string; key: string }\n  color?: string | false | null | undefined\n  label?: string\n}\n\nexport interface AutocompleteContext<Theme extends BaseTheme = BaseTheme> {\n  /** Allows to resolve theme values. */\n  readonly theme: ThemeFunction<Theme>\n  readonly variants: Record<string, string>\n}\n\nexport type AutocompleteProvider<Theme extends BaseTheme = BaseTheme> = (\n  match: MatchResult,\n  context: AutocompleteContext<Theme>,\n) => (string | AutocompleteItem)[]\n\nconst kAutocomplete = /* #__PURE__ */ Symbol('@twind/autocomplete')\n\n/**\n * @experimental\n * @group Configuration\n * @param resolver\n * @param autocomplete\n */\nexport function withAutocomplete<Theme extends BaseTheme = BaseTheme>(\n  resolver: RuleResolver<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false | null | undefined,\n): RuleResolver<Theme>\n\nexport function withAutocomplete<Theme extends BaseTheme = BaseTheme>(\n  resolver: VariantResolver<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false | null | undefined,\n): VariantResolver<Theme>\n\nexport function withAutocomplete<Theme extends BaseTheme = BaseTheme>(\n  rule: Rule<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false | null | undefined,\n): Rule<Theme>\n\nexport function withAutocomplete<Theme extends BaseTheme = BaseTheme>(\n  rule: Rule<Theme> | RuleResolver<Theme> | VariantResolver<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false | null | undefined,\n): Rule<Theme> | RuleResolver<Theme> | VariantResolver<Theme> {\n  if (DEV && autocomplete) {\n    if (typeof rule == 'function') {\n      return Object.defineProperty(rule, kAutocomplete, {\n        value: autocomplete,\n        configurable: true,\n      })\n    }\n\n    const [pattern, resolve, convert] = asArray(rule) as Exclude<Rule<Theme>, string | RegExp>\n\n    // [\n    //   patterns: MaybeArray<string | RegExp>,\n    //   resolve?: keyof CSSProperties | string | CSSObject | RuleResolver<Theme>,\n    //   convert?: MatchConverter<Theme>,\n    // ]\n\n    return [\n      pattern,\n      Object.defineProperty(fromMatch(resolve as keyof CSSProperties, convert), kAutocomplete, {\n        value: autocomplete,\n        configurable: true,\n      }),\n    ]\n  }\n\n  return rule\n}\n\n/**\n * @internal\n * @param resolver\n * @returns\n */\nexport function getAutocompleteProvider<Theme extends BaseTheme = BaseTheme>(\n  resolver: RuleResolver<Theme> | VariantResolver<Theme>,\n): AutocompleteProvider<Theme> | undefined {\n  return (resolver as { [kAutocomplete]?: AutocompleteProvider<Theme> })[kAutocomplete]\n}\n","import type { Class } from './types'\nimport { parse } from './parse'\nimport { format } from './internal/format'\nimport { interpolate } from './internal/interpolate'\n\n/**\n * Constructs `class` strings conditionally.\n *\n * Twinds version of popular libraries like [classnames](https://github.com/JedWatson/classnames) or [clsx](https://github.com/lukeed/clsx).\n * The key advantage of `cx` is that it supports twinds enhanced class name syntax like grouping and aliases.\n *\n * @group Class Name Generators\n * @param strings\n * @param interpolations\n * @returns\n */\nexport function cx(strings: TemplateStringsArray, ...interpolations: Class[]): string\n\n/**\n * Constructs `class` strings conditionally.\n *\n * Twinds version of popular libraries like [classnames](https://github.com/JedWatson/classnames) or [clsx](https://github.com/lukeed/clsx).\n * The key advantage of `cx` is that it supports twinds enhanced class name syntax like grouping and aliases.\n *\n * @group Class Name Generators\n * @param input\n */\nexport function cx(...input: Class[]): string\n\nexport function cx(strings: TemplateStringsArray | Class, ...interpolations: Class[]): string {\n  return format(parse(interpolate(strings, interpolations)), ' ')\n}\n","import type {\n  BaseTheme,\n  Preset,\n  TwindConfig,\n  TwindUserConfig,\n  ExtractThemes,\n  TwindPresetConfig,\n} from './types'\n\nimport { asArray } from './utils'\n\n/**\n * @group Configuration\n * @param param0\n * @returns\n */\nexport function defineConfig<Theme = BaseTheme, Presets extends Preset<any>[] = Preset[]>({\n  presets = [] as unknown as Presets,\n  ...userConfig\n}: TwindUserConfig<Theme, Presets>): TwindConfig<BaseTheme & ExtractThemes<Theme, Presets>> {\n  // most user config values go first to have precendence over preset config\n  // only `preflight` and `theme` are applied as last preset to override all presets\n  let config: TwindConfig<BaseTheme & ExtractThemes<Theme, Presets>> = {\n    darkMode: undefined,\n    darkColor: undefined,\n    preflight: userConfig.preflight !== false && [],\n    theme: {},\n    variants: asArray(userConfig.variants),\n    rules: asArray(userConfig.rules),\n    ignorelist: asArray(userConfig.ignorelist),\n    hash: undefined,\n    stringify: (property, value) => property + ':' + value,\n    finalize: [],\n  }\n\n  for (const preset of asArray([\n    ...presets,\n    {\n      darkMode: userConfig.darkMode,\n      darkColor: userConfig.darkColor,\n      preflight: userConfig.preflight !== false && asArray(userConfig.preflight),\n      theme: userConfig.theme as TwindConfig<BaseTheme & ExtractThemes<Theme, Presets>>['theme'],\n      hash: userConfig.hash,\n      stringify: userConfig.stringify,\n      finalize: userConfig.finalize,\n    } as TwindPresetConfig<Theme>,\n  ])) {\n    const {\n      preflight,\n      darkMode = config.darkMode,\n      darkColor = config.darkColor,\n      theme,\n      variants,\n      rules,\n      ignorelist,\n      hash = config.hash,\n      stringify = config.stringify,\n      finalize,\n    } = typeof preset == 'function' ? preset(config) : (preset as TwindPresetConfig<Theme>)\n\n    config = {\n      // values defined by user or previous presets take precedence\n      preflight: config.preflight !== false &&\n        preflight !== false && [...config.preflight, ...asArray(preflight)],\n\n      darkMode,\n      darkColor,\n\n      theme: {\n        ...config.theme,\n        ...theme,\n        extend: {\n          ...config.theme.extend,\n          ...theme?.extend,\n        },\n      },\n\n      variants: [...config.variants, ...asArray(variants)],\n      rules: [...config.rules, ...asArray(rules)],\n      ignorelist: [...config.ignorelist, ...asArray(ignorelist)],\n\n      hash,\n      stringify,\n\n      finalize: [...config.finalize, ...asArray(finalize)],\n    } as TwindConfig<BaseTheme & ExtractThemes<Theme, Presets>>\n  }\n\n  return config\n}\n","import { DEV } from 'distilt/env'\n\ndeclare global {\n  interface WindowEventMap {\n    warning: CustomEvent<Warning>\n  }\n}\n\nexport type Warning = {\n  [Code in keyof WarningEventMap]: { message: string; code: Code; detail: WarningEventMap[Code] }\n}[keyof WarningEventMap]\n\nexport interface WarningEventMap {\n  TWIND_INVALID_CLASS: string\n  TWIND_INVALID_CSS: string\n}\n\nexport function warn<Code extends keyof WarningEventMap>(\n  message: string,\n  code: Code,\n  detail: WarningEventMap[Code],\n): void {\n  if (DEV) {\n    if (typeof dispatchEvent == 'function' && typeof CustomEvent === 'function') {\n      // Browser\n      const event = new CustomEvent('warning', {\n        detail: { message, code, detail },\n        cancelable: true,\n      })\n\n      dispatchEvent(event)\n\n      if (!event.defaultPrevented) {\n        console.warn(`[${code}] ${message}`, { detail })\n      }\n    } else if (typeof process == 'object' && typeof process.emitWarning == 'function') {\n      // Node.JS\n      process.emitWarning(message, { code, detail } as unknown as string)\n    } else {\n      // Fallback\n      console.warn(`[${code}] ${message}`, { detail })\n    }\n  }\n}\n","import type {\n  BaseTheme,\n  Context,\n  RuleResult,\n  TwindConfig,\n  CSSProperties,\n  MatchResult,\n  MaybeArray,\n  RuleResolver,\n  MatchConverter,\n  Rule,\n  CSSObject,\n  Variant,\n  VariantResult,\n  VariantResolver,\n  Falsey,\n} from '../types'\n\nimport { DEV } from 'distilt/env'\n\nimport { makeThemeFunction } from './theme'\nimport { asArray, escape, hash as defaultHash, identity, noop } from '../utils'\nimport { fromMatch } from '../rules'\nimport { warn } from './warn'\n\ntype ResolveFunction<Theme extends BaseTheme = BaseTheme> = (\n  className: string,\n  context: Context<Theme>,\n  isDark?: boolean,\n) => RuleResult\n\ntype VariantFunction<Theme extends BaseTheme = BaseTheme> = (\n  variant: string,\n  context: Context<Theme>,\n) => VariantResult\n\nexport function createContext<Theme extends BaseTheme = BaseTheme>({\n  theme,\n  darkMode,\n  darkColor = noop,\n  variants,\n  rules,\n  hash,\n  stringify,\n  ignorelist,\n  finalize,\n}: TwindConfig<Theme>): Context<Theme> {\n  // Used to cache resolved rule values\n  const variantCache = new Map<string, MaybeArray<string>>()\n\n  // lazy created resolve functions\n  const variantResolvers = new Map<Variant<Theme>, VariantFunction<Theme>>()\n\n  // Used to cache resolved rule values\n  const ruleCache = new Map<string, RuleResult>()\n\n  // lazy created resolve functions\n  const ruleResolvers = new Map<Rule<Theme>, ResolveFunction<Theme>>()\n\n  const ignored = createRegExpExecutor(ignorelist, (value, condition) => condition.test(value))\n\n  const reportedUnknownClasses = /* #__PURE__ */ new Set<string>()\n\n  // add dark as last variant to allow user to override it\n  // we can modify variants as it has been passed through defineConfig which already made a copy\n  variants.push([\n    'dark',\n    Array.isArray(darkMode) || darkMode == 'class'\n      ? `${asArray(darkMode)[1] || '.dark'} &`\n      : typeof darkMode == 'string' && darkMode != 'media'\n      ? darkMode // a custom selector\n      : '@media (prefers-color-scheme:dark)',\n  ])\n\n  const h =\n    typeof hash == 'function'\n      ? (value: string) => hash(value, defaultHash)\n      : hash\n      ? defaultHash\n      : identity\n\n  if (h !== identity) {\n    finalize.push((rule) => ({\n      ...rule,\n      n: rule.n && h(rule.n),\n      d: rule.d?.replace(\n        /--(tw(?:-[\\w-]+)?)\\b/g,\n        (_: string, property: string) => '--' + h(property).replace('#', ''),\n      ),\n    }))\n  }\n\n  const ctx: Context<Theme> = {\n    theme: makeThemeFunction(theme),\n\n    e: escape,\n\n    h,\n\n    s(property, value) {\n      return stringify(property, value, ctx)\n    },\n\n    d(section, key, color) {\n      return darkColor(section, key, ctx, color)\n    },\n\n    v(value) {\n      if (!variantCache.has(value)) {\n        variantCache.set(\n          value,\n          find(value, variants, variantResolvers, getVariantResolver, ctx) || '&:' + value,\n        )\n      }\n\n      return variantCache.get(value) as string\n    },\n\n    r(className, isDark) {\n      const key = JSON.stringify([className, isDark])\n\n      if (!ruleCache.has(key)) {\n        ruleCache.set(\n          key,\n          !ignored(className, ctx) &&\n            find(className, rules, ruleResolvers, getRuleResolver, ctx, isDark),\n        )\n\n        if (DEV) {\n          const rule = ruleCache.get(key)\n          if (rule == null && !reportedUnknownClasses.has(className)) {\n            reportedUnknownClasses.add(className)\n\n            warn(\n              `Unknown class ${JSON.stringify(className)} found.`,\n              'TWIND_INVALID_CLASS',\n              className,\n            )\n          }\n        }\n      }\n\n      return ruleCache.get(key)\n    },\n\n    f(rule) {\n      return finalize.reduce((rule, p) => p(rule, ctx), rule)\n    },\n  }\n\n  return ctx\n}\n\nfunction find<Value, Config, Result, Theme extends BaseTheme = BaseTheme>(\n  value: Value,\n  list: Config[],\n  cache: Map<Config, (value: Value, context: Context<Theme>, isDark?: boolean) => Result>,\n  getResolver: (\n    item: Config,\n  ) => (value: Value, context: Context<Theme>, isDark?: boolean) => Result,\n  context: Context<Theme>,\n  isDark?: boolean,\n) {\n  for (const item of list) {\n    let resolver = cache.get(item)\n\n    if (!resolver) {\n      cache.set(item, (resolver = getResolver(item)))\n    }\n\n    const resolved = resolver(value, context, isDark)\n\n    if (resolved) return resolved\n  }\n}\n\nfunction getVariantResolver<Theme extends BaseTheme = BaseTheme>(\n  variant: Variant<Theme>,\n): VariantFunction<Theme> {\n  return createVariantFunction(variant[0], variant[1])\n}\n\nfunction getRuleResolver<Theme extends BaseTheme = BaseTheme>(\n  rule: Rule<Theme>,\n): ResolveFunction<Theme> {\n  if (Array.isArray(rule)) {\n    return createResolveFunction(rule[0], rule[1], rule[2])\n  }\n\n  return createResolveFunction(rule)\n}\n\nfunction createVariantFunction<Theme extends BaseTheme = BaseTheme>(\n  patterns: MaybeArray<string | RegExp>,\n  resolve: string | VariantResolver<Theme>,\n): VariantFunction<Theme> {\n  return createResolve(patterns, typeof resolve == 'function' ? resolve : () => resolve)\n}\n\nfunction createResolveFunction<Theme extends BaseTheme = BaseTheme>(\n  patterns: MaybeArray<string | RegExp>,\n  resolve?: keyof CSSProperties | string | CSSObject | RuleResolver<Theme>,\n  convert?: MatchConverter<Theme>,\n): ResolveFunction<Theme> {\n  return createResolve(patterns, fromMatch(resolve as keyof CSSProperties, convert))\n}\n\nfunction createResolve<Result, Theme extends BaseTheme = BaseTheme>(\n  patterns: MaybeArray<string | RegExp>,\n  resolve: (match: MatchResult, context: Context<Theme>) => Result,\n): (value: string, context: Context<Theme>, isDark?: boolean) => Result | undefined {\n  return createRegExpExecutor(patterns, (value, condition, context, isDark?: boolean) => {\n    const match = condition.exec(value) as MatchResult | Falsey\n\n    if (match) {\n      // MATCH.$_ = value\n      match.$$ = value.slice(match[0].length)\n      match.dark = isDark\n\n      return resolve(match, context)\n    }\n  })\n}\n\nfunction createRegExpExecutor<Result, Theme extends BaseTheme = any>(\n  patterns: MaybeArray<string | RegExp>,\n  run: (value: string, condition: RegExp, context: Context<Theme>, isDark?: boolean) => Result,\n): (value: string, context: Context<Theme>, isDark?: boolean) => Result | undefined {\n  const conditions = asArray(patterns).map(toCondition)\n\n  return (value, context, isDark) => {\n    for (const condition of conditions) {\n      const result = run(value, condition, context, isDark)\n\n      if (result) return result\n    }\n  }\n}\n\nexport function toCondition(value: string | RegExp): RegExp {\n  // \"visible\" -> /^visible$/\n  // \"(float)-(left|right|none)\" -> /^(float)-(left|right|none)$/\n  // \"auto-rows-\" -> /^auto-rows-/\n  // \"gap(-|$)\" -> /^gap(-|$)/\n  return typeof value == 'string'\n    ? new RegExp('^' + value + (value.includes('$') || value.slice(-1) == '-' ? '' : '$'))\n    : value\n}\n","import type {\n  BaseTheme,\n  ExtractThemes,\n  Preset,\n  Twind,\n  Sheet,\n  TwindConfig,\n  TwindRule,\n  TwindUserConfig,\n} from './types'\nimport type { SortableRule } from './internal/sorted-insertion-index'\n\nimport { sortedInsertionIndex } from './internal/sorted-insertion-index'\nimport { stringify } from './internal/stringify'\nimport { createContext } from './internal/context'\nimport { translate, translateWith } from './internal/translate'\nimport { parse } from './parse'\nimport { defineConfig } from './define-config'\nimport { asArray } from './utils'\nimport { serialize } from './internal/serialize'\nimport { Layer } from './internal/precedence'\n\n/**\n * @group Runtime\n * @param config\n * @param sheet\n */\nexport function twind<Theme extends BaseTheme = BaseTheme, Target = unknown>(\n  config: TwindConfig<Theme>,\n  sheet: Sheet<Target>,\n): Twind<Theme, Target>\n\nexport function twind<\n  Theme = BaseTheme,\n  Presets extends Preset<any>[] = Preset[],\n  Target = unknown,\n>(\n  config: TwindUserConfig<Theme, Presets>,\n  sheet: Sheet<Target>,\n): Twind<BaseTheme & ExtractThemes<Theme, Presets>, Target>\n\nexport function twind(userConfig: TwindConfig<any> | TwindUserConfig<any>, sheet: Sheet): Twind {\n  const config = defineConfig(userConfig as TwindUserConfig<any>)\n\n  const context = createContext(config)\n\n  // Map of tokens to generated className\n  let cache = new Map<string, string>()\n\n  // An array of precedence by index within the sheet\n  // always sorted\n  let sortedPrecedences: SortableRule[] = []\n\n  // Cache for already inserted css rules\n  // to prevent double insertions\n  let insertedRules = new Set<string>()\n\n  sheet.resume(\n    (className) => cache.set(className, className),\n    (cssText, rule) => {\n      sheet.insert(cssText, sortedPrecedences.length, rule)\n      sortedPrecedences.push(rule)\n      insertedRules.add(cssText)\n    },\n  )\n\n  function insert(rule: TwindRule): string | undefined {\n    const finalRule = context.f(rule)\n\n    const cssText = stringify(finalRule)\n\n    // If not already inserted\n    if (cssText && !insertedRules.has(cssText)) {\n      // Mark rule as inserted\n      insertedRules.add(cssText)\n\n      // Find the correct position\n      const index = sortedInsertionIndex(sortedPrecedences, rule)\n\n      // Insert\n      sheet.insert(cssText, index, rule)\n\n      // Update sorted index\n      sortedPrecedences.splice(index, 0, rule)\n    }\n\n    return finalRule.n\n  }\n\n  return Object.defineProperties(\n    function tw(tokens) {\n      if (!cache.size) {\n        for (let preflight of asArray(config.preflight)) {\n          if (typeof preflight == 'function') {\n            preflight = preflight(context)\n          }\n\n          if (preflight) {\n            ;(typeof preflight == 'string'\n              ? translateWith('', Layer.b, parse(preflight), context, Layer.b, [], false, true)\n              : serialize(preflight, {}, context, Layer.b)\n            ).forEach(insert)\n          }\n        }\n      }\n\n      tokens = '' + tokens\n\n      let className = cache.get(tokens)\n\n      if (!className) {\n        const classNames = new Set<string | undefined>()\n\n        for (const rule of translate(parse(tokens), context)) {\n          classNames.add(rule.c).add(insert(rule))\n        }\n\n        className = [...classNames].filter(Boolean).join(' ')\n\n        // Remember the generated class name\n        cache.set(tokens, className).set(className, className)\n      }\n\n      return className\n    } as Twind,\n    Object.getOwnPropertyDescriptors({\n      get target() {\n        return sheet.target\n      },\n\n      theme: context.theme,\n\n      config,\n\n      snapshot() {\n        const restoreSheet = sheet.snapshot()\n        const insertedRules$ = new Set(insertedRules)\n        const cache$ = new Map(cache)\n        const sortedPrecedences$ = [...sortedPrecedences]\n\n        return () => {\n          restoreSheet()\n\n          insertedRules = insertedRules$\n          cache = cache$\n          sortedPrecedences = sortedPrecedences$\n        }\n      },\n\n      clear() {\n        sheet.clear()\n\n        insertedRules = new Set()\n        cache = new Map()\n        sortedPrecedences = []\n      },\n\n      destroy() {\n        this.clear()\n        sheet.destroy()\n      },\n    }),\n  )\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport type {\n  BaseTheme,\n  MaybeColorValue,\n  ThemeConfig,\n  ThemeFunction,\n  ThemeSectionResolverContext,\n} from '../types'\nimport { toColorValue } from '../colors'\nimport { resolveThemeFunction } from './serialize'\n\nexport function makeThemeFunction<Theme extends BaseTheme = BaseTheme>({\n  extend = {},\n  ...base\n}: ThemeConfig<Theme>): ThemeFunction<Theme> {\n  const resolved: Record<string, any> = {}\n\n  const resolveContext: ThemeSectionResolverContext<Theme> = {\n    get colors() {\n      return theme('colors')\n    },\n\n    theme,\n\n    // Stub implementation as negated values are automatically infered and do _not_ need to be in the theme\n    negative() {\n      return {}\n    },\n\n    breakpoints(screens) {\n      const breakpoints = {} as Record<string, string>\n\n      for (const key in screens) {\n        if (typeof screens[key] == 'string') {\n          breakpoints['screen-' + key] = screens[key] as string\n        }\n      }\n\n      return breakpoints\n    },\n  }\n\n  return theme as ThemeFunction<Theme>\n\n  function theme(\n    sectionKey?: string,\n    key?: string,\n    defaultValue?: any,\n    opacityValue?: string | undefined,\n  ): any {\n    if (sectionKey) {\n      ;({ 1: sectionKey, 2: opacityValue } =\n        // eslint-disable-next-line no-sparse-arrays\n        /^(\\S+?)(?:\\s*\\/\\s*([^/]+))?$/.exec(sectionKey) || ([, sectionKey] as [undefined, string]))\n\n      if (/[.[]/.test(sectionKey)) {\n        const path: string[] = []\n\n        // dotted deep access: colors.gray.500 or spacing[2.5]\n        sectionKey.replace(\n          /\\[([^\\]]+)\\]|([^.[]+)/g,\n          (_, $1, $2 = $1) => path.push($2) as unknown as string,\n        )\n\n        sectionKey = path.shift() as string\n        defaultValue = key\n        key = path.join('-')\n      }\n\n      const section =\n        resolved[sectionKey] ||\n        // two-step deref to allow extend section to reference base section\n        Object.assign(\n          Object.assign(\n            // Make sure to not get into recursive calls\n            (resolved[sectionKey] = {}),\n            deref(base, sectionKey),\n          ),\n          deref(extend, sectionKey),\n        )\n\n      if (key == null) return section\n\n      key ||= 'DEFAULT'\n\n      const value =\n        section[key] ?? key.split('-').reduce((obj, prop) => obj?.[prop], section) ?? defaultValue\n\n      return opacityValue\n        ? toColorValue(value, { opacityValue: resolveThemeFunction(opacityValue, theme) })\n        : value\n    }\n\n    // Collect the whole theme\n    const result = {} as Record<string, any>\n\n    for (const section of [...Object.keys(base), ...Object.keys(extend)]) {\n      result[section] = theme(section)\n    }\n\n    return result\n  }\n\n  function deref(source: any, section: string): any {\n    let value = source[section]\n\n    if (typeof value == 'function') {\n      value = value(resolveContext)\n    }\n\n    if (value && /color|fill|stroke/i.test(section)) {\n      return flattenColorPalette(value)\n    }\n\n    return value\n  }\n}\n\nfunction flattenColorPalette(colors: Record<string, MaybeColorValue>, path: string[] = []): any {\n  const flattend: Record<string, MaybeColorValue> = {}\n\n  for (const key in colors) {\n    const value = colors[key]\n\n    let keyPath = [...path, key]\n\n    flattend[keyPath.join('-')] = value\n\n    if (key == 'DEFAULT') {\n      keyPath = path\n      flattend[path.join('-')] = value\n    }\n\n    if (typeof value == 'object') {\n      Object.assign(flattend, flattenColorPalette(value, keyPath))\n    }\n  }\n\n  return flattend\n}\n","/**\n * Determines if two class name strings contain the same classes.\n *\n * @param a first class names\n * @param b second class names\n * @returns are they different\n */\nexport function changed(a: string, b: string): boolean {\n  return a != b && '' + a.split(' ').sort() != '' + b.split(' ').sort()\n}\n","import type { BaseTheme, Twind } from './types'\n\nimport { changed } from './internal/changed'\nimport { tw as tw$ } from './runtime'\n\nexport interface TwindMutationObserver {\n  observe: (target: Node) => void\n  disconnect: () => void\n}\n\n/**\n * @group Runtime\n * @param tw\n * @param target\n * @returns\n * @internal\n */\nexport function mo<Theme extends BaseTheme = BaseTheme, Target = unknown>(\n  tw: Twind<Theme, Target>,\n): TwindMutationObserver {\n  const observer = new MutationObserver(handleMutationRecords)\n\n  return {\n    observe(target) {\n      observer.observe(target, {\n        attributeFilter: ['class'],\n        subtree: true,\n        childList: true,\n      })\n\n      // handle class attribute on target\n      handleClassAttributeChange(target as Element)\n\n      // handle children of target\n      handleMutationRecords([{ target, type: '' }])\n    },\n    disconnect() {\n      observer.disconnect()\n    },\n  }\n\n  function handleMutationRecords(records: MinimalMutationRecord[]): void {\n    for (const { type, target } of records) {\n      if (type[0] == 'a' /* attribute */) {\n        // class attribute has been changed\n        handleClassAttributeChange(target as Element)\n      } else {\n        /* childList */\n        // some nodes have been added — find all with a class attribute\n        for (const el of (target as Element).querySelectorAll('[class]')) {\n          handleClassAttributeChange(el)\n        }\n      }\n    }\n\n    // remove pending mutations — these are triggered by updating the class attributes\n    observer.takeRecords()\n    // XXX maybe we need to handle all pending mutations\n    // observer.takeRecords().forEach(handleMutation)\n  }\n\n  function handleClassAttributeChange(target: Element): void {\n    // Not using target.classList.value (not supported in all browsers) or target.class (this is an SVGAnimatedString for svg)\n    // safe guard access to getAttribute because ShadowRoot does not have attribute but child nodes\n    const tokens = target.getAttribute?.('class')\n\n    let className: string\n\n    // try do keep classNames unmodified\n    if (tokens && changed(tokens, (className = tw(tokens)))) {\n      // Not using `target.className = ...` as that is read-only for SVGElements\n      target.setAttribute('class', className)\n    }\n  }\n}\n\n/**\n * @group Runtime\n * @param tw\n * @param target\n * @returns\n */\nexport function observe<Theme extends BaseTheme = BaseTheme, Target = unknown>(\n  tw: Twind<Theme, Target> = tw$ as unknown as Twind<Theme, Target>,\n  target: false | Node = typeof document != 'undefined' && document.documentElement,\n): Twind<Theme, Target> {\n  if (target) {\n    const observer = mo(tw)\n\n    observer.observe(target)\n\n    // monkey patch tw.destroy to disconnect this observer\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { destroy } = tw\n    tw.destroy = () => {\n      observer.disconnect()\n      destroy.call(tw)\n    }\n  }\n\n  return tw\n}\n\n/**\n * Simplified MutationRecord which allows us to pass an\n * ArrayLike (compatible with Array and NodeList) `addedNodes` and\n * omit other properties we are not interested in.\n */\ninterface MinimalMutationRecord {\n  readonly type: string\n  readonly target: Node\n}\n","import { warn } from './internal/warn'\nimport type { Sheet, SheetRule } from './types'\nimport { asArray, noop } from './utils'\n\nfunction getStyleElement(selector: string | null | undefined | false): HTMLStyleElement {\n  let style = document.querySelector(selector || 'style[data-twind=\"\"]')\n\n  if (!style || style.tagName != 'STYLE') {\n    style = document.createElement('style')\n    document.head.prepend(style)\n  }\n\n  ;(style as HTMLElement).dataset.twind = 'claimed'\n\n  return style as HTMLStyleElement\n}\n\n/**\n * @group Sheets\n * @param element\n * @returns\n */\nexport function cssom(\n  element?: CSSStyleSheet | HTMLStyleElement | string | null | false,\n): Sheet<CSSStyleSheet> {\n  const target = (element as CSSStyleSheet)?.cssRules\n    ? (element as CSSStyleSheet)\n    : ((element && typeof element != 'string'\n        ? (element as HTMLStyleElement)\n        : getStyleElement(element)\n      ).sheet as CSSStyleSheet)\n\n  return {\n    target,\n\n    snapshot() {\n      // collect current rules\n      const rules = Array.from(target.cssRules, (rule) => rule.cssText)\n\n      return () => {\n        // remove all existing rules\n        this.clear()\n\n        // add all snapshot rules back\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        rules.forEach(this.insert as (cssText: string, index: number) => void)\n      }\n    },\n\n    clear() {\n      // remove all added rules\n      for (let index = target.cssRules.length; index--; ) {\n        target.deleteRule(index)\n      }\n    },\n\n    destroy() {\n      target.ownerNode?.remove()\n    },\n\n    insert(cssText, index) {\n      try {\n        // Insert\n        target.insertRule(cssText, index)\n      } catch (error) {\n        // Empty rule to keep index valid — not using `*{}` as that would show up in all rules (DX)\n        target.insertRule(':root{}', index)\n\n        // Some thrown errors are because of specific pseudo classes\n        // lets filter them to prevent unnecessary warnings\n        // ::-moz-focus-inner\n        // :-moz-focusring\n        if (!/:-[mwo]/.test(cssText)) {\n          warn((error as Error).message, 'TWIND_INVALID_CSS', cssText)\n        }\n      }\n    },\n\n    resume: noop,\n  }\n}\n\n/**\n * @group Sheets\n * @param element\n * @returns\n */\nexport function dom(element?: HTMLStyleElement | string | null | false): Sheet<HTMLStyleElement> {\n  const target = element && typeof element != 'string' ? element : getStyleElement(element)\n\n  return {\n    target,\n\n    snapshot() {\n      // collect current rules\n      const rules = Array.from(target.childNodes, (node) => node.textContent as string)\n\n      return () => {\n        // remove all existing rules\n        this.clear()\n\n        // add all snapshot rules back\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        rules.forEach(this.insert as (cssText: string, index: number) => void)\n      }\n    },\n\n    clear() {\n      target.textContent = ''\n    },\n\n    destroy() {\n      target.remove()\n    },\n\n    insert(cssText, index) {\n      target.insertBefore(document.createTextNode(cssText), target.childNodes[index] || null)\n    },\n\n    resume: noop,\n  }\n}\n\n/**\n * @group Sheets\n * @param includeResumeData\n * @returns\n */\nexport function virtual(includeResumeData?: boolean): Sheet<string[]> {\n  const target: string[] = []\n\n  return {\n    target,\n\n    snapshot() {\n      // collect current rules\n      const rules = [...target]\n\n      return () => {\n        // remove all existing rules and add all snapshot rules back\n        target.splice(0, target.length, ...rules)\n      }\n    },\n\n    clear() {\n      target.length = 0\n    },\n\n    destroy() {\n      this.clear()\n    },\n\n    insert(css, index, rule) {\n      target.splice(\n        index,\n        0,\n        includeResumeData\n          ? `/*!${rule.p.toString(36)},${(rule.o * 2).toString(36)}${\n              rule.n ? ',' + rule.n : ''\n            }*/${css}`\n          : css,\n      )\n    },\n\n    resume: noop,\n  }\n}\n\n/**\n * Returns a sheet useable in the current environment.\n *\n * @group Sheets\n * @param useDOMSheet usually something like `process.env.NODE_ENV != 'production'` or `import.meta.env.DEV` (default: browser={@link cssom}, server={@link virtual})\n * @param disableResume to not include or use resume data\n * @returns a sheet to use\n */\nexport function getSheet(\n  useDOMSheet?: boolean,\n  disableResume?: boolean,\n): Sheet<string[] | HTMLStyleElement | CSSStyleSheet> {\n  const sheet =\n    typeof document == 'undefined' ? virtual(!disableResume) : useDOMSheet ? dom() : cssom()\n\n  if (!disableResume) sheet.resume = resume\n\n  return sheet\n}\n\n/**\n * @group Sheets\n * @param target\n * @returns\n */\nexport function stringify(target: unknown): string {\n  // string[] | CSSStyleSheet | HTMLStyleElement\n  return (\n    // prefer the raw text content of a CSSStyleSheet as it may include the resume data\n    ((target as CSSStyleSheet).ownerNode || (target as HTMLStyleElement)).textContent ||\n    ((target as CSSStyleSheet).cssRules\n      ? Array.from((target as CSSStyleSheet).cssRules, (rule) => rule.cssText)\n      : asArray(target)\n    ).join('')\n  )\n}\n\nfunction resume(\n  this: Sheet,\n  addClassName: (className: string) => void,\n  insert: (cssText: string, rule: SheetRule) => void,\n) {\n  // hydration from SSR sheet\n  const textContent = stringify(this.target)\n  const RE = /\\/\\*!([\\da-z]+),([\\da-z]+)(?:,(.+?))?\\*\\//g\n\n  // only if this is a hydratable sheet\n  if (RE.test(textContent)) {\n    // RE has global flag — reset index to get the first match as well\n    RE.lastIndex = 0\n\n    // 1. start with a fresh sheet\n    this.clear()\n\n    // 2. add all existing class attributes to the token/className cache\n    if (typeof document != 'undefined') {\n      for (const el of document.querySelectorAll('[class]')) {\n        addClassName(el.getAttribute('class') as string)\n      }\n    }\n\n    // 3. parse SSR styles\n    let lastMatch: RegExpExecArray | null | undefined\n\n    while (\n      (function commit(match?: RegExpExecArray | null) {\n        if (lastMatch) {\n          insert(\n            // grep the cssText from the previous match end up to this match start\n            textContent.slice(lastMatch.index + lastMatch[0].length, match?.index),\n            {\n              p: parseInt(lastMatch[1], 36),\n              o: parseInt(lastMatch[2], 36) / 2,\n              n: lastMatch[3],\n            },\n          )\n        }\n\n        return (lastMatch = match)\n      })(RE.exec(textContent))\n    ) {\n      /* no-op */\n    }\n  }\n}\n","import type { CSSBase, CSSObject, CSSValue } from './types'\n\nimport { tw as tw$ } from './runtime'\nimport { astish } from './internal/astish'\nimport { css } from './css'\n\nexport interface InjectGlobalFunction {\n  (style: CSSBase | string): void\n\n  (strings: TemplateStringsArray, ...interpolations: readonly CSSValue[]): void\n\n  bind(thisArg?: ((tokens: string) => string) | undefined | void): InjectGlobalFunction\n\n  call(thisArg: ((tokens: string) => string) | undefined | void, style: CSSBase | string): void\n\n  apply(thisArg: ((tokens: string) => string) | undefined | void, args: [CSSBase | string]): void\n}\n\n/**\n * Injects styles into the global scope and is useful for applications such as gloabl styles, CSS resets or font faces.\n *\n * It **does not** return a class name, but adds the styles within the base layer to the stylesheet directly.\n *\n * @group Style Injectors\n */\nexport const injectGlobal: InjectGlobalFunction = function injectGlobal(\n  this: ((tokens: string) => string) | undefined | void,\n  strings: CSSBase | string | TemplateStringsArray,\n  ...interpolations: readonly CSSValue[]\n): void {\n  const tw = typeof this == 'function' ? this : tw$\n\n  tw(\n    css({\n      '@layer base': astish(strings as CSSObject, interpolations),\n    } as CSSObject),\n  )\n}\n","import type { Twind, BaseTheme, TwindConfig, TwindUserConfig, Preset, ExtractThemes } from './types'\n\nimport { PROD } from 'distilt/env'\n\nimport { defineConfig } from './define-config'\nimport { setup } from './runtime'\nimport { getSheet } from './sheets'\n\n/**\n * @group Runtime\n * @param config\n * @param isProduction\n */\nexport function install<Theme extends BaseTheme = BaseTheme>(\n  config: TwindConfig<Theme>,\n  isProduction?: boolean,\n): Twind<Theme & BaseTheme>\n\nexport function install<Theme = BaseTheme, Presets extends Preset<any>[] = Preset[]>(\n  config: TwindUserConfig<Theme, Presets>,\n  isProduction?: boolean,\n): Twind<BaseTheme & ExtractThemes<Theme, Presets>>\n\nexport function install(config: TwindConfig | TwindUserConfig, isProduction = PROD): Twind {\n  const config$ = defineConfig(config as TwindUserConfig)\n\n  return setup(\n    {\n      ...config$,\n      // in production use short hashed class names\n      hash: config$.hash ?? isProduction,\n    },\n    () => getSheet(!isProduction),\n  )\n}\n","import type { CSSObject, CSSValue, StringLike } from './types'\n\nimport { escape, hash } from './utils'\nimport { tw as tw$ } from './runtime'\nimport { astish } from './internal/astish'\nimport { css } from './css'\n\nexport interface KeyframesFunction {\n  (style: CSSObject | string): StringLike\n\n  (strings: TemplateStringsArray, ...interpolations: readonly CSSValue[]): StringLike\n\n  bind(thisArg?: ((tokens: string) => string) | undefined | void): Keyframes & {\n    [label: string]: KeyframesFunction\n  }\n\n  call(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    style: CSSObject | string,\n  ): StringLike\n\n  call(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    strings: TemplateStringsArray,\n    ...interpolations: readonly CSSValue[]\n  ): StringLike\n\n  apply(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    args: [CSSObject | string],\n  ): StringLike\n\n  apply(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    args:\n      | [CSSObject | string]\n      | [strings: TemplateStringsArray, ...interpolations: readonly CSSValue[]],\n  ): StringLike\n}\n\nexport type Keyframes = KeyframesFunction & {\n  [label: string]: KeyframesFunction\n}\n\n/**\n * **Note**: The styles will be injected on first use.\n *\n * @group Style Injectors\n */\nexport const keyframes = /* #__PURE__ */ bind()\n\nfunction bind(thisArg: ((tokens: string) => string) | undefined | void): Keyframes {\n  return new Proxy(\n    function keyframes(\n      strings: CSSObject | string | TemplateStringsArray,\n      ...interpolations: readonly CSSValue[]\n    ): StringLike {\n      return keyframes$(thisArg, '', strings, interpolations)\n    } as Keyframes,\n    {\n      get(target, name) {\n        if (name === 'bind') {\n          return bind\n        }\n\n        if (name in target) return target[name as string]\n\n        return function namedKeyframes(\n          strings: CSSObject | string | TemplateStringsArray,\n          ...interpolations: readonly CSSValue[]\n        ): StringLike {\n          return keyframes$(thisArg, name as string, strings, interpolations)\n        }\n      },\n    },\n  )\n}\n\nfunction keyframes$(\n  thisArg: ((tokens: string) => string) | undefined | void,\n  name: string,\n  strings: CSSObject | string | TemplateStringsArray,\n  interpolations: readonly CSSValue[],\n): StringLike {\n  // lazy inject keyframes\n  return {\n    toString() {\n      // lazy access tw\n      const tw = typeof thisArg == 'function' ? thisArg : tw$\n\n      const ast = astish(strings, interpolations)\n\n      const keyframeName = escape(name + hash(JSON.stringify([name, ast])))\n\n      tw(\n        css({\n          [`@keyframes ${keyframeName}`]: astish(strings, interpolations),\n        } as unknown as CSSObject),\n      )\n\n      return keyframeName\n    },\n  } as StringLike\n}\n","import type { Twind } from './types'\nimport { changed } from './internal/changed'\nimport { tw as tw$ } from './runtime'\nimport { identity } from './utils'\nimport { stringify } from './sheets'\nimport { fixClassList, parseHTML } from './internal/parse-html'\n\n/**\n * Options for {@link inline}\n */\nexport interface InlineOptions {\n  /**\n   * {@link Twind} instance to use (default: {@link @twind/core.tw})\n   */\n  tw?: Twind<any, any>\n\n  /**\n   * Allows to minify the resulting CSS.\n   */\n  minify?: InlineMinify\n}\n\nexport interface InlineMinify {\n  /**\n   * Called to minify the CSS.\n   *\n   * @param css the CSS to minify\n   * @param html the HTML that will be used — allows to only include above-the-fold CSS\n   * @return the resulting CSS\n   */\n  (css: string, html: string): string\n}\n/**\n * Used for static HTML processing (usually to provide SSR support for your javascript-powered web apps)\n *\n * 1. parse the markup and process element classes with the provided Twind instance\n * 2. update the class attributes _if_ necessary\n * 3. inject a style element with the CSS as last element into the head\n * 4. return the HTML string with the final element classes\n *\n * ```js\n * import { inline } from '@twind/core'\n *\n * function render() {\n *   return inline(renderApp())\n * }\n * ```\n *\n * Minify CSS with [@parcel/css](https://www.npmjs.com/package/@parcel/css):\n *\n * ```js\n * import { inline } from '@twind/core'\n * import { transform } from '@parcel/css'\n *\n * function render() {\n *   return inline(renderApp(), { minify: (css) => transform({ filename: 'twind.css', code: Buffer.from(css), minify: true }) })\n * }\n * ```\n *\n * You can provide your own Twind instance:\n *\n * ```js\n * import { inline } from '@twind/core'\n * import { tw } from './custom/twind/instance'\n *\n * function render() {\n *   return inline(renderApp(), { tw })\n * }\n * ```\n *\n * @group Static Extraction\n * @param markup HTML to process\n * @param options to customize the processing\n * @returns the resulting HTML\n */\nexport function inline(markup: string, options: InlineOptions['tw'] | InlineOptions = {}): string {\n  const { tw = tw$, minify = identity } =\n    typeof options == 'function' ? ({ tw: options } as InlineOptions) : options\n\n  const { html, css } = extract(markup, tw)\n\n  // inject as last element into the head\n  return html.replace('</head>', `<style data-twind>${minify(css, html)}</style></head>`)\n}\n\n/**\n * Result of {@link extract}\n */\nexport interface ExtractResult {\n  /** The possibly modified HTML */\n  html: string\n\n  /** The generated CSS */\n  css: string\n}\n\n/**\n * Used for static HTML processing (usually to provide SSR support for your javascript-powered web apps)\n *\n * **Note**: Consider using {@link inline} instead.\n *\n * 1. parse the markup and process element classes with the provided Twind instance\n * 2. update the class attributes _if_ necessary\n * 3. return the HTML string with the final element classes\n *\n * ```js\n * import { extract } from '@twind/core'\n *\n * function render() {\n *   const { html, css } = extract(renderApp())\n *\n *   // inject as last element into the head\n *   return html.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * You can provide your own Twind instance:\n *\n * ```js\n * import { extract } from '@twind/core'\n * import { tw } from './custom/twind/instance'\n *\n * function render() {\n *   const { html, css } = extract(renderApp(), tw)\n *\n *   // inject as last element into the head\n *   return html.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * @group Static Extraction\n * @param markup HTML to process\n * @param tw a {@link Twind} instance (default: twind managed tw)\n * @returns the possibly modified html and css\n */\nexport function extract(html: string, tw: Twind<any, any> = tw$): ExtractResult {\n  const restore = tw.snapshot()\n\n  const result = { html: consume(html, tw), css: stringify(tw.target) }\n\n  restore()\n\n  return result\n}\n\n/**\n * Used for static HTML processing (usually to provide SSR support for your javascript-powered web apps)\n *\n * **Note**: Consider using {@link inline} or {@link extract} instead.\n *\n * 1. parse the markup and process element classes with the provided Twind instance\n * 2. update the class attributes _if_ necessary\n * 3. return the HTML string with the final element classes\n *\n * ```js\n * import { consume, stringify, tw } from '@twind/core'\n *\n * function render() {\n *   const html = renderApp()\n *\n *   // remember global classes\n *   const restore = tw.snapshot()\n *\n *   // generated markup\n *   const markup = consume(html)\n *\n *   // create CSS\n *   const css = stringify(tw.target)\n *\n *   // restore global classes\n *   restore()\n *\n *   // inject as last element into the head\n *   return markup.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * You can provide your own Twind instance:\n *\n * ```js\n * import { consume, stringify } from '@twind/core'\n * import { tw } from './custom/twind/instance'\n *\n * function render() {\n *   const html = renderApp()\n *\n *   // remember global classes\n *   const restore = snapshot(tw.target)\n *\n *   // generated markup\n *   const markup = consume(html)\n *\n *   // restore global classes\n *   restore()\n *\n *   // create CSS\n *   const css = stringify(tw.target)\n *\n *   // inject as last element into the head\n *   return markup.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * @group Static Extraction\n * @param markup HTML to process\n * @param tw a {@link Twind} instance\n * @returns possibly modified HTML\n */\nexport function consume(markup: string, tw: (className: string) => string = tw$): string {\n  let result = ''\n  let lastChunkStart = 0\n\n  parseHTML(markup, (startIndex, endIndex, quote) => {\n    const value = markup.slice(startIndex, endIndex)\n    const className = tw(fixClassList(value, quote))\n\n    // We only need to shift things around if we need to actually change the markup\n    if (changed(value, className)) {\n      // We've hit another mutation boundary\n\n      // Add quote if necessary\n      quote = quote ? '' : '\"'\n\n      result += markup.slice(lastChunkStart, startIndex) + quote + className + quote\n\n      lastChunkStart = endIndex\n    }\n  })\n\n  // Combine the current result with the tail-end of the input\n  return result + markup.slice(lastChunkStart, markup.length)\n}\n","// For now we are using a simple parser adapted from htm (https://github.com/developit/htm/blob/master/src/build.mjs)\n// If we find any issues we can switch to something more sophisticated like\n// - https://github.com/acrazing/html5parser\n// - https://github.com/fb55/htmlparser2\n\nconst MODE_SLASH = 0\nconst MODE_TEXT = 1\nconst MODE_WHITESPACE = 2\nconst MODE_TAGNAME = 3\nconst MODE_COMMENT = 4\nconst MODE_ATTRIBUTE = 5\n\nexport function parseHTML(\n  markup: string,\n  onClass: (startIndex: number, endIndex: number, quote: string) => false | unknown,\n): void {\n  let mode = MODE_TEXT\n  let startIndex = 0\n  let quote = ''\n  let attributeName = ''\n\n  const commit = (currentIndex: number): void => {\n    if (mode == MODE_ATTRIBUTE && attributeName == 'class') {\n      if (onClass(startIndex, currentIndex, quote) === false) {\n        markup = ''\n      }\n    }\n  }\n\n  for (let position = 0; position < markup.length; position++) {\n    const char = markup[position]\n\n    if (mode == MODE_TEXT) {\n      if (char == '<') {\n        mode = markup.substr(position + 1, 3) == '!--' ? MODE_COMMENT : MODE_TAGNAME\n      }\n    } else if (mode == MODE_COMMENT) {\n      // Ignore everything until the last three characters are '-', '-' and '>'\n      if (char == '>' && markup.slice(position - 2, position) == '--') {\n        mode = MODE_TEXT\n      }\n    } else if (quote) {\n      if (char == quote && markup[position - 1] != '\\\\') {\n        commit(position)\n        mode = MODE_WHITESPACE\n        quote = ''\n      }\n    } else if (char == '\"' || char == \"'\") {\n      quote = char\n      startIndex += 1\n    } else if (char == '>') {\n      commit(position)\n      mode = MODE_TEXT\n    } else if (!mode) {\n      // MODE_SLASH\n      // Ignore everything until the tag ends\n    } else if (char == '=') {\n      attributeName = markup.slice(startIndex, position)\n      mode = MODE_ATTRIBUTE\n      startIndex = position + 1\n    } else if (char == '/' && (mode < MODE_ATTRIBUTE || markup[position + 1] == '>')) {\n      commit(position)\n      mode = MODE_SLASH\n    } else if (/\\s/.test(char)) {\n      // <a class=font-bold>\n      commit(position)\n      mode = MODE_WHITESPACE\n      startIndex = position + 1\n    }\n  }\n}\n\nexport function fixClassList(value: string, quote: string): string {\n  // const value = markup.slice(startIndex, endIndex)\n\n  // Lets handle some special react cases:\n  //   * arbitrary values for `content-`\n  //     <span class=\"before:content-[&#x27;asas&#x27;]\"></span>\n  //     <span class=\"before:content-[&quot;asas&quot;]\"></span>\n  //\n  //   * self-referenced groups\n  //     <span class=\"flex(&amp; col)\"></span>\n  //\n  //     If a class name contains `'`, `\"`, or `&` those will be replaced with HTML entities\n  //     To fix this we replace those for depending on the actual symbol that is being used\n  //     As an alternative we could always escape class names direcly in twind like react does\n  //     but this works for now\n  return (\n    quote == `\"`\n      ? // `'` -> &#39; &apos; &#x27;\n        value.replace(/(=|\\[)(?:&#39;|&apos;|&#x27;)|(?:&#39;|&apos;|&#x27;)(])/g, `$1'$2`)\n      : quote == `'`\n      ? // `\"` -> &#34; &quot; &#x22;\n        value.replace(/(=|\\[)(?:&#34;|&quot;|&#x22;)|(?:&#34;|&quot;|&#x22;)(])/g, `$1\"$2`)\n      : value\n  ).replace(/(&#38;|&amp;|&#x26;)/g, '&')\n}\n","// Based on https://github.com/modulz/stitches\n// License MIT\n// eslint-disable @typescript-eslint/ban-types\n\nimport type { Falsey, MatchResult } from './types'\nimport { parse } from './parse'\nimport { Layer } from './internal/precedence'\n\nimport { escape, hash } from './utils'\nimport { define } from './internal/define'\n\nexport type StrictMorphVariant<T> = T extends number\n  ? `${T}` | T\n  : T extends 'true'\n  ? true | T\n  : T extends 'false'\n  ? false | T\n  : T\n\nexport type MorphVariant<T> = T extends number\n  ? `${T}` | T\n  : T extends 'true'\n  ? boolean | T\n  : T extends 'false'\n  ? boolean | T\n  : T extends `${number}`\n  ? number | T\n  : T\n\nexport type StyleTokenValue = string | Falsey\n\n// No support for thunks yet — these may use props that are not in the generated class name\n// and may therefore override each other\n\nexport type StyleToken = StyleTokenValue\n\n/**\n * Allows to extract the supported properties of a style function.\n *\n * Here is an example for `react`\n * ```js\n * import { HTMLAttributes } from \"react\";\n * import { style, PropsOf } from \"@twind/core\";\n * const button = style({ ... })\n * type ButtonProps = PropsOf<typeof button>\n * export const Button = (props: ButtonProps & HTMLAttributes<HTMLButtonElement>) => {\n *   return <button className={style(props)} {...rest} />\n * }\n * ```\n */\nexport type PropsOf<T> = T extends Style<infer Variants>\n  ? {\n      [key in keyof Variants]: MorphVariant<keyof Variants[key]>\n    }\n  : never\n\nexport type DefaultVariants<Variants> = {\n  [key in keyof Variants]?:\n    | StrictMorphVariant<keyof Variants[key]>\n    | (Record<string, StrictMorphVariant<keyof Variants[key]>> & {\n        /** initial breakpoint */\n        _?: StrictMorphVariant<keyof Variants[key]>\n      })\n}\n\nexport type VariantsProps<Variants> = {\n  [key in keyof Variants]?:\n    | MorphVariant<keyof Variants[key]>\n    // TODO possible breakpoint from theme\n    | (Record<string, MorphVariant<keyof Variants[key]>> & {\n        /** initial breakpoint */\n        _?: MorphVariant<keyof Variants[key]>\n      })\n}\n\nexport type When<Variants> = {\n  [key in keyof Variants]?: StrictMorphVariant<keyof Variants[key]>\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface StyleConfig<Variants, BaseVariants = {}> {\n  /** Used as prefix */\n  label?: string\n  base?: StyleToken\n  props?: Variants & {\n    [variant in keyof BaseVariants]?: {\n      [key in keyof BaseVariants[variant]]?: StyleToken\n    }\n  }\n  defaults?: DefaultVariants<Variants & BaseVariants>\n  when?: [match: When<Variants & BaseVariants>, then: StyleToken][]\n}\n\nexport interface StyleFunction {\n  <Variants>(config?: StyleConfig<Variants>): Style<Variants>\n  <Variants, BaseVariants>(\n    base: Style<BaseVariants>,\n    config?: StyleConfig<Variants, BaseVariants>,\n  ): Style<Variants & BaseVariants>\n}\n\nexport type StyleProps<Variants> = VariantsProps<Variants>\n\nexport interface Style<Variants> {\n  /**\n   * CSS Class associated with the current component.\n   *\n   * ```jsx\n   * const button = style({\n   *   base: css({\n   *     color: \"DarkSlateGray\"\n   *   })\n   * })\n   *\n   * <div className={button()} />\n   * ```\n   * <br />\n   */\n  (props?: StyleProps<Variants>): string\n\n  /**\n   * To be used as resolve within config.rules:\n   *\n   * ```js\n   * {\n   *   rules: [\n   *     // label?prop=value&other=propValue\n   *     // if the style has base eg no prop is required\n   *     ['label(\\\\?.+)?', style( /* ... *\\/ )],\n   *\n   *     // if the style requires at least one prop\n   *     ['label\\\\?(.+)', style( /* ... *\\/ )],\n   *   ]\n   * }\n   * ```\n   *\n   * The first group is used to extract the props using {@link !URLSearchParams | URLSearchParams}.\n   */\n  (match: MatchResult): string\n\n  readonly defaults: StyleProps<Variants>\n\n  /**\n   * CSS Class associated with the current component.\n   *\n   * ```js\n   * const button = style({\n   *   base: css`\n   *     color: \"DarkSlateGray\"\n   *   `\n   * })\n   *\n   * <div className={button.className} />\n   * ```\n   */\n  readonly className: string\n\n  /**\n   * CSS Selector associated with the current component.\n   *\n   * ```js\n   * const button = style({\n   *   base: css({\n   *     color: \"DarkSlateGray\"\n   *   })\n   * })\n   *\n   * const Card = styled({\n   *   base: css`\n   *     & ${button.selector} {\n   *       boxShadow: \"0 0 0 5px\"\n   *     }\n   *   `\n   * })\n   * ```\n   */\n  readonly selector: string\n}\n\n/**\n * @group Class Name Generators\n */\nexport const style = (<Variants, BaseVariants>(\n  base: Style<BaseVariants> | StyleConfig<Variants>,\n  config?: StyleConfig<Variants, BaseVariants>,\n): Style<Variants & BaseVariants> =>\n  (typeof base == 'function' ? createStyle(config, base) : createStyle(base)) as Style<\n    Variants & BaseVariants\n  > &\n    string) as StyleFunction\n\nfunction createStyle<Variants, BaseVariants>(\n  config: StyleConfig<Variants, BaseVariants> = {},\n  parent?: Style<BaseVariants>,\n): Style<Variants & BaseVariants> {\n  const { label = 'style', base, props: variants = {}, defaults: localDefaults, when = [] } = config\n\n  const defaults = { ...parent?.defaults, ...localDefaults }\n\n  const id = hash(JSON.stringify([label, parent?.className, base, variants, defaults, when]))\n\n  // Layers:\n  // component: 0b010\n  // props: 0b011\n  // when: 0b100\n\n  const className = register('', base || '', Layer.c)\n\n  function register(mq: string, token: string, layer: number): string {\n    return define(\n      // `<name>#<id>` or `<parent>~<name>#<id>`\n      ((parent ? parent.className.replace(/#.+$/, '~') : '') + label + mq + id).replace(\n        /[: ,()[\\]]/,\n        '',\n      ),\n      layer,\n      token && parse(token),\n    )\n  }\n\n  return Object.defineProperties(\n    function style(allProps) {\n      let isWithinRuleDeclaration\n\n      if (Array.isArray(allProps)) {\n        isWithinRuleDeclaration = true\n        allProps = Object.fromEntries(new URLSearchParams(allProps[1]).entries()) as VariantsProps<\n          Variants & BaseVariants\n        >\n      }\n\n      const props = { ...defaults, ...allProps }\n\n      // If this style is used within config.rules we do NOT include the marker classes\n      let classNames = isWithinRuleDeclaration\n        ? ''\n        : (parent ? parent(props) + ' ' : '') + className\n\n      let token: StyleToken\n\n      for (const variantKey in variants) {\n        const variant = (variants as Record<string, Record<string, StyleToken>>)[variantKey]\n        const propsValue = (props as Record<string, unknown>)[variantKey]\n\n        if (propsValue === Object(propsValue)) {\n          // inline responsive breakpoints\n          let mq = ''\n          token = ''\n\n          for (const breakpoint in propsValue as Record<string, string>) {\n            const breakpointToken = variant[(propsValue as Record<string, string>)[breakpoint]]\n\n            if (breakpointToken) {\n              mq += '@' + breakpoint + '-' + (propsValue as Record<string, string>)[breakpoint]\n\n              token +=\n                (token && ' ') +\n                (breakpoint == '_' ? breakpointToken : breakpoint + ':(' + breakpointToken + ')')\n            }\n          }\n\n          if (token) {\n            classNames +=\n              ' ' + register('--' + variantKey + '-' + mq, token, 0b011 << 27 /* Shifts.layer */)\n          }\n        } else if ((token = variant[propsValue as string])) {\n          classNames +=\n            ' ' +\n            register(\n              '--' + variantKey + '-' + (propsValue as string),\n              token,\n              0b011 << 27 /* Shifts.layer */,\n            )\n        }\n      }\n\n      when.forEach((match, index) => {\n        let mq = ''\n\n        for (const variantKey in match[0]) {\n          const propsValue = (props as Record<string, unknown>)[variantKey]\n\n          // TODO we ignore inline responsive breakpoints for now — what be the result??\n          if (\n            propsValue !== Object(propsValue) &&\n            '' + propsValue == '' + (match[0] as Record<string, string>)[variantKey]\n          ) {\n            mq += (mq && '_') + variantKey + '-' + (propsValue as string)\n          } else {\n            mq = ''\n            break\n          }\n        }\n\n        if (mq && (token = match[1])) {\n          classNames +=\n            ' ' + register('-' + index + '--' + mq, token, 0b100 << 27 /* Shifts.layer */)\n        }\n      })\n\n      return classNames\n    } as Style<Variants & BaseVariants>,\n    Object.getOwnPropertyDescriptors({\n      className,\n      defaults,\n      selector: '.' + escape(className),\n    }),\n  )\n}\n","import type { Class } from './types'\nimport { interpolate } from './internal/interpolate'\nimport { tw as tw$ } from './runtime'\n\nexport interface TxFunction {\n  (...classes: Class[]): string\n\n  (strings: TemplateStringsArray, ...interpolations: readonly Class[]): string\n\n  bind(thisArg?: ((tokens: string) => string) | undefined | void): TxFunction\n\n  call(thisArg: ((tokens: string) => string) | undefined | void, ...classes: Class[]): string\n  call(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    strings: TemplateStringsArray,\n    ...interpolations: readonly Class[]\n  ): string\n\n  apply(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    classes: Class[] | [strings: TemplateStringsArray, ...interpolations: readonly Class[]],\n  ): string\n}\n\n/**\n * Combines {@link tw} and {@link cx}.\n *\n * Using the default `tw` instance:\n *\n * ```js\n * import { tw } from '@twind/core'\n * tx`underline ${falsy && 'italic'}`\n * tx('underline', falsy && 'italic')\n * tx({'underline': true, 'italic': false})\n *\n * // using a custom twind instance\n * import { tw } from './custom/twind'\n * import { tw } from './custom/twind'\n * tx.bind(tw)\n * ```\n *\n * Using a custom `tw` instance:\n *\n * ```js\n * import { tx as tx$ } from '@twind/core'\n * import { tw } from './custom/twind'\n *\n * export const tx = tx$.bind(tw)\n *\n * tx`underline ${falsy && 'italic'}`\n * tx('underline', falsy && 'italic')\n * tx({'underline': true, 'italic': false})\n * ```\n *\n * @group Style Injectors\n * @param this {@link Twind} instance to use (default: {@link tw})\n * @param strings\n * @param interpolations\n * @returns the class name\n */\nexport const tx: TxFunction = function tx(\n  this: ((tokens: string) => string) | undefined | void,\n  strings: TemplateStringsArray | Class,\n  ...interpolations: Class[]\n): string {\n  const tw = typeof this == 'function' ? this : tw$\n  return tw(interpolate(strings, interpolations))\n}\n"],"names":["active","toClassName","rule","v","i","n","join","format","rules","seperator","map","escape","CSS","className","replace","hash","value","h","index","length","Math","imul","charCodeAt","toString","mql","screen","prefix","asArray","min","raw","Object","keys","feature","Array","isArray","identity","noop","Layer","d","b","c","a","u","o","seperatorPrecedence","string","match","atRulePrecedence","css","test","max","RegExp","$1","$2","PRECEDENCES_BY_PSEUDO_CLASS","convert","name","important","variants","context","precedence","conditions","variant","theme","condition","selector","push","indexOf","slice","p","r","registry","Map","stringify","groups","replaceEach","reduce","selectorPart","conditionPart","mergeMatch","exec","selectorIndex","replaceReference","reduceRight","body","grouping","iteratee","_","comma","reference","collator","Intl","Collator","numeric","sortedInsertionIndex","array","element","low","high","pivot","compareTwindRules","layer","compare","byModifier","byName","s","split","pop","String","fromCharCode","parseColorComponent","chars","factor","round","parseInt","toColorValue","color","options","opacityValue","opacityVariable","opacity","includes","size","substr","autoDarkColor","section","key","shade","serialize","style","serialize$","declarations","maxPropertyPrecedence","numberOfDeclarations","property","translateWith","parse","JSON","toLowerCase","resolveThemeFunction","rulePrecedence","screenKey","unshift","sort","__","___","defaultValue","filter","merge","current","result","Boolean","translate","cssRule","translate$","resolved","resolve","factory","get","splice","useOrderOfRules","flatMap","define","set","createRule","loc","negated","endsWith","defineProperties","uniq","l","values","cache","token","parsed","startIndex","skip","comment","position","commit","isRule","endOffset","char","lastMatch","lastGroup","lastIndexOf","nested","shift","interleave","strings","interpolations","handle","interpolation","interpolate","trim","tmp","apply","alias","shortcut","marker","Proxy","alias$","target","namedAlias","astish","astish$","newRule","block","tree","ast","find","label","animation","waypoints","animation$","namedAnimation","animationName","pattern","fromMatch","maybeNegate","offset","$$","input","matchTheme","fromTheme","withAutocomplete","themeSection","camelize","arbitrary","isKeyLookup","entries","suffix","concat","matchColor","colorFromTheme","colorMatch","opacityMatch","parseValue","colorValue","opacitySection","create","properties","toCSS","undefined","dark","darkColorValue","opacities","modifiers","modifier","normalize","x","toUpperCase","before","url","after","fullMatch","characterBefore","repeat","kAutocomplete","Symbol","autocomplete","defineProperty","configurable","getAutocompleteProvider","resolver","cx","defineConfig","presets","userConfig","config","darkMode","darkColor","preflight","ignorelist","finalize","preset","extend","warn","message","code","detail","dispatchEvent","CustomEvent","event","cancelable","defaultPrevented","console","list","getResolver","isDark","item","getVariantResolver","createResolve","getRuleResolver","patterns","createRegExpExecutor","run","toCondition","twind","sheet","createContext","variantCache","variantResolvers","ruleCache","ruleResolvers","ignored","reportedUnknownClasses","Set","defaultHash","ctx","makeThemeFunction","base","resolveContext","colors","negative","breakpoints","screens","sectionKey","path","assign","deref","obj","prop","source","flattenColorPalette","flattend","keyPath","e","has","add","f","sortedPrecedences","insertedRules","resume","cssText","insert","finalRule","tw","tokens","forEach","classNames","getOwnPropertyDescriptors","snapshot","restoreSheet","insertedRules$","cache$","sortedPrecedences$","clear","destroy","changed","mo","observer","MutationObserver","handleMutationRecords","observe","attributeFilter","subtree","childList","handleClassAttributeChange","type","disconnect","records","el","querySelectorAll","takeRecords","getAttribute","setAttribute","tw$","call","getStyleElement","document","querySelector","tagName","createElement","head","prepend","dataset","cssom","cssRules","from","deleteRule","ownerNode","remove","insertRule","error","dom","childNodes","node","textContent","insertBefore","createTextNode","virtual","includeResumeData","getSheet","useDOMSheet","disableResume","addClassName","RE","lastIndex","auto","install","assertActive","Error","_target","_thisArg","args","arguments","setup","injectGlobal","isProduction","config$","keyframes","bind","thisArg","keyframes$","namedKeyframes","keyframeName","inline","markup","minify","html","extract","restore","consume","lastChunkStart","parseHTML","onClass","mode","quote","attributeName","currentIndex","MODE_TAGNAME","MODE_TEXT","endIndex","createStyle","parent","props","defaults","localDefaults","when","id","register","mq","allProps","isWithinRuleDeclaration","fromEntries","URLSearchParams","variantKey","propsValue","breakpoint","breakpointToken","tx"],"mappings":"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"}