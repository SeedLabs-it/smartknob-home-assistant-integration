{"version":3,"file":"readableStream.global.js","sources":["../../../node_modules/.pnpm/fast-diff@1.2.0/node_modules/fast-diff/diff.js","../src/readableStream.ts","../src/internal.ts"],"sourcesContent":["/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos, _fix_unicode) {\n  // Check for equality\n  if (text1 === text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (cursor_pos != null) {\n    var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);\n    if (editdiff) {\n      return editdiff;\n    }\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs, _fix_unicode);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length === 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 !== 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (\n        x1 < text1_length && y1 < text2_length &&\n        text1.charAt(x1) === text2.charAt(y1)\n      ) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (\n        x2 < text1_length && y2 < text2_length &&\n        text1.charAt(text1_length - x2 - 1) === text2.charAt(text2_length - y2 - 1)\n      ) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(pointerstart, pointermid) ==\n      text2.substring(pointerstart, pointermid)\n    ) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n      text2.substring(text2.length - pointermid, text2.length - pointerend)\n    ) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {\n      var prefixLength = diff_commonPrefix(\n        longtext.substring(i), shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(\n        longtext.substring(0, i), shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(\n          j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [\n        best_longtext_a, best_longtext_b,\n        best_shorttext_a, best_shorttext_b, best_common\n      ];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff\n */\nfunction diff_cleanupMerge(diffs, fix_unicode) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n      diffs.splice(pointer, 1);\n      continue;\n    }\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        var previous_equality = pointer - count_insert - count_delete - 1;\n        if (fix_unicode) {\n          // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,\n          // we assume that the old and new text in the diff are complete and correct\n          // unicode-encoded JS strings, but the tuple boundaries may fall between\n          // surrogate pairs.  we fix this by shaving off stray surrogates from the end\n          // of the previous equality and the beginning of this equality.  this may create\n          // empty equalities or a common prefix or suffix.  for example, if AB and AC are\n          // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and\n          // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this\n          // particular case, both equalities go away, we absorb any previous inequalities,\n          // and we keep scanning for the next equality before rewriting the tuples.\n          if (previous_equality >= 0 && ends_with_pair_start(diffs[previous_equality][1])) {\n            var stray = diffs[previous_equality][1].slice(-1);\n            diffs[previous_equality][1] = diffs[previous_equality][1].slice(0, -1);\n            text_delete = stray + text_delete;\n            text_insert = stray + text_insert;\n            if (!diffs[previous_equality][1]) {\n              // emptied out previous equality, so delete it and include previous delete/insert\n              diffs.splice(previous_equality, 1);\n              pointer--;\n              var k = previous_equality - 1;\n              if (diffs[k] && diffs[k][0] === DIFF_INSERT) {\n                count_insert++;\n                text_insert = diffs[k][1] + text_insert;\n                k--;\n              }\n              if (diffs[k] && diffs[k][0] === DIFF_DELETE) {\n                count_delete++;\n                text_delete = diffs[k][1] + text_delete;\n                k--;\n              }\n              previous_equality = k;\n            }\n          }\n          if (starts_with_pair_end(diffs[pointer][1])) {\n            var stray = diffs[pointer][1].charAt(0);\n            diffs[pointer][1] = diffs[pointer][1].slice(1);\n            text_delete += stray;\n            text_insert += stray;\n          }\n        }\n        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n          // for empty equality not at end, wait for next equality\n          diffs.splice(pointer, 1);\n          break;\n        }\n        if (text_delete.length > 0 || text_insert.length > 0) {\n          // note that diff_commonPrefix and diff_commonSuffix are unicode-aware\n          if (text_delete.length > 0 && text_insert.length > 0) {\n            // Factor out any common prefixes.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (previous_equality >= 0) {\n                diffs[previous_equality][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixes.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] =\n                text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          var n = count_insert + count_delete;\n          if (text_delete.length === 0 && text_insert.length === 0) {\n            diffs.splice(pointer - n, n);\n            pointer = pointer - n;\n          } else if (text_delete.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 1;\n          } else if (text_insert.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);\n            pointer = pointer - n + 1;\n          } else {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 2;\n          }\n        }\n        if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL &&\n      diffs[pointer + 1][0] === DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n        diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n          diffs[pointer][1].substring(0, diffs[pointer][1].length -\n            diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n        diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n          diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n          diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs, fix_unicode);\n  }\n};\n\nfunction is_surrogate_pair_start(charCode) {\n  return charCode >= 0xD800 && charCode <= 0xDBFF;\n}\n\nfunction is_surrogate_pair_end(charCode) {\n  return charCode >= 0xDC00 && charCode <= 0xDFFF;\n}\n\nfunction starts_with_pair_end(str) {\n  return is_surrogate_pair_end(str.charCodeAt(0));\n}\n\nfunction ends_with_pair_start(str) {\n  return is_surrogate_pair_start(str.charCodeAt(str.length - 1));\n}\n\nfunction remove_empty_tuples(tuples) {\n  var ret = [];\n  for (var i = 0; i < tuples.length; i++) {\n    if (tuples[i][1].length > 0) {\n      ret.push(tuples[i]);\n    }\n  }\n  return ret;\n}\n\nfunction make_edit_splice(before, oldMiddle, newMiddle, after) {\n  if (ends_with_pair_start(before) || starts_with_pair_end(after)) {\n    return null;\n  }\n  return remove_empty_tuples([\n    [DIFF_EQUAL, before],\n    [DIFF_DELETE, oldMiddle],\n    [DIFF_INSERT, newMiddle],\n    [DIFF_EQUAL, after]\n  ]);\n}\n\nfunction find_cursor_edit_diff(oldText, newText, cursor_pos) {\n  // note: this runs after equality check has ruled out exact equality\n  var oldRange = typeof cursor_pos === 'number' ?\n    { index: cursor_pos, length: 0 } : cursor_pos.oldRange;\n  var newRange = typeof cursor_pos === 'number' ?\n    null : cursor_pos.newRange;\n  // take into account the old and new selection to generate the best diff\n  // possible for a text edit.  for example, a text change from \"xxx\" to \"xx\"\n  // could be a delete or forwards-delete of any one of the x's, or the\n  // result of selecting two of the x's and typing \"x\".\n  var oldLength = oldText.length;\n  var newLength = newText.length;\n  if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {\n    // see if we have an insert or delete before or after cursor\n    var oldCursor = oldRange.index;\n    var oldBefore = oldText.slice(0, oldCursor);\n    var oldAfter = oldText.slice(oldCursor);\n    var maybeNewCursor = newRange ? newRange.index : null;\n    editBefore: {\n      // is this an insert or delete right before oldCursor?\n      var newCursor = oldCursor + newLength - oldLength;\n      if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {\n        break editBefore;\n      }\n      if (newCursor < 0 || newCursor > newLength) {\n        break editBefore;\n      }\n      var newBefore = newText.slice(0, newCursor);\n      var newAfter = newText.slice(newCursor);\n      if (newAfter !== oldAfter) {\n        break editBefore;\n      }\n      var prefixLength = Math.min(oldCursor, newCursor);\n      var oldPrefix = oldBefore.slice(0, prefixLength);\n      var newPrefix = newBefore.slice(0, prefixLength);\n      if (oldPrefix !== newPrefix) {\n        break editBefore;\n      }\n      var oldMiddle = oldBefore.slice(prefixLength);\n      var newMiddle = newBefore.slice(prefixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);\n    }\n    editAfter: {\n      // is this an insert or delete right after oldCursor?\n      if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {\n        break editAfter;\n      }\n      var cursor = oldCursor;\n      var newBefore = newText.slice(0, cursor);\n      var newAfter = newText.slice(cursor);\n      if (newBefore !== oldBefore) {\n        break editAfter;\n      }\n      var suffixLength = Math.min(oldLength - cursor, newLength - cursor);\n      var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);\n      var newSuffix = newAfter.slice(newAfter.length - suffixLength);\n      if (oldSuffix !== newSuffix) {\n        break editAfter;\n      }\n      var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);\n      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);\n      return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n  if (oldRange.length > 0 && newRange && newRange.length === 0) {\n    replaceRange: {\n      // see if diff could be a splice of the old selection range\n      var oldPrefix = oldText.slice(0, oldRange.index);\n      var oldSuffix = oldText.slice(oldRange.index + oldRange.length);\n      var prefixLength = oldPrefix.length;\n      var suffixLength = oldSuffix.length;\n      if (newLength < prefixLength + suffixLength) {\n        break replaceRange;\n      }\n      var newPrefix = newText.slice(0, prefixLength);\n      var newSuffix = newText.slice(newLength - suffixLength);\n      if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {\n        break replaceRange;\n      }\n      var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);\n      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n\n  return null;\n}\n\nfunction diff(text1, text2, cursor_pos) {\n  // only pass fix_unicode=true at the top level, not when diff_main is\n  // recursively invoked\n  return diff_main(text1, text2, cursor_pos, true);\n}\n\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n","import type { InlineOptions, InlineMinify } from '@twind/core'\n\nimport { createState } from './internal'\n\nexport type { InlineOptions, InlineMinify }\n\nconst encoder = /* #__PURE__ */ new TextEncoder()\nconst decoder = /* #__PURE__ */ new TextDecoder()\n\nexport default class InlineStream extends TransformStream<Uint8Array, Uint8Array> {\n  constructor(options?: InlineOptions['tw'] | InlineOptions) {\n    const state = createState(options)\n\n    const flush: TransformerFlushCallback<Uint8Array> = (controller) => {\n      const markup = state.flush()\n      if (markup) {\n        controller.enqueue(encoder.encode(markup))\n      }\n    }\n\n    super({\n      transform(chunk, controller) {\n        if (state.push(decoder.decode(chunk))) {\n          return flush(controller)\n        }\n      },\n      flush,\n    })\n  }\n}\n","import type { InlineOptions } from '@twind/core'\nimport { tw as tw$, identity, consume, stringify, noop } from '@twind/core'\n\nimport diff from 'fast-diff'\n\nexport function createState(options: InlineOptions['tw'] | InlineOptions = {}) {\n  const { tw = tw$, minify = identity } =\n    typeof options == 'function' ? ({ tw: options } as InlineOptions) : options\n\n  let buffer = ''\n  let lastStyle: string | null = null\n  let restoreCurrentState = noop\n\n  return {\n    push: (chunk: string): boolean => {\n      buffer += chunk\n      return lastStyle === null ? isShellReady(buffer) : isSuspenseChunkReady(buffer)\n    },\n\n    flush: (): string | undefined => {\n      if (buffer) {\n        const restore = tw.snapshot()\n\n        restoreCurrentState()\n\n        let html = consume(buffer, tw)\n        const nextStyle = minify(stringify(tw.target), html)\n\n        restoreCurrentState = tw.snapshot()\n\n        restore()\n\n        if (lastStyle === null) {\n          // inital shell is ready\n          html = html.replace('</head>', `<style data-twind>${nextStyle}</style></head>`)\n        } else {\n          // a suspense chunk\n          const styleDiff: [offset: number, text: string][] = []\n\n          let offset = 0\n          for (const [type, text] of diff(lastStyle, nextStyle)) {\n            if (type === 1) {\n              // insert\n              styleDiff.push([offset, text])\n            }\n\n            // must be equal: type === 0\n            offset += text.length\n          }\n\n          if (styleDiff.length) {\n            // add style patch script that will update the previously created style element content\n            // but only if client side twind hasn't taken over yet (data-twind=\"claimed\")\n\n            // ;(function (style, diff) {\n            //   if (style) {\n            //     style.textContent = diff.reduce(function (textContent, change) {\n            //       return textContent.slice(0, change[0]) + change[1] + textContent.slice(change[0])\n            //     }, style.textContent || '')\n            //   }\n            // })(document.querySelector('style[data-twind=\"\"]'), [])\n\n            html = `<script>!function(e,n){e&&(e.textContent=n.reduce((function(e,n){return e.slice(0,n[0])+n[1]+e.slice(n[0])}),e.textContent||''))}(document.querySelector('style[data-twind=\"\"]'),${JSON.stringify(\n              styleDiff,\n            )})</script>${html}`\n          }\n        }\n\n        buffer = ''\n        lastStyle = nextStyle\n\n        return html\n      }\n    },\n  }\n}\n\nfunction isShellReady(markup: string): boolean {\n  return markup.endsWith('</body></html>')\n}\n\nfunction isSuspenseChunkReady(markup: string): boolean {\n  return markup.endsWith('</script>')\n}\n"],"names":["diff_main","text1","text2","cursor_pos","_fix_unicode","editdiff","find_cursor_edit_diff","oldText","newText","oldRange","index","length","newRange","oldLength","newLength","oldCursor","oldBefore","slice","oldAfter","maybeNewCursor","editBefore","newCursor","newBefore","newAfter","prefixLength","Math","min","oldPrefix","newPrefix","oldMiddle","newMiddle","make_edit_splice","editAfter","suffixLength","oldSuffix","newSuffix","replaceRange","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","longtext","shorttext","i","indexOf","DIFF_DELETE","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","floor","j","best_common","hm1","ceil","hm2","mid_common","diffs_a","diffs_b","concat","diff_bisect_","text1_length","text2_length","max_d","v_length","v1","Array","v2","x","v_offset","delta","front","k1start","k1end","k2start","k2end","d","k1","x1","k1_offset","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","unshift","push","diff_cleanupMerge","fix_unicode","pointer","count_delete","count_insert","text_delete","text_insert","splice","previous_equality","ends_with_pair_start","stray","k","starts_with_pair_end","n","pop","changes","y","text1a","text2a","text1b","text2b","diffsb","pointermin","pointermax","pointermid","pointerstart","is_surrogate_pair_start","charCodeAt","pointerend","is_surrogate_pair_end","charCode","str","before","after","remove_empty_tuples","tuples","ret","diff","INSERT","DELETE","EQUAL","encoder","TextEncoder","decoder","TextDecoder","InlineStream","TransformStream","constructor","options","state","createState","tw","tw$","minify","identity","buffer","lastStyle","restoreCurrentState","noop","chunk","markup","endsWith","flush","restore","snapshot","html","consume","nextStyle","stringify","target","replace","styleDiff","offset","type","text","JSON","controller","enqueue","encode","transform","decode","twind","core"],"mappings":"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"}