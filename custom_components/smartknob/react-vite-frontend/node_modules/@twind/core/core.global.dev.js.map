{"version":3,"file":"core.global.dev.js","sources":["../src/runtime.ts","../src/internal/to-class-name.ts","../src/internal/format.ts","../src/utils.ts","../src/internal/precedence.ts","../src/internal/registry.ts","../../../node_modules/.pnpm/@swc+helpers@0.4.14/node_modules/@swc/helpers/src/_extends.mjs","../src/internal/stringify.ts","../src/internal/sorted-insertion-index.ts","../src/colors.ts","../src/internal/serialize.ts","../src/internal/merge.ts","../src/internal/translate.ts","../src/internal/define.ts","../src/parse.ts","../src/internal/interleave.ts","../src/internal/interpolate.ts","../src/alias.ts","../src/internal/astish.ts","../src/css.ts","../src/animation.ts","../src/rules.ts","../src/autocomplete.ts","../../../node_modules/.pnpm/@swc+helpers@0.4.14/node_modules/@swc/helpers/src/_object_without_properties_loose.mjs","../src/define-config.ts","../src/internal/warn.ts","../src/internal/context.ts","../src/twind.ts","../src/internal/theme.ts","../src/internal/changed.ts","../src/observe.ts","../src/sheets.ts","../src/keyframes.ts","../src/ssr.ts","../src/internal/parse-html.ts","../src/style.ts","../src/tx.ts","../src/cx.ts","../src/inject-global.ts","../src/install.ts"],"sourcesContent":["import type {\n  Twind,\n  BaseTheme,\n  TwindConfig,\n  Sheet,\n  TwindUserConfig,\n  ExtractThemes,\n  Preset,\n} from './types'\n\nimport { twind } from './twind'\nimport { observe } from './observe'\nimport { getSheet } from './sheets'\nimport { noop } from './utils'\nimport { DEV } from 'distilt/env'\n\n/**\n * @group Runtime\n * @param install\n * @returns\n */\nexport function auto(install: () => void): () => void {\n  // If we run in the browser we call install at latest when the body is inserted\n  // This algorith works well for _normal_ scripts (`<script src=\"...\"></script>`)\n  // but not for modules because those are executed __after__ the DOM is ready\n  // and we would have FOUC\n  if (typeof document != 'undefined' && document.currentScript) {\n    const cancelAutoInstall = () => observer.disconnect()\n\n    const observer: MutationObserver = new MutationObserver((mutationsList) => {\n      for (const { target } of mutationsList) {\n        // If we reach the body we immediately run the install to prevent FOUC\n        if (target === document.body) {\n          install()\n          return cancelAutoInstall()\n        }\n      }\n    })\n\n    observer.observe(document.documentElement, {\n      childList: true,\n      subtree: true,\n    })\n\n    return cancelAutoInstall\n  }\n\n  return noop\n}\n\nlet active: Twind\n\nfunction assertActive() {\n  if (DEV && !active) {\n    throw new Error(\n      `No active twind instance found. Make sure to call setup or install before accessing tw.`,\n    )\n  }\n}\n\n/**\n * A proxy to the currently active Twind instance.\n * @group Style Injectors\n */\nexport const tw: Twind<any, any> = /* #__PURE__ */ new Proxy(\n  // just exposing the active as tw should work with most bundlers\n  // as ES module export can be re-assigned BUT some bundlers to not honor this\n  // -> using a delegation proxy here\n  noop as unknown as Twind<any, any>,\n  {\n    apply(_target, _thisArg, args) {\n      if (DEV) assertActive()\n\n      return active(args[0])\n    },\n    get(target, property) {\n      if (DEV) {\n        // Workaround webpack accessing the prototype in dev mode\n        if (!active && property in target) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          return (target as any)[property]\n        }\n\n        assertActive()\n      }\n\n      const value = active[property as keyof Twind]\n\n      if (typeof value === 'function') {\n        return function () {\n          if (DEV) assertActive()\n\n          // eslint-disable-next-line prefer-rest-params\n          return value.apply(active, arguments)\n        }\n      }\n\n      return value\n    },\n  },\n)\n\nexport type SheetFactory<SheetTarget = unknown> = () => Sheet<SheetTarget>\n\n/**\n * Manages a single Twind instance — works in browser, Node.js, Deno, workers...\n *\n * @group Runtime\n * @param config\n * @param sheet\n * @param target\n * @returns\n */\nexport function setup<Theme extends BaseTheme = BaseTheme, SheetTarget = unknown>(\n  config?: TwindConfig<Theme>,\n  sheet?: Sheet<SheetTarget> | SheetFactory<SheetTarget>,\n  target?: HTMLElement,\n): Twind<Theme, SheetTarget>\n\nexport function setup<\n  Theme = BaseTheme,\n  Presets extends Preset<any>[] = Preset[],\n  SheetTarget = unknown,\n>(\n  config?: TwindUserConfig<Theme, Presets>,\n  sheet?: Sheet<SheetTarget> | SheetFactory<SheetTarget>,\n  target?: HTMLElement,\n): Twind<BaseTheme & ExtractThemes<Theme, Presets>, SheetTarget>\n\nexport function setup<Theme extends BaseTheme = BaseTheme, SheetTarget = unknown>(\n  config: TwindConfig<any> | TwindUserConfig<any> = {},\n  sheet: Sheet<SheetTarget> | SheetFactory<SheetTarget> = getSheet as SheetFactory<SheetTarget>,\n  target?: HTMLElement,\n): Twind<Theme, SheetTarget> {\n  active?.destroy()\n\n  active = observe(\n    twind(config as TwindUserConfig, typeof sheet == 'function' ? sheet() : sheet),\n    target,\n  )\n\n  return active as unknown as Twind<Theme, SheetTarget>\n}\n","import type { ParsedRule } from '../parse'\n\nexport function toClassName(rule: ParsedRule): string {\n  return [...rule.v, (rule.i ? '!' : '') + rule.n].join(':')\n}\n","import type { ParsedRule } from '../parse'\nimport { toClassName } from './to-class-name'\n\nexport function format(rules: ParsedRule[], seperator = ','): string {\n  return rules.map(toClassName).join(seperator)\n}\n","import type { MaybeArray, ScreenValue } from './types'\n\n/**\n * @internal\n */\nexport const escape =\n  (typeof CSS !== 'undefined' && CSS.escape) ||\n  // Simplified: escaping only special characters\n  // Needed for NodeJS and Edge <79 (https://caniuse.com/mdn-api_css_escape)\n  ((className: string): string =>\n    className\n      // Simplifed escape testing only for chars that we know happen to be in tailwind directives\n      .replace(/[!\"'`*+.,;:\\\\/<=>?@#$%&^|~()[\\]{}]/g, '\\\\$&')\n      // If the character is the first character and is in the range [0-9] (2xl, ...)\n      // https://drafts.csswg.org/cssom/#escape-a-character-as-code-point\n      .replace(/^\\d/, '\\\\3$& '))\n\n// Based on https://stackoverflow.com/a/52171480\n/**\n * @group Configuration\n * @param value\n * @returns\n */\nexport function hash(value: string): string {\n  // eslint-disable-next-line no-var\n  for (var h = 9, index = value.length; index--; ) {\n    h = Math.imul(h ^ value.charCodeAt(index), 0x5f356495)\n  }\n\n  return '#' + ((h ^ (h >>> 9)) >>> 0).toString(36)\n}\n\n/**\n * @internal\n * @param screen\n * @param prefix\n * @returns\n */\nexport function mql(screen: MaybeArray<ScreenValue>, prefix = '@media '): string {\n  return (\n    prefix +\n    asArray(screen)\n      .map((screen) => {\n        if (typeof screen == 'string') {\n          screen = { min: screen }\n        }\n\n        return (\n          (screen as { raw?: string }).raw ||\n          Object.keys(screen)\n            .map((feature) => `(${feature}-width:${(screen as Record<string, string>)[feature]})`)\n            .join(' and ')\n        )\n      })\n      .join(',')\n  )\n}\n\n/**\n * @internal\n * @param value\n * @returns\n */\nexport function asArray<T>(value: T = [] as unknown as T): T extends Array<any> ? T : T[] {\n  return (Array.isArray(value) ? value : value == null ? [] : [value]) as T extends Array<any>\n    ? T\n    : T[]\n}\n\n/**\n * @internal\n * @param value\n * @returns\n */\nexport function identity<T>(value: T): T {\n  return value\n}\n\n/**\n * @internal\n */\nexport function noop(): void {\n  // no-op\n}\n","import type { BaseTheme, Context } from '../types'\nimport type { ParsedRule } from '../parse'\nimport { asArray, mql } from '../utils'\nimport { toClassName } from './to-class-name'\n\n// Based on https://github.com/kripod/otion\n// License MIT\n\n// export const enum Shifts {\n//   darkMode = 30,\n//   layer = 27,\n//   screens = 26,\n//   responsive = 22,\n//   atRules = 18,\n//   variants = 0,\n// }\n\nexport const Layer = {\n  /**\n   * 1. `default` (public)\n   */\n  d /* efaults */: 0b000 << 27 /* Shifts.layer */,\n\n  /**\n   * 2. `base` (public) — for things like reset rules or default styles applied to plain HTML elements.\n   */\n  b /* ase */: 0b001 << 27 /* Shifts.layer */,\n\n  /**\n   * 3. `components` (public, used by `style()`) — is for class-based styles that you want to be able to override with utilities.\n   */\n  c /* omponents */: 0b010 << 27 /* Shifts.layer */,\n  // reserved for style():\n  // - props: 0b011\n  // - when: 0b100\n\n  /**\n   * 6. `aliases` (public, used by `apply()`) — `~(...)`\n   */\n  a /* liases */: 0b101 << 27 /* Shifts.layer */,\n\n  /**\n   * 6. `utilities` (public) — for small, single-purpose classes\n   */\n  u /* tilities */: 0b110 << 27 /* Shifts.layer */,\n\n  /**\n   * 7. `overrides` (public, used by `css()`)\n   */\n  o /* verrides */: 0b111 << 27 /* Shifts.layer */,\n} as const\n\n/*\nTo have a predictable styling the styles must be ordered.\n\nThis order is represented by a precedence number. The lower values\nare inserted before higher values. Meaning higher precedence styles\noverwrite lower precedence styles.\n\nEach rule has some traits that are put into a bit set which form\nthe precedence:\n\n| bits | trait                                                |\n| ---- | ---------------------------------------------------- |\n| 1    | dark mode                                            |\n| 2    | layer: preflight, global, components, utilities, css |\n| 1    | screens: is this a responsive variation of a rule    |\n| 5    | responsive based on min-width                        |\n| 4    | at-rules                                             |\n| 18   | pseudo and group variants                            |\n| 4    | number of declarations (descending)                  |\n| 4    | greatest precedence of properties                    |\n\n**Dark Mode: 1 bit**\n\nFlag for dark mode rules.\n\n**Layer: 3 bits**\n\n- defaults = 0: The preflight styles and any base styles registered by plugins.\n- base = 1: The global styles registered by plugins.\n- components = 2\n- variants = 3\n- compounds = 4\n- aliases = 5\n- utilities = 6: Utility classes and any utility classes registered by plugins.\n- css = 7: Styles generated by css\n\n**Screens: 1 bit**\n\nFlag for screen variants. They may not always have a `min-width` to be detected by _Responsive_ below.\n\n**Responsive: 4 bits**\n\nBased on extracted `min-width` value:\n\n- 576px -> 3\n- 1536px -> 10\n- 36rem -> 3\n- 96rem -> 9\n\n**At-Rules: 4 bits**\n\nBased on the count of special chars (`-:,`) within the at-rule.\n\n**Pseudo and group variants: 18 bits**\n\nEnsures predictable order of pseudo classes.\n\n- https://bitsofco.de/when-do-the-hover-focus-and-active-pseudo-classes-apply/#orderofstyleshoverthenfocusthenactive\n- https://developer.mozilla.org/docs/Web/CSS/:active#Active_links\n- https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js#L718\n\n**Number of declarations (descending): 4 bits**\n\nAllows single declaration styles to overwrite styles from multi declaration styles.\n\n**Greatest precedence of properties: 4 bits**\n\nEnsure shorthand properties are inserted before longhand properties; eg longhand override shorthand\n*/\n\nexport function moveToLayer(precedence: number, layer: number): number {\n  // Set layer (first reset, than set)\n  return (precedence & ~Layer.o) | layer\n}\n\n/*\nTo set a bit: n |= mask;\nTo clear a bit: n &= ~mask;\nTo test if a bit is set: (n & mask)\n\nBit shifts for the primary bits:\n\n| bits | trait                                                   | shift |\n| ---- | ------------------------------------------------------- | ----- |\n| 1    | dark mode                                               | 30    |\n| 3    | layer: preflight, global, components, utilities, css    | 27    |\n| 1    | screens: is this a responsive variation of a rule       | 26    |\n| 4    | responsive based on min-width, max-width or width       | 22    |\n| 4    | at-rules                                                | 18    |\n| 18   | pseudo and group variants                               | 0     |\n\nLayer: 0 - 7: 3 bits\n  - defaults: 0 << 27\n  - base: 1 << 27\n  - components: 2 << 27\n  - variants: 3 << 27\n  - joints: 4 << 27\n  - aliases: 5 << 27\n  - utilities: 6 << 27\n  - overrides: 7 << 27\n\nThese are calculated by serialize and added afterwards:\n\n| bits | trait                               |\n| ---- | ----------------------------------- |\n| 4    | number of selectors (descending)    |\n| 4    | number of declarations (descending) |\n| 4    | greatest precedence of properties   |\n\nThese are added by shifting the primary bits using multiplication as js only\nsupports bit shift up to 32 bits.\n*/\n\n// Colon and dash count of string (ascending)\nexport function seperatorPrecedence(string: string): number {\n  return string.match(/[-=:;]/g)?.length || 0\n}\n\nexport function atRulePrecedence(css: string): number {\n  // 0 - 15: 4 bits (max 144rem or 2304px)\n  // rem -> bit\n  // <20 ->  0 (<320px)\n  //  20 ->  1 (320px)\n  //  24 ->  2 (384px)\n  //  28 ->  3 (448px)\n  //  32 ->  4 (512px)\n  //  36 ->  5 (576px)\n  //  42 ->  6 (672px)\n  //  48 ->  7 (768px)\n  //  56 ->  8 (896px)\n  //  64 ->  9 (1024px)\n  //  72 -> 10 (1152px)\n  //  80 -> 11 (1280px)\n  //  96 -> 12 (1536px)\n  // 112 -> 13 (1792px)\n  // 128 -> 14 (2048px)\n  // 144 -> 15 (2304px)\n  // https://www.dcode.fr/function-equation-finder\n  return (\n    (Math.min(\n      /(?:^|width[^\\d]+)(\\d+(?:.\\d+)?)(p)?/.test(css)\n        ? Math.max(0, 29.63 * (+RegExp.$1 / (RegExp.$2 ? 15 : 1)) ** 0.137 - 43)\n        : 0,\n      15,\n    ) <<\n      22) /* Shifts.responsive */ |\n    (Math.min(seperatorPrecedence(css), 15) << 18) /* Shifts.atRules */\n  )\n}\n\n// Pesudo variant presedence\n// Chars 3 - 8: Uniquely identifies a pseudo selector\n// represented as a bit set for each relevant value\n// 18 bits: one for each variant plus one for unknown variants\n//\n// ':group-*' variants are normalized to their native pseudo class (':group-hover' -> ':hover')\n// as they already have a higher selector presedence due to the add '.group' ('.group:hover .group-hover:...')\n\n// Sources:\n// - https://bitsofco.de/when-do-the-hover-focus-and-active-pseudo-classes-apply/#orderofstyleshoverthenfocusthenactive\n// - https://developer.mozilla.org/docs/Web/CSS/:active#Active_links\n// - https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js#L931\n\nconst PRECEDENCES_BY_PSEUDO_CLASS = [\n  /* fi */ 'rst-c' /* hild: 0 */,\n  /* la */ 'st-ch' /* ild: 1 */,\n  // even and odd use: nth-child\n  /* nt */ 'h-chi' /* ld: 2 */,\n  /* an */ 'y-lin' /* k: 3 */,\n  /* li */ 'nk' /* : 4 */,\n  /* vi */ 'sited' /* : 5 */,\n  /* ch */ 'ecked' /* : 6 */,\n  /* em */ 'pty' /* : 7 */,\n  /* re */ 'ad-on' /* ly: 8 */,\n  /* fo */ 'cus-w' /* ithin : 9 */,\n  /* ho */ 'ver' /* : 10 */,\n  /* fo */ 'cus' /* : 11 */,\n  /* fo */ 'cus-v' /* isible : 12 */,\n  /* ac */ 'tive' /* : 13 */,\n  /* di */ 'sable' /* d : 14 */,\n  /* op */ 'tiona' /* l: 15 */,\n  /* re */ 'quire' /* d: 16 */,\n]\n\nfunction pseudoPrecedence(selector: string): number {\n  // use first found pseudo-class\n\n  return (\n    1 <<\n    ~(\n      (/:([a-z-]+)/.test(selector) &&\n        ~PRECEDENCES_BY_PSEUDO_CLASS.indexOf(RegExp.$1.slice(2, 7))) ||\n      ~17\n    )\n  )\n}\n\n// https://github.com/kripod/otion/blob/main/packages/otion/src/propertyMatchers.ts\n// \"+1\": [\n// \t/* ^border-.*(w|c|sty) */\n// \t\"border-.*(width,color,style)\",\n\n// \t/* ^[tlbr].{2,4}m?$ */\n// \t\"top\",\n// \t\"left\",\n// \t\"bottom\",\n// \t\"right\",\n\n// \t/* ^c.{7}$ */\n// \t\"continue\",\n\n// \t/* ^c.{8}$ */\n// \t\"container\",\n// ],\n\n// \"-1\": [\n// \t/* ^[fl].{5}l */\n// \t\"flex-flow\",\n// \t\"line-clamp\",\n\n// \t/* ^g.{8}$ */\n// \t\"grid-area\",\n\n// \t/* ^pl */\n// \t\"place-content\",\n// \t\"place-items\",\n// \t\"place-self\",\n\n// ],\n\n// group: 1 => +1\n// group: 2 => -1\n\n// 0 - 15 => 4 bits\n// Ignore vendor prefixed and custom properties\nexport function declarationPropertyPrecedence(property: string): number {\n  return property[0] == '-'\n    ? 0\n    : seperatorPrecedence(property) +\n        (/^(?:(border-(?!w|c|sty)|[tlbr].{2,4}m?$|c.{7,8}$)|([fl].{5}l|g.{8}$|pl))/.test(property)\n          ? +!!RegExp.$1 /* +1 */ || -!!RegExp.$2 /* -1 */\n          : 0) +\n        1\n}\n\nexport interface ConvertedRule {\n  /** The name to use for `&` expansion in selectors. Maybe empty for at-rules like `@import`, `@font-face`, `@media`, ... */\n  n?: string | undefined\n\n  /** The calculated precedence taking all variants into account. */\n  p: number\n\n  /** The rulesets (selectors and at-rules). expanded variants `@media ...`, `@supports ...`, `&:focus`, `.dark &` */\n  r?: string[]\n\n  /** Is this rule `!important` eg something like `!underline` or `!bg-red-500` or `!red-500` */\n  i?: boolean | undefined\n}\n\nexport function convert<Theme extends BaseTheme = BaseTheme>(\n  { n: name, i: important, v: variants = [] }: Partial<ParsedRule>,\n  context: Context<Theme>,\n  precedence: number,\n  conditions?: string[],\n): ConvertedRule {\n  if (name) {\n    name = toClassName({ n: name, i: important, v: variants })\n  }\n\n  conditions = [...asArray(conditions)]\n\n  for (const variant of variants) {\n    const screen = context.theme('screens', variant)\n\n    for (const condition of asArray((screen && mql(screen)) || context.v(variant))) {\n      conditions.push(condition)\n\n      precedence |= screen\n        ? (1 << 26) /* Shifts.screens */ | atRulePrecedence(condition)\n        : variant == 'dark'\n        ? 1 << 30 /* Shifts.darkMode */\n        : condition[0] == '@'\n        ? atRulePrecedence(condition)\n        : pseudoPrecedence(condition)\n    }\n  }\n\n  return { n: name, p: precedence, r: conditions, i: important }\n}\n","import type { BaseTheme, Context, Falsey, RuleResult, TwindRule } from '../types'\nimport type { ParsedRule } from '../parse'\n\nconst registry = new Map<string, RegisterCallback>()\n\nexport type RegisterCallback = (rule: ParsedRule, context: Context) => Falsey | TwindRule[]\n\nexport function register(className: string, factory: RegisterCallback): string {\n  registry.set(className, factory)\n  return className\n}\n\nexport function resolve<Theme extends BaseTheme = BaseTheme>(\n  rule: ParsedRule,\n  context: Context<Theme>,\n): RuleResult | TwindRule[] {\n  const factory = registry.get(rule.n)\n\n  return factory ? factory(rule, context as any) : context.r(rule.n, rule.v[0] == 'dark')\n}\n","function extends_() {\n  extends_ = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return extends_.apply(this, arguments);\n}\n\nexport default function _extends() {\n  return extends_.apply(this, arguments);\n}\n","import type { TwindRule } from '../types'\nimport { escape } from '../utils'\n\nexport function stringify(rule: TwindRule): string | undefined {\n  if (rule.d) {\n    const groups: string[] = []\n\n    const selector = replaceEach(\n      // merge all conditions into a selector string\n      rule.r.reduce((selector, condition) => {\n        if (condition[0] == '@') {\n          groups.push(condition)\n          return selector\n        }\n\n        // Go over the selector and replace the matching multiple selectors if any\n        return condition ? merge(selector, condition) : selector\n      }, '&'),\n      // replace '&' with rule name or an empty string\n      (selectorPart) => replaceReference(selectorPart, rule.n ? '.' + escape(rule.n) : ''),\n    )\n\n    if (selector) {\n      groups.push(selector.replace(/:merge\\((.+?)\\)/g, '$1'))\n    }\n\n    return groups.reduceRight((body, grouping) => grouping + '{' + body + '}', rule.d)\n  }\n}\n\nfunction replaceEach(selector: string, iteratee: (selectorPart: string) => string): string {\n  return selector.replace(\n    / *((?:\\(.+?\\)|\\[.+?\\]|[^,])+) *(,|$)/g,\n    (_, selectorPart: string, comma: string) => iteratee(selectorPart) + comma,\n  )\n}\n\nfunction replaceReference(selector: string, reference: string): string {\n  return selector.replace(/&/g, reference)\n}\n\nfunction merge(selector: string, condition: string): string {\n  return replaceEach(selector, (selectorPart) =>\n    replaceEach(\n      condition,\n      // If the current condition has a nested selector replace it\n      (conditionPart) => {\n        const mergeMatch = /(:merge\\(.+?\\))(:[a-z-]+|\\\\[.+])/.exec(conditionPart)\n\n        if (mergeMatch) {\n          const selectorIndex = selectorPart.indexOf(mergeMatch[1])\n\n          if (~selectorIndex) {\n            // [':merge(.group):hover .rule', ':merge(.group):focus &'] -> ':merge(.group):focus:hover .rule'\n            // ':merge(.group)' + ':focus' + ':hover .rule'\n            return (\n              selectorPart.slice(0, selectorIndex) +\n              mergeMatch[0] +\n              selectorPart.slice(selectorIndex + mergeMatch[1].length)\n            )\n          }\n\n          // [':merge(.peer):focus~&', ':merge(.group):hover &'] -> ':merge(.peer):focus~:merge(.group):hover &'\n          return replaceReference(selectorPart, conditionPart)\n        }\n\n        // Return the current selector with the key matching multiple selectors if any\n        return replaceReference(conditionPart, selectorPart)\n      },\n    ),\n  )\n}\n","import { Layer } from './precedence'\n\nconst collator = new Intl.Collator('en', { numeric: true })\n\nexport interface SortableRule {\n  /** The calculated precedence taking all variants into account. */\n  p: number\n\n  /* The precedence of the properties within {@link d}. */\n  o: number\n\n  /** The name to use for `&` expansion in selectors. Maybe empty for at-rules like `@import`, `@font-face`, `@media`, ... */\n  n?: string | null\n}\n\n/**\n * Find the array index of where to add an element to keep it sorted.\n *\n * @returns The insertion index\n */\nexport function sortedInsertionIndex(\n  array: readonly SortableRule[],\n  element: SortableRule,\n): number {\n  // Find position using binary search\n  // eslint-disable-next-line no-var\n  for (var low = 0, high = array.length; low < high; ) {\n    const pivot = (high + low) >> 1\n\n    // Less-Then-Equal to add new equal element after all existing equal elements (stable sort)\n    if (compareTwindRules(array[pivot], element) <= 0) {\n      low = pivot + 1\n    } else {\n      high = pivot\n    }\n  }\n\n  return high\n}\n\nexport function compareTwindRules(a: SortableRule, b: SortableRule): number {\n  // base and overrides (css) layers are kept in order they are declared\n  const layer = a.p & Layer.o\n\n  if (layer == (b.p & Layer.o) && (layer == Layer.b || layer == Layer.o)) {\n    return 0\n  }\n\n  return (\n    a.p - b.p ||\n    a.o - b.o ||\n    collator.compare(byModifier(a.n), byModifier(b.n)) ||\n    collator.compare(byName(a.n), byName(b.n))\n  )\n}\n\nfunction byModifier(s: string | null | undefined) {\n  return ((s || '').split(/:/).pop() as string).split('/').pop() || '\\x00'\n}\n\nfunction byName(s: string | null | undefined) {\n  return (s || '').replace(/\\W/g, (c) => String.fromCharCode(127 + c.charCodeAt(0))) + '\\x00'\n}\n","import type { ColorValue, ColorFunctionOptions, Context, Falsey } from './types'\n\nfunction parseColorComponent(chars: string, factor: number): number {\n  return Math.round(parseInt(chars, 16) * factor)\n}\n\n/**\n * @internal\n * @param color\n * @param options\n * @returns\n */\nexport function toColorValue(color: ColorValue, options: ColorFunctionOptions = {}): string {\n  if (typeof color == 'function') {\n    return color(options)\n  }\n\n  const { opacityValue = '1', opacityVariable } = options\n  const opacity = opacityVariable ? `var(${opacityVariable})` : opacityValue\n\n  if (color.includes('<alpha-value>')) {\n    return color.replace('<alpha-value>', opacity)\n  }\n\n  // rgb hex: #0123 and #001122\n  if (color[0] == '#' && (color.length == 4 || color.length == 7)) {\n    const size = (color.length - 1) / 3\n    const factor = [17, 1, 0.062272][size - 1]\n\n    return `rgba(${[\n      parseColorComponent(color.substr(1, size), factor),\n      parseColorComponent(color.substr(1 + size, size), factor),\n      parseColorComponent(color.substr(1 + 2 * size, size), factor),\n      opacity,\n    ]})`\n  }\n\n  if (opacity == '1') return color\n  if (opacity == '0') return '#0000'\n\n  // convert rgb and hsl to alpha variant\n  return color.replace(/^(rgb|hsl)(\\([^)]+)\\)$/, `$1a$2,${opacity})`)\n}\n\n/**\n * Looks for a matching dark color within a [tailwind color palette](https://tailwindcss.com/docs/customizing-colors) (`50`, `100`, `200`, ..., `800`, `900`).\n *\n * ```js\n * defineConfig({\n *   darkColor: autoDarkColor,\n * })\n * ```\n *\n * **Note**: Does not work for arbitrary values like `[theme(colors.gray.500)]` or `[theme(colors.gray.500, #ccc)]`.\n *\n * @group Configuration\n * @param section within theme to use\n * @param key of the light color or an arbitrary value\n * @param context to use\n * @returns the dark color if found\n */\nexport function autoDarkColor(\n  section: string,\n  key: string,\n  { theme }: Context<any>,\n): ColorValue | Falsey {\n  // 50 -> 900, 100 -> 800, ..., 800 -> 100, 900 -> 50\n  // key: gray-50, gray.50\n  key = key.replace(\n    /\\d+$/,\n    (shade) =>\n      // ~~(parseInt(shade, 10) / 100): 50 -> 0, 900 -> 9\n      // (9 - 0) -> 900, (9 - 9) -> 50\n      ((9 - ~~(parseInt(shade, 10) / 100) || 0.5) * 100) as any,\n  )\n\n  return theme(section as 'colors', key)\n}\n","import type {\n  CSSObject,\n  Falsey,\n  Context,\n  TwindRule,\n  BaseTheme,\n  MaybeArray,\n  ColorValue,\n} from '../types'\nimport type { ParsedRule } from '../parse'\nimport type { ConvertedRule } from './precedence'\nimport { Layer, moveToLayer } from './precedence'\nimport { mql, hash, asArray } from '../utils'\n\nimport { atRulePrecedence, declarationPropertyPrecedence, convert } from './precedence'\nimport { stringify } from './stringify'\nimport { translateWith } from './translate'\nimport { parse } from '../parse'\nimport { compareTwindRules } from './sorted-insertion-index'\nimport { toColorValue } from '../colors'\n\nexport function serialize<Theme extends BaseTheme = BaseTheme>(\n  style: CSSObject | Falsey,\n  rule: Partial<ParsedRule>,\n  context: Context<Theme>,\n  precedence: number,\n  conditions: string[] = [],\n): TwindRule[] {\n  return serialize$(style, convert(rule, context, precedence, conditions), context)\n}\n\nfunction serialize$<Theme extends BaseTheme = BaseTheme>(\n  style: CSSObject | Falsey,\n  { n: name, p: precedence, r: conditions = [], i: important }: ConvertedRule,\n  context: Context<Theme>,\n): TwindRule[] {\n  const rules: TwindRule[] = []\n\n  // The generated declaration block eg body of the css rule\n  let declarations = ''\n\n  // This ensures that 'border-top-width' has a higher precedence than 'border-top'\n  let maxPropertyPrecedence = 0\n\n  // More specific utilities have less declarations and a higher precedence\n  let numberOfDeclarations = 0\n\n  for (let key in style || {}) {\n    const value = (style as Record<string, unknown>)[key]\n\n    if (key[0] == '@') {\n      // at rules: https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\n      if (!value) continue\n\n      // @apply ...;\n      if (key[1] == 'a') {\n        rules.push(\n          ...translateWith(\n            name as string,\n            precedence,\n            parse('' + value),\n            context,\n            precedence,\n            conditions,\n            important,\n            true /* useOrderOfRules */,\n          ),\n        )\n        continue\n      }\n\n      // @layer <layer>\n      if (key[1] == 'l') {\n        for (const css of asArray(value as MaybeArray<CSSObject>)) {\n          rules.push(\n            ...serialize$(\n              css,\n              {\n                n: name,\n                p: moveToLayer(precedence, Layer[key[7] as 'b']),\n                r: key[7] == 'd' ? [] : conditions,\n                i: important,\n              },\n              context,\n            ),\n          )\n        }\n\n        continue\n      }\n\n      // @import\n      if (key[1] == 'i') {\n        rules.push(\n          ...asArray(value).map((value) => ({\n            // before all layers\n            p: -1,\n            o: 0,\n            r: [],\n            d: key + ' ' + (value as string),\n          })),\n        )\n        continue\n      }\n\n      // @keyframes\n      if (key[1] == 'k') {\n        // Use defaults layer\n        rules.push({\n          p: Layer.d,\n          o: 0,\n          r: [key],\n          d: serialize$(value as CSSObject, { p: Layer.d }, context)\n            .map(stringify)\n            .join(''),\n        })\n        continue\n      }\n\n      // @font-face\n      // TODO @font-feature-values\n      if (key[1] == 'f') {\n        // Use defaults layer\n        rules.push(\n          ...asArray(value).map((value) => ({\n            p: Layer.d,\n            o: 0,\n            r: [key],\n            d: serialize$(value as CSSObject, { p: Layer.d }, context)\n              .map(stringify)\n              .join(''),\n          })),\n        )\n        continue\n      }\n      // -> All other are handled below; same as selector\n    }\n\n    // @media\n    // @supports\n    // selector\n    if (typeof value == 'object' && !Array.isArray(value)) {\n      // at-rule or non-global selector\n      if (key[0] == '@' || key.includes('&')) {\n        let rulePrecedence = precedence\n        if (key[0] == '@') {\n          // Handle `@media screen(sm)` and `@media (screen(sm) or ...)`\n          key = key.replace(/\\bscreen\\(([^)]+)\\)/g, (_, screenKey) => {\n            const screen = context.theme('screens', screenKey)\n\n            if (screen) {\n              rulePrecedence |= 1 << 26 /* Shifts.screens */\n              return mql(screen, '')\n            }\n\n            return _\n          })\n\n          rulePrecedence |= atRulePrecedence(key)\n        }\n\n        rules.push(\n          ...serialize$(\n            value as CSSObject,\n            {\n              n: name,\n              p: rulePrecedence,\n              r: [...conditions, key],\n              i: important,\n            },\n            context,\n          ),\n        )\n      } else {\n        // global selector\n        rules.push(\n          ...serialize$(value as CSSObject, { p: precedence, r: [...conditions, key] }, context),\n        )\n      }\n    } else if (key == 'label' && value) {\n      name = (value as string) + hash(JSON.stringify([precedence, important, style]))\n    } else if (value || value === 0) {\n      // property -> hyphenate\n      key = key.replace(/[A-Z]/g, (_) => '-' + _.toLowerCase())\n\n      // Update precedence\n      numberOfDeclarations += 1\n      maxPropertyPrecedence = Math.max(maxPropertyPrecedence, declarationPropertyPrecedence(key))\n\n      declarations +=\n        (declarations ? ';' : '') +\n        asArray(value)\n          .map((value) =>\n            context.s(\n              key,\n              // support theme(...) function in values\n              // calc(100vh - theme('spacing.12'))\n              resolveThemeFunction('' + value, context.theme) + (important ? ' !important' : ''),\n            ),\n          )\n          .join(';')\n    }\n  }\n\n  // PERF: prevent unshift using `rules = [{}]` above and then `rules[0] = {...}`\n  rules.unshift({\n    n: name,\n\n    p: precedence,\n\n    o:\n      // number of declarations (descending)\n      Math.max(0, 15 - numberOfDeclarations) +\n      // greatest precedence of properties\n      // if there is no property precedence this is most likely a custom property only declaration\n      // these have the highest precedence\n      Math.min(maxPropertyPrecedence || 15, 15) * 1.5,\n\n    r: conditions,\n\n    // stringified declarations\n    d: declarations,\n  })\n\n  return rules.sort(compareTwindRules)\n}\n\nexport function resolveThemeFunction<Theme extends BaseTheme = BaseTheme>(\n  value: string,\n  theme: Context<Theme>['theme'],\n): string {\n  // support theme(...) function in values\n  // calc(100vh - theme('spacing.12'))\n  // theme('borderColor.DEFAULT', 'currentColor')\n\n  // PERF: check for theme before running the regexp\n  // if (value.includes('theme')) {\n  return value.replace(\n    /theme\\(([\"'`])?(.+?)\\1(?:\\s*,\\s*([\"'`])?(.+?)\\3)?\\)/g,\n    (_, __, key: string, ___, defaultValue = '') => {\n      const value = theme(key, defaultValue)\n\n      if (typeof value == 'function' && /color|fill|stroke/i.test(key)) {\n        return toColorValue(value as ColorValue)\n      }\n\n      return '' + asArray(value as unknown).filter((v) => Object(v) !== v)\n    },\n  )\n  // }\n\n  // return value\n}\n","import type { TwindRule } from '../types'\n\nexport function merge(rules: TwindRule[], name: string): TwindRule[] {\n  // merge:\n  // - same conditions\n  // - replace name with hash of name + condititions + declarations\n  // - precedence:\n  //   - combine bits or use max precendence\n  //   - set layer bit to merged\n  const result: TwindRule[] = []\n\n  let current: TwindRule | undefined\n\n  for (const rule of rules) {\n    // only merge rules with declarations and names (eg no global rules)\n    if (!(rule.d && rule.n)) {\n      result.push({ ...rule, n: rule.n && name })\n    } else if (current?.p == rule.p && '' + current.r == '' + rule.r) {\n      current.c = [current.c, rule.c].filter(Boolean).join(' ')\n      current.d = current.d + ';' + rule.d\n    } else {\n      // only set name for named rules eg not for global or className propagation rules\n      result.push((current = { ...rule, n: rule.n && name }))\n    }\n  }\n\n  return result\n}\n","import type { TwindRule, Context, BaseTheme } from '../types'\nimport type { ParsedRule } from '../parse'\n\nimport { parse } from '../parse'\nimport { convert, Layer, moveToLayer } from './precedence'\n\nimport { resolve } from './registry'\nimport { serialize } from './serialize'\nimport { sortedInsertionIndex } from './sorted-insertion-index'\nimport { toClassName } from './to-class-name'\nimport { asArray } from '../utils'\nimport { merge } from './merge'\n\nexport function translate<Theme extends BaseTheme = BaseTheme>(\n  rules: readonly ParsedRule[],\n  context: Context<Theme>,\n  precedence = Layer.u,\n  conditions?: string[],\n  important?: boolean,\n): TwindRule[] {\n  // Sorted by precedence\n  const result: TwindRule[] = []\n\n  for (const rule of rules) {\n    for (const cssRule of translate$(rule, context, precedence, conditions, important)) {\n      result.splice(sortedInsertionIndex(result, cssRule), 0, cssRule)\n    }\n  }\n\n  return result\n}\n\nfunction translate$<Theme extends BaseTheme = BaseTheme>(\n  rule: ParsedRule,\n  context: Context<Theme>,\n  precedence: number,\n  conditions?: string[],\n  important?: boolean,\n): TwindRule[] {\n  rule = { ...rule, i: rule.i || important }\n\n  const resolved = resolve(rule, context)\n\n  if (!resolved) {\n    // propagate className as is\n    return [{ c: toClassName(rule), p: 0, o: 0, r: [] }]\n  }\n\n  // a list of class names\n  if (typeof resolved == 'string') {\n    ;({ r: conditions, p: precedence } = convert(rule, context, precedence, conditions))\n\n    return merge(translate(parse(resolved), context, precedence, conditions, rule.i), rule.n)\n  }\n\n  if (Array.isArray(resolved)) {\n    return resolved.map((rule) => ({\n      o: 0,\n      ...rule,\n      r: [...asArray(conditions), ...asArray(rule.r)],\n      p: moveToLayer(precedence, rule.p ?? precedence),\n    }))\n  }\n\n  return serialize(resolved, rule, context, precedence, conditions)\n}\n\nexport function translateWith<Theme extends BaseTheme = BaseTheme>(\n  name: string,\n  layer: number,\n  rules: ParsedRule[],\n  context: Context<Theme>,\n  precedence: number,\n  conditions?: string[] | undefined,\n  important?: boolean | undefined,\n  useOrderOfRules?: boolean,\n) {\n  return merge(\n    (useOrderOfRules\n      ? rules.flatMap((rule) => translate([rule], context, precedence, conditions, important))\n      : translate(rules, context, precedence, conditions, important)\n    ).map((rule) =>\n      // do not move defaults\n      // move only rules with a name unless they are in the base layer\n      rule.p & Layer.o && (rule.n || layer == Layer.b)\n        ? { ...rule, p: moveToLayer(rule.p, layer), o: 0 }\n        : rule,\n    ),\n    name,\n  )\n}\n","import type { Falsey } from '../types'\nimport type { ParsedRule } from '../parse'\nimport { convert } from './precedence'\nimport { register } from './registry'\nimport { translateWith } from './translate'\n\nexport function define(\n  className: string,\n  layer: number,\n  rules: Falsey | ParsedRule[],\n  useOrderOfRules?: boolean,\n): string {\n  return register(className, (rule, context) => {\n    const { n: name, p: precedence, r: conditions, i: important } = convert(rule, context, layer)\n\n    return (\n      rules &&\n      translateWith(\n        name as string,\n        layer,\n        rules,\n        context,\n        precedence,\n        conditions,\n        important,\n        useOrderOfRules,\n      )\n    )\n  })\n}\n","import { DEV } from 'distilt/env'\n\nimport { hash } from './utils'\nimport { define } from './internal/define'\nimport { format } from './internal/format'\nimport { Layer } from './internal/precedence'\n\nexport interface ParsedRule {\n  /**\n   * The utility name including `-` if set, but without `!` and variants\n   */\n  readonly n: string\n\n  /**\n   * All variants without trailing colon: `hover`, `after:`, `[...]`\n   */\n  readonly v: string[]\n\n  /**\n   * Something like `!underline` or `!bg-red-500` or `!red-500`\n   */\n  readonly i?: boolean\n}\n\nexport interface ParsedDevRule extends ParsedRule {\n  readonly a: string[]\n  readonly l: [start: number, end: number]\n}\n\nfunction createRule(\n  active: string[],\n  current: ParsedRule[][],\n  loc?: ParsedDevRule['l'] | false,\n): void {\n  if (active[active.length - 1] != '(') {\n    const variants: string[] = []\n    let important = false\n    let negated = false\n    let name = ''\n\n    for (let value of active) {\n      if (value == '(' || /[~@]$/.test(value)) continue\n\n      if (value[0] == '!') {\n        value = value.slice(1)\n        important = !important\n      }\n\n      if (value.endsWith(':')) {\n        variants[value == 'dark:' ? 'unshift' : 'push'](value.slice(0, -1))\n        continue\n      }\n\n      if (value[0] == '-') {\n        value = value.slice(1)\n        negated = !negated\n      }\n\n      if (value.endsWith('-')) {\n        value = value.slice(0, -1)\n      }\n\n      if (value && value != '&') {\n        name += (name && '-') + value\n      }\n    }\n\n    if (name) {\n      if (negated) name = '-' + name\n\n      current[0].push(\n        DEV\n          ? Object.defineProperties(\n              { n: name, v: variants.filter(uniq), i: important },\n              {\n                a: { value: [...active] },\n                l: { value: loc },\n              },\n            )\n          : { n: name, v: variants.filter(uniq), i: important },\n      )\n    }\n  }\n}\n\nfunction uniq<T>(value: T, index: number, values: T[]): boolean {\n  return values.indexOf(value) == index\n}\n\nconst cache = new Map<string, ParsedRule[]>()\n\n/**\n * @internal\n * @param token\n * @returns\n */\nexport function parse(token: string): ParsedRule[] {\n  let parsed = cache.get(token)\n\n  if (!parsed) {\n    // Stack of active groupings (`(`), variants, or nested (`~` or `@`)\n    const active: string[] = []\n\n    // Stack of current rule list to put new rules in\n    // the first `0` element is the current list\n    const current: ParsedRule[][] = [[]]\n\n    let startIndex = 0\n    let skip = 0\n    let comment: RegExp | null = null\n    let position = 0\n\n    // eslint-disable-next-line no-inner-declarations\n    const commit = (isRule?: boolean, endOffset = 0) => {\n      if (startIndex != position) {\n        active.push(token.slice(startIndex, position + endOffset))\n\n        if (isRule) {\n          createRule(active, current, DEV && [startIndex, position + endOffset])\n        }\n      }\n      startIndex = position + 1\n    }\n\n    for (; position < token.length; position++) {\n      const char = token[position]\n\n      if (skip) {\n        // within [...]\n        // skip over until not skipping\n        // ignore escaped chars\n        if (token[position - 1] != '\\\\') {\n          skip += +(char == '[') || -(char == ']')\n        }\n      } else if (char == '[') {\n        // start to skip\n        skip += 1\n      } else if (comment) {\n        if (token[position - 1] != '\\\\' && comment.test(token.slice(position))) {\n          comment = null\n          startIndex = position + RegExp.lastMatch.length\n        }\n      } else if (\n        char == '/' &&\n        token[position - 1] != '\\\\' &&\n        (token[position + 1] == '*' || token[position + 1] == '/')\n      ) {\n        // multiline or single line comment\n        comment = token[position + 1] == '*' ? /^\\*\\// : /^[\\r\\n]/\n      } else if (char == '(') {\n        // hover:(...) or utilitity-(...)\n        commit()\n        active.push(char)\n      } else if (char == ':') {\n        // hover: or after::\n        if (token[position + 1] != ':') {\n          commit(false, 1)\n        }\n      } else if (/[\\s,)]/.test(char)) {\n        // whitespace, comma or closing brace\n        commit(true)\n\n        let lastGroup = active.lastIndexOf('(')\n\n        if (char == ')') {\n          // Close nested block\n          const nested = active[lastGroup - 1]\n\n          if (/[~@]$/.test(nested)) {\n            const rules = current.shift() as ParsedRule[]\n\n            active.length = lastGroup\n\n            // remove variants that are already applied through active\n            createRule([...active, '#'], current, DEV && [startIndex, position])\n            const { v } = current[0].pop() as ParsedRule\n\n            for (const rule of rules) {\n              // if a rule has dark we need to splice after the first entry eg dark\n              rule.v.splice(+(rule.v[0] == 'dark') - +(v[0] == 'dark'), v.length)\n            }\n\n            createRule(\n              [\n                ...active,\n                define(\n                  // named nested\n                  nested.length > 1\n                    ? nested.slice(0, -1) + hash(JSON.stringify([nested, rules]))\n                    : nested + '(' + format(rules) + ')',\n                  Layer.a,\n                  rules,\n                  /@$/.test(nested),\n                ),\n              ],\n              current,\n              DEV && [startIndex, position],\n            )\n          }\n\n          lastGroup = active.lastIndexOf('(', lastGroup - 1)\n        }\n\n        active.length = lastGroup + 1\n      } else if (/[~@]/.test(char) && token[position + 1] == '(') {\n        // start nested block\n        // ~(...) or button~(...)\n        // @(...) or button@(...)\n        current.unshift([])\n      }\n    }\n\n    // Consume remaining stack\n    commit(true)\n\n    cache.set(token, (parsed = current[0]))\n  }\n\n  return parsed\n}\n","export function interleave<Interpolations>(\n  strings: TemplateStringsArray,\n  interpolations: readonly Interpolations[],\n  handle: (interpolation: Interpolations) => string,\n): string {\n  return interpolations.reduce(\n    (result: string, interpolation, index) => result + handle(interpolation) + strings[index + 1],\n    strings[0],\n  )\n}\n","import type { Class } from '../types'\nimport { interleave } from './interleave'\n\n// based on https://github.com/lukeed/clsx and https://github.com/jorgebucaran/classcat\nexport function interpolate(\n  strings: TemplateStringsArray | Class,\n  interpolations: Class[],\n): string {\n  return Array.isArray(strings) && Array.isArray((strings as unknown as TemplateStringsArray).raw)\n    ? interleave(strings as unknown as TemplateStringsArray, interpolations, (value) =>\n        toString(value).trim(),\n      )\n    : interpolations\n        .filter(Boolean)\n        .reduce(\n          (result: string, value) => result + toString(value),\n          strings ? toString(strings as Class) : '',\n        )\n}\n\nfunction toString(value: Class): string {\n  let result = ''\n  let tmp: string\n\n  if (value && typeof value == 'object') {\n    if (Array.isArray(value)) {\n      if ((tmp = interpolate(value[0], value.slice(1)))) {\n        result += ' ' + tmp\n      }\n    } else {\n      for (const key in value) {\n        if (value[key]) result += ' ' + key\n      }\n    }\n  } else if (value != null && typeof value != 'boolean') {\n    result += ' ' + value\n  }\n\n  return result\n}\n","import type { Class, Nested } from './types'\nimport { format } from './internal/format'\nimport { parse } from './parse'\nimport { interpolate } from './internal/interpolate'\n\n/**\n * @group Class Name Generators\n */\nexport const apply = /* #__PURE__ */ alias('@')\n\n/**\n * @group Class Name Generators\n */\nexport const shortcut = /* #__PURE__ */ alias('~')\n\nfunction alias(marker: string): Nested {\n  return new Proxy(\n    function alias(strings: TemplateStringsArray | Class, ...interpolations: Class[]): string {\n      return alias$('', strings, interpolations)\n    } as Nested,\n    {\n      get(target, name) {\n        if (name in target) return target[name as string]\n\n        return function namedAlias(\n          strings: TemplateStringsArray | Class,\n          ...interpolations: Class[]\n        ): string {\n          return alias$(name as string, strings, interpolations)\n        }\n      },\n    },\n  )\n\n  function alias$(\n    name: string,\n    strings: TemplateStringsArray | Class,\n    interpolations: Class[],\n  ): string {\n    return format(parse(name + marker + '(' + interpolate(strings, interpolations) + ')'))\n  }\n}\n","import type { CSSObject, CSSValue } from '../types'\nimport { interleave } from './interleave'\n\nexport function astish(\n  strings: CSSObject | string | TemplateStringsArray,\n  interpolations: readonly CSSValue[],\n): CSSObject[] {\n  return Array.isArray(strings)\n    ? astish$(\n        interleave(strings as TemplateStringsArray, interpolations, (interpolation) =>\n          interpolation != null && typeof interpolation != 'boolean'\n            ? (interpolation as unknown as string)\n            : '',\n        ),\n      )\n    : typeof strings == 'string'\n    ? astish$(strings)\n    : [strings as CSSObject]\n}\n\n// Based on https://github.com/cristianbote/goober/blob/master/src/core/astish.js\nconst newRule = / *(?:(?:([\\u0080-\\uFFFF\\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}))/g\n\n/**\n * Convert a css style string into a object\n */\nfunction astish$(css: string): CSSObject[] {\n  css = removeComments(css)\n\n  const tree: CSSObject[] = [{}]\n  const rules: CSSObject[] = [tree[0]]\n  const conditions: string[] = []\n  let block: RegExpExecArray | null\n\n  while ((block = newRule.exec(css))) {\n    // Remove the current entry\n    if (block[4]) {\n      tree.shift()\n      conditions.shift()\n    }\n\n    if (block[3]) {\n      // new nested\n      conditions.unshift(block[3])\n      tree.unshift({})\n      rules.push(conditions.reduce((body, condition) => ({ [condition]: body }), tree[0]))\n    } else if (!block[4]) {\n      // if we already have that property — start a new CSSObject\n      if (tree[0][block[1]]) {\n        tree.unshift({})\n        rules.push(conditions.reduce((body, condition) => ({ [condition]: body }), tree[0]))\n      }\n      tree[0][block[1]] = block[2]\n    }\n  }\n\n  // console.log(rules)\n  return rules\n}\n\n// Remove comments (multiline and single line)\nfunction removeComments(css: string): string {\n  return css.replace(/\\/\\*[^]*?\\*\\/|\\s\\s+|\\n/gm, ' ')\n}\n","import type { CSSObject, CSSValue } from './types'\n\nimport { register } from './internal/registry'\nimport { serialize } from './internal/serialize'\nimport { hash } from './utils'\nimport { Layer } from './internal/precedence'\nimport { merge } from './internal/merge'\nimport { astish } from './internal/astish'\n\n/**\n * @group Class Name Generators\n * @param strings\n * @param interpolations\n */\nexport function css(strings: TemplateStringsArray, ...interpolations: readonly CSSValue[]): string\n\nexport function css(style: CSSObject | string): string\n\nexport function css(\n  strings: CSSObject | string | TemplateStringsArray,\n  ...interpolations: readonly CSSValue[]\n): string {\n  const ast = astish(strings, interpolations)\n\n  const className = (ast.find((o) => o.label)?.label || 'css') + hash(JSON.stringify(ast))\n\n  return register(className, (rule, context) =>\n    merge(\n      ast.flatMap((css) => serialize(css, rule, context, Layer.o)),\n      className,\n    ),\n  )\n}\n","import type { CSSObject, CSSProperties, StringLike } from './types'\n\nimport { css } from './css'\n\nexport interface AnimationFunction {\n  (animation: string | CSSProperties, waypoints: StringLike): StringLike\n}\n\nexport type Animation = AnimationFunction & {\n  [label: string]: AnimationFunction\n}\n\n/**\n * @group Class Name Generators\n */\nexport const animation = /* #__PURE__ */ new Proxy(\n  function animation(animation: string | CSSProperties, waypoints: StringLike): StringLike {\n    return animation$('animation', animation, waypoints)\n  } as Animation,\n  {\n    get(target, name) {\n      if (name in target) return target[name as string]\n\n      return function namedAnimation(\n        animation: string | CSSProperties,\n        waypoints: StringLike,\n      ): StringLike {\n        return animation$(name as string, animation, waypoints)\n      }\n    },\n  },\n)\n\nfunction animation$(\n  label: string,\n  animation: string | CSSProperties,\n  waypoints: StringLike,\n): StringLike {\n  return {\n    toString() {\n      return css({\n        label,\n        '@layer components': {\n          ...(typeof animation == 'object' ? animation : { animation }),\n          animationName: '' + waypoints,\n        },\n      } as CSSObject)\n    },\n  } as StringLike\n}\n","import { DEV } from 'distilt/env'\n\nimport type {\n  Context,\n  ColorValue,\n  ColorFunction,\n  BaseTheme,\n  MatchResult,\n  RuleResolver,\n  CSSProperties,\n  CSSObject,\n  RuleResult,\n  ThemeValue,\n  KebabCase,\n  MatchConverter,\n  Rule,\n  MaybeArray,\n} from './types'\n\nimport { toColorValue } from './colors'\nimport { resolveThemeFunction } from './internal/serialize'\nimport {\n  type AutocompleteProvider,\n  type AutocompleteItem,\n  withAutocomplete,\n  type AutocompleteModifier,\n} from './autocomplete'\n\nexport type ThemeMatchResult<Value> = MatchResult & {\n  /** The found theme value */\n  _: Value\n}\n\nexport type ThemeRuleResolver<Value, Theme extends BaseTheme = BaseTheme> = RuleResolver<\n  Theme,\n  ThemeMatchResult<Value>\n>\n\nexport type ThemeMatchConverter<Value, Theme extends BaseTheme = BaseTheme> = MatchConverter<\n  Theme,\n  ThemeMatchResult<Value>\n>\n\n// indirection wrapper to remove autocomplete functions from production bundles\nfunction withAutocomplete$<Theme extends BaseTheme = BaseTheme>(\n  resolver: RuleResolver<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false,\n): RuleResolver<Theme> {\n  if (DEV) {\n    return withAutocomplete(resolver, autocomplete)\n  }\n\n  return resolver\n}\n\n/**\n * @group Configuration\n * @param pattern\n */\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n): Rule<Theme>\n\n/**\n * @group Configuration\n * @param pattern\n * @param resolver\n */\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n  resolver: RuleResolver<Theme>,\n): Rule<Theme>\n\n/**\n * @group Configuration\n * @param pattern\n * @param resolve\n */\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  resolve: (string & {}) | CSSObject,\n): Rule<Theme>\n\n/**\n * @group Configuration\n * @param pattern\n * @param resolve\n * @param convert\n */\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n  resolve: keyof CSSProperties,\n  convert?: MatchConverter<Theme>,\n): Rule<Theme>\n\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  resolve?: RuleResolver<Theme> | (string & {}) | CSSObject | keyof CSSProperties,\n  convert?: MatchConverter<Theme>,\n): Rule<Theme> {\n  return [pattern, fromMatch(resolve as keyof CSSProperties, convert)]\n}\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(): RuleResolver<Theme>\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(\n  resolver: RuleResolver<Theme>,\n): RuleResolver<Theme>\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(\n  resolve: keyof CSSProperties,\n  convert?: MatchConverter<Theme>,\n): RuleResolver<Theme>\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(\n  resolve: string | CSSObject,\n): RuleResolver<Theme>\n\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(\n  resolve?: RuleResolver<Theme> | keyof CSSProperties | string | CSSObject,\n  convert?: MatchConverter<Theme>,\n): RuleResolver<Theme> {\n  return typeof resolve == 'function'\n    ? resolve\n    : typeof resolve == 'string' && /^[\\w-]+$/.test(resolve) // a CSS property alias\n    ? (match, context) =>\n        ({\n          [resolve]: convert ? convert(match, context) : maybeNegate(match, 1),\n        } as CSSObject)\n    : (match) =>\n        // CSSObject, shortcut or apply\n        resolve ||\n        ({\n          [match[1]]: maybeNegate(match, 2),\n        } as CSSObject)\n}\n\nfunction maybeNegate<T>(\n  match: MatchResult,\n  offset: number,\n  value: T | string = match.slice(offset).find(Boolean) || match.$$ || match.input,\n): T | string {\n  return match.input[0] == '-' ? `calc(${value} * -1)` : value\n}\n\n/**\n * @group Configuration\n * @param pattern\n * @param section\n * @param resolve\n * @param convert\n * @returns\n */\nexport function matchTheme<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof Theme & string = keyof Theme & string,\n>(\n  pattern: MaybeArray<string | RegExp>,\n\n  /** Theme section to use (default: `$1` — The first matched group) */\n  section?: '' | Section | KebabCase<Section>,\n\n  /** The css property (default: value of {@link section}) */\n  resolve?: keyof CSSProperties | ThemeRuleResolver<ThemeValue<Theme[Section]>, Theme>,\n\n  convert?: ThemeMatchConverter<ThemeValue<Theme[Section]>, Theme>,\n): Rule<Theme> {\n  return [pattern, fromTheme(section, resolve, convert)]\n}\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link matchTheme} instead.\n * @param section\n * @param resolve\n * @param convert\n * @returns\n */\nexport function fromTheme<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof Theme & string = keyof Theme & string,\n>(\n  /** Theme section to use (default: `$1` — The first matched group) */\n  section?: '' | Section | KebabCase<Section>,\n\n  /** The css property (default: value of {@link section}) */\n  resolve?: keyof CSSProperties | ThemeRuleResolver<ThemeValue<Theme[Section]>, Theme>,\n\n  convert?: ThemeMatchConverter<ThemeValue<Theme[Section]>, Theme>,\n): RuleResolver<Theme> {\n  const factory: (\n    match: ThemeMatchResult<ThemeValue<Theme[Section]>>,\n    context: Context<Theme>,\n    section: Section,\n  ) => RuleResult =\n    typeof resolve == 'string'\n      ? (match, context) =>\n          ({ [resolve]: convert ? convert(match, context) : match._ } as CSSObject)\n      : resolve || (({ 1: $1, _ }, context, section) => ({ [$1 || section]: _ } as CSSObject))\n\n  return withAutocomplete$(\n    (match, context) => {\n      const themeSection = camelize(section || match[1]) as Section\n\n      const value =\n        context.theme(themeSection, match.$$) ??\n        (arbitrary(match.$$, themeSection, context) as ThemeValue<Theme[Section]>)\n\n      if (value != null) {\n        ;(match as ThemeMatchResult<ThemeValue<Theme[Section]>>)._ = maybeNegate(\n          match,\n          0,\n          value,\n        ) as ThemeValue<Theme[Section]>\n\n        return factory(match as ThemeMatchResult<ThemeValue<Theme[Section]>>, context, themeSection)\n      }\n    },\n    DEV &&\n      ((match, context) => {\n        const themeSection = camelize(section || match[1]) as Section\n\n        const isKeyLookup = match.input.endsWith('-')\n\n        if (isKeyLookup) {\n          return Object.entries(context.theme(themeSection) || {})\n            .filter(\n              ([key, value]) =>\n                key &&\n                key != 'DEFAULT' &&\n                (!/color|fill|stroke/i.test(themeSection) ||\n                  ['string', 'function'].includes(typeof value)),\n            )\n            .map(\n              ([key, value]): AutocompleteItem => ({\n                suffix: key.replace(/-DEFAULT/g, ''),\n                theme: { section: themeSection, key },\n                color:\n                  /color|fill|stroke/i.test(themeSection) &&\n                  toColorValue(value as ColorValue, { opacityValue: '1' }),\n              }),\n            )\n            .concat([{ suffix: '[' }])\n        }\n\n        const value = context.theme(themeSection, 'DEFAULT')\n\n        if (value) {\n          return [\n            {\n              suffix: '',\n              theme: { section: themeSection, key: 'DEFAULT' },\n              color:\n                /color|fill|stroke/i.test(themeSection) &&\n                toColorValue(value as ColorValue, { opacityValue: '1' }),\n            },\n          ]\n        }\n\n        return []\n      }),\n  )\n}\n\nexport type FilterByThemeValue<Theme, Value> = {\n  [key in keyof Theme & string]: ThemeValue<Theme[key]> extends Value ? Theme[key] : never\n}\n\nexport interface ColorFromThemeValue {\n  value: string\n  color: ColorFunction\n  opacityVariable: string | undefined\n  opacityValue: string | undefined\n}\n\nexport interface ColorFromThemeOptions<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof FilterByThemeValue<Theme, ColorValue> = keyof FilterByThemeValue<\n    Theme,\n    ColorValue\n  >,\n  OpacitySection extends keyof FilterByThemeValue<Theme, string> = keyof FilterByThemeValue<\n    Theme,\n    string\n  >,\n> {\n  /** Theme section to use (default: `$0.replace('-', 'Color')` — The matched string with `Color` appended) */\n  section?: Section | KebabCase<Section>\n  /** The css property (default: value of {@link section}) */\n  property?: keyof CSSProperties\n  /** `--tw-${$0}opacity` -> '--tw-text-opacity' */\n  opacityVariable?: string | false\n  /** `section.replace('Color', 'Opacity')` -> 'textOpacity' */\n  opacitySection?: OpacitySection\n  selector?: string\n}\n\n/**\n * @group Configuration\n * @param pattern\n * @param options\n * @param resolve\n * @returns\n */\nexport function matchColor<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof FilterByThemeValue<Theme, ColorValue> = keyof FilterByThemeValue<\n    Theme,\n    ColorValue\n  >,\n  OpacitySection extends keyof FilterByThemeValue<Theme, string> = keyof FilterByThemeValue<\n    Theme,\n    string\n  >,\n>(\n  pattern: MaybeArray<string | RegExp>,\n  options: ColorFromThemeOptions<Theme, Section, OpacitySection> = {},\n  resolve?: ThemeRuleResolver<ColorFromThemeValue, Theme>,\n): Rule<Theme> {\n  return [pattern, colorFromTheme(options, resolve)]\n}\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link matchColor} instead.\n * @param options\n * @param resolve\n * @returns\n */\nexport function colorFromTheme<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof FilterByThemeValue<Theme, ColorValue> = keyof FilterByThemeValue<\n    Theme,\n    ColorValue\n  >,\n  OpacitySection extends keyof FilterByThemeValue<Theme, string> = keyof FilterByThemeValue<\n    Theme,\n    string\n  >,\n>(\n  options: ColorFromThemeOptions<Theme, Section, OpacitySection> = {},\n  resolve?: ThemeRuleResolver<ColorFromThemeValue, Theme>,\n): RuleResolver<Theme> {\n  return withAutocomplete$(\n    (match, context) => {\n      // text- -> textColor\n      // ring-offset(?:-|$) -> ringOffsetColor\n      const { section = (camelize(match[0]).replace('-', '') + 'Color') as Section } = options\n\n      // extract color and opacity\n      // rose-500                  -> ['rose-500']\n      // [hsl(0_100%_/_50%)]       -> ['[hsl(0_100%_/_50%)]']\n      // indigo-500/100            -> ['indigo-500', '100']\n      // [hsl(0_100%_/_50%)]/[.25] -> ['[hsl(0_100%_/_50%)]', '[.25]']\n      const [colorMatch, opacityMatch] = parseValue(match.$$)\n\n      if (!colorMatch) return\n\n      const colorValue =\n        (context.theme(section, colorMatch) as ColorValue) ||\n        arbitrary(colorMatch, section, context)\n\n      if (!colorValue || typeof colorValue == 'object') return\n\n      const {\n        // text- -> --tw-text-opacity\n        // ring-offset(?:-|$) -> --tw-ring-offset-opacity\n        // TODO move this default into preset-tailwind?\n        opacityVariable = `--tw-${match[0].replace(/-$/, '')}-opacity`,\n        opacitySection = section.replace('Color', 'Opacity') as OpacitySection,\n        property = section,\n        selector,\n      } = options\n\n      const opacityValue =\n        (context.theme(opacitySection, opacityMatch || 'DEFAULT') as string | undefined) ||\n        (opacityMatch && arbitrary(opacityMatch, opacitySection, context))\n\n      // if (typeof color != 'string') {\n      //   console.warn(`Invalid color ${colorMatch} (from ${match.input}):`, color)\n      //   return\n      // }\n\n      const create =\n        resolve ||\n        (({ _ }) => {\n          const properties = toCSS(property, _)\n\n          return selector ? { [selector]: properties } : properties\n        })\n\n      ;(match as ThemeMatchResult<ColorFromThemeValue>)._ = {\n        value: toColorValue(colorValue, {\n          opacityVariable: opacityVariable || undefined,\n          opacityValue: opacityValue || undefined,\n        }),\n        color: (options) => toColorValue(colorValue, options),\n        opacityVariable: opacityVariable || undefined,\n        opacityValue: opacityValue || undefined,\n      }\n\n      let properties = create(match as ThemeMatchResult<ColorFromThemeValue>, context)\n\n      // auto support dark mode colors\n      if (!match.dark) {\n        const darkColorValue = context.d(section, colorMatch, colorValue)\n\n        if (darkColorValue && darkColorValue !== colorValue) {\n          ;(match as ThemeMatchResult<ColorFromThemeValue>)._ = {\n            value: toColorValue(darkColorValue, {\n              opacityVariable: opacityVariable || undefined,\n              opacityValue: opacityValue || '1',\n            }),\n            color: (options) => toColorValue(darkColorValue, options),\n            opacityVariable: opacityVariable || undefined,\n            opacityValue: opacityValue || undefined,\n          }\n\n          properties = {\n            '&': properties,\n            [context.v('dark') as string]: create(\n              match as ThemeMatchResult<ColorFromThemeValue>,\n              context,\n            ),\n          } as CSSObject\n        }\n      }\n\n      return properties\n    },\n    DEV &&\n      ((match, context) => {\n        const {\n          section = (camelize(match[0]).replace('-', '') + 'Color') as Section,\n          opacitySection = section.replace('Color', 'Opacity') as OpacitySection,\n        } = options\n\n        const isKeyLookup = match.input.endsWith('-')\n\n        const opacities = Object.entries<string>(context.theme(opacitySection) || {}).filter(\n          ([key, value]) => key != 'DEFAULT' && /^[\\w-]+$/.test(key) && typeof value == 'string',\n        )\n\n        if (isKeyLookup) {\n          // ['gray-50', ['/0', '/10', ...]],\n          // ['gray-100', ['/0', '/10', ...]],\n\n          return Object.entries(context.theme(section) || {})\n            .filter(\n              ([key, value]) =>\n                key && key != 'DEFAULT' && ['string', 'function'].includes(typeof value),\n            )\n            .map(\n              ([key, value]): AutocompleteItem => ({\n                suffix: key.replace(/-DEFAULT/g, ''),\n                theme: { section, key },\n                color: toColorValue(value as ColorValue, {\n                  opacityValue: (context.theme(opacitySection, 'DEFAULT') as string) || '1',\n                }),\n                modifiers:\n                  (typeof value == 'function' ||\n                    (typeof value == 'string' &&\n                      (value.includes('<alpha-value>') ||\n                        (value[0] == '#' && (value.length == 4 || value.length == 7))))) &&\n                  opacities\n                    .map(\n                      ([key, opacityValue]): AutocompleteModifier => ({\n                        modifier: key,\n                        theme: { section: opacitySection, key },\n                        color: toColorValue(value as ColorValue, { opacityValue }),\n                      }),\n                    )\n                    .concat([\n                      {\n                        modifier: '[',\n                        color: toColorValue(value as ColorValue, { opacityValue: '1' }),\n                      },\n                    ]),\n              }),\n            )\n            .concat([{ suffix: '[' }])\n        }\n\n        const value = context.theme(section, 'DEFAULT')\n\n        if (value) {\n          return [\n            {\n              suffix: '',\n              theme: { section, key: 'DEFAULT' },\n              color: toColorValue(value as ColorValue, {\n                opacityValue: (context.theme(opacitySection, 'DEFAULT') as string) || '1',\n              }),\n              modifiers:\n                (typeof value == 'function' ||\n                  (typeof value == 'string' &&\n                    (value.includes('<alpha-value>') ||\n                      (value[0] == '#' && (value.length == 4 || value.length == 7))))) &&\n                opacities\n                  .map(\n                    ([key, opacityValue]): AutocompleteModifier => ({\n                      modifier: key,\n                      theme: { section: opacitySection, key },\n                      color: toColorValue(value as ColorValue, { opacityValue }),\n                    }),\n                  )\n                  .concat([\n                    {\n                      modifier: '[',\n                      color: toColorValue(value as ColorValue, { opacityValue: '1' }),\n                    },\n                  ]),\n            },\n          ]\n        }\n\n        return []\n      }),\n  )\n}\n\n/**\n * @internal\n * @param input\n */\nexport function parseValue(\n  input: string,\n):\n  | [value: string, modifier: string | undefined]\n  | [value: undefined, modifier: string | undefined] {\n  // extract color and opacity\n  // rose-500                  -> ['rose-500']\n  // [hsl(0_100%_/_50%)]       -> ['[hsl(0_100%_/_50%)]']\n  // indigo-500/100            -> ['indigo-500', '100']\n  // [hsl(0_100%_/_50%)]/[.25] -> ['[hsl(0_100%_/_50%)]', '[.25]']\n  return (input.match(/^(\\[[^\\]]+]|[^/]+?)(?:\\/(.+))?$/) || []).slice(1) as [\n    value: string,\n    modifier: string | undefined,\n  ]\n}\n\n/**\n * @internal\n * @param property\n * @param value\n * @returns\n */\nexport function toCSS(property: string, value: string | ColorFromThemeValue): CSSObject {\n  const properties: CSSObject = {}\n\n  if (typeof value === 'string') {\n    properties[property] = value\n  } else {\n    if (value.opacityVariable && value.value.includes(value.opacityVariable)) {\n      properties[value.opacityVariable] = value.opacityValue || '1'\n    }\n\n    properties[property] = value.value\n  }\n\n  return properties\n}\n\n/**\n * @internal\n * @param value\n * @param section\n * @param context\n * @returns\n */\nexport function arbitrary<Theme extends BaseTheme = BaseTheme>(\n  value: string,\n  section: string | undefined,\n  context: Context<Theme>,\n): string | undefined {\n  if (value[0] == '[' && value.slice(-1) == ']') {\n    value = normalize(resolveThemeFunction(value.slice(1, -1), context.theme))\n\n    if (!section) return value\n\n    if (\n      // Respect type hints from the user on ambiguous arbitrary values - https://tailwindcss.com/docs/adding-custom-styles#resolving-ambiguities\n      !(\n        // If this is a color section and the value is a hex color, color function or color name\n        (\n          (/color|fill|stroke/i.test(section) &&\n            !(\n              /^color:/.test(value) || /^(#|((hsl|rgb)a?|hwb|lab|lch|color)\\(|[a-z]+$)/.test(value)\n            )) ||\n          // url(, [a-z]-gradient(, image(, cross-fade(, image-set(\n          (/image/i.test(section) && !(/^image:/.test(value) || /^[a-z-]+\\(/.test(value))) ||\n          // font-*\n          // - fontWeight (type: ['lookup', 'number', 'any'])\n          // - fontFamily (type: ['lookup', 'generic-name', 'family-name'])\n          (/weight/i.test(section) && !(/^(number|any):/.test(value) || /^\\d+$/.test(value))) ||\n          // bg-*\n          // - backgroundPosition (type: ['lookup', ['position', { preferOnConflict: true }]])\n          // - backgroundSize (type: ['lookup', 'length', 'percentage', 'size'])\n          (/position/i.test(section) && /^(length|size):/.test(value))\n        )\n      )\n    ) {\n      // remove arbitrary type prefix — we do not need it but user may use it\n      // https://github.com/tailwindlabs/tailwindcss/blob/master/src/util/dataTypes.js\n      // url, number, percentage, length, line-width, shadow, color, image, gradient, position, family-name, lookup, any, generic-name, absolute-size, relative-size\n      return value.replace(/^[a-z-]+:/, '')\n    }\n  }\n}\n\nfunction camelize(value: string): string {\n  return value.replace(/-./g, (x) => x[1].toUpperCase())\n}\n\n/**\n * @internal\n * @param value\n * @returns\n */\nexport function normalize(value: string): string {\n  // Keep raw strings if it starts with `url(`\n  if (value.includes('url(')) {\n    return value.replace(\n      /(.*?)(url\\(.*?\\))(.*?)/g,\n      (_, before = '', url, after = '') => normalize(before) + url + normalize(after),\n    )\n  }\n\n  return (\n    value\n      // Convert `_` to ` `, except for escaped underscores `\\_`\n      .replace(\n        /(^|[^\\\\])_+/g,\n        (fullMatch, characterBefore: string) =>\n          characterBefore + ' '.repeat(fullMatch.length - characterBefore.length),\n      )\n      .replace(/\\\\_/g, '_')\n\n      // Add spaces around operators inside math functions like calc() that do not follow an operator\n      // or '('.\n      .replace(/(calc|min|max|clamp)\\(.+\\)/g, (match) =>\n        match.replace(\n          /(-?\\d*\\.?\\d(?!\\b-.+[,)](?![^+\\-/*])\\D)(?:%|[a-z]+)?|\\))([+\\-/*])/g,\n          '$1 $2 ',\n        ),\n      )\n  )\n}\n","import type {\n  BaseTheme,\n  CSSProperties,\n  MatchResult,\n  Rule,\n  RuleResolver,\n  ThemeFunction,\n  VariantResolver,\n} from './types'\nimport { DEV } from 'distilt/env'\nimport { fromMatch } from './rules'\nimport { asArray } from './utils'\n\nexport type AutocompleteItem = {\n  prefix?: string\n  suffix: string\n  theme?: { section: string; key: string }\n  modifiers?: AutocompleteModifier[] | false | null | undefined\n  color?: string | false | null | undefined\n  label?: string\n}\n\nexport type AutocompleteModifier = {\n  modifier: string\n  theme?: { section: string; key: string }\n  color?: string | false | null | undefined\n  label?: string\n}\n\nexport interface AutocompleteContext<Theme extends BaseTheme = BaseTheme> {\n  /** Allows to resolve theme values. */\n  readonly theme: ThemeFunction<Theme>\n  readonly variants: Record<string, string>\n}\n\nexport type AutocompleteProvider<Theme extends BaseTheme = BaseTheme> = (\n  match: MatchResult,\n  context: AutocompleteContext<Theme>,\n) => (string | AutocompleteItem)[]\n\nconst kAutocomplete = /* #__PURE__ */ Symbol('@twind/autocomplete')\n\n/**\n * @experimental\n * @group Configuration\n * @param resolver\n * @param autocomplete\n */\nexport function withAutocomplete<Theme extends BaseTheme = BaseTheme>(\n  resolver: RuleResolver<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false | null | undefined,\n): RuleResolver<Theme>\n\nexport function withAutocomplete<Theme extends BaseTheme = BaseTheme>(\n  resolver: VariantResolver<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false | null | undefined,\n): VariantResolver<Theme>\n\nexport function withAutocomplete<Theme extends BaseTheme = BaseTheme>(\n  rule: Rule<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false | null | undefined,\n): Rule<Theme>\n\nexport function withAutocomplete<Theme extends BaseTheme = BaseTheme>(\n  rule: Rule<Theme> | RuleResolver<Theme> | VariantResolver<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false | null | undefined,\n): Rule<Theme> | RuleResolver<Theme> | VariantResolver<Theme> {\n  if (DEV && autocomplete) {\n    if (typeof rule == 'function') {\n      return Object.defineProperty(rule, kAutocomplete, {\n        value: autocomplete,\n        configurable: true,\n      })\n    }\n\n    const [pattern, resolve, convert] = asArray(rule) as Exclude<Rule<Theme>, string | RegExp>\n\n    // [\n    //   patterns: MaybeArray<string | RegExp>,\n    //   resolve?: keyof CSSProperties | string | CSSObject | RuleResolver<Theme>,\n    //   convert?: MatchConverter<Theme>,\n    // ]\n\n    return [\n      pattern,\n      Object.defineProperty(fromMatch(resolve as keyof CSSProperties, convert), kAutocomplete, {\n        value: autocomplete,\n        configurable: true,\n      }),\n    ]\n  }\n\n  return rule\n}\n\n/**\n * @internal\n * @param resolver\n * @returns\n */\nexport function getAutocompleteProvider<Theme extends BaseTheme = BaseTheme>(\n  resolver: RuleResolver<Theme> | VariantResolver<Theme>,\n): AutocompleteProvider<Theme> | undefined {\n  return (resolver as { [kAutocomplete]?: AutocompleteProvider<Theme> })[kAutocomplete]\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n","import type {\n  BaseTheme,\n  Preset,\n  TwindConfig,\n  TwindUserConfig,\n  ExtractThemes,\n  TwindPresetConfig,\n} from './types'\n\nimport { asArray } from './utils'\n\n/**\n * @group Configuration\n * @param param0\n * @returns\n */\nexport function defineConfig<Theme = BaseTheme, Presets extends Preset<any>[] = Preset[]>({\n  presets = [] as unknown as Presets,\n  ...userConfig\n}: TwindUserConfig<Theme, Presets>): TwindConfig<BaseTheme & ExtractThemes<Theme, Presets>> {\n  // most user config values go first to have precendence over preset config\n  // only `preflight` and `theme` are applied as last preset to override all presets\n  let config: TwindConfig<BaseTheme & ExtractThemes<Theme, Presets>> = {\n    darkMode: undefined,\n    darkColor: undefined,\n    preflight: userConfig.preflight !== false && [],\n    theme: {},\n    variants: asArray(userConfig.variants),\n    rules: asArray(userConfig.rules),\n    ignorelist: asArray(userConfig.ignorelist),\n    hash: undefined,\n    stringify: (property, value) => property + ':' + value,\n    finalize: [],\n  }\n\n  for (const preset of asArray([\n    ...presets,\n    {\n      darkMode: userConfig.darkMode,\n      darkColor: userConfig.darkColor,\n      preflight: userConfig.preflight !== false && asArray(userConfig.preflight),\n      theme: userConfig.theme as TwindConfig<BaseTheme & ExtractThemes<Theme, Presets>>['theme'],\n      hash: userConfig.hash,\n      stringify: userConfig.stringify,\n      finalize: userConfig.finalize,\n    } as TwindPresetConfig<Theme>,\n  ])) {\n    const {\n      preflight,\n      darkMode = config.darkMode,\n      darkColor = config.darkColor,\n      theme,\n      variants,\n      rules,\n      ignorelist,\n      hash = config.hash,\n      stringify = config.stringify,\n      finalize,\n    } = typeof preset == 'function' ? preset(config) : (preset as TwindPresetConfig<Theme>)\n\n    config = {\n      // values defined by user or previous presets take precedence\n      preflight: config.preflight !== false &&\n        preflight !== false && [...config.preflight, ...asArray(preflight)],\n\n      darkMode,\n      darkColor,\n\n      theme: {\n        ...config.theme,\n        ...theme,\n        extend: {\n          ...config.theme.extend,\n          ...theme?.extend,\n        },\n      },\n\n      variants: [...config.variants, ...asArray(variants)],\n      rules: [...config.rules, ...asArray(rules)],\n      ignorelist: [...config.ignorelist, ...asArray(ignorelist)],\n\n      hash,\n      stringify,\n\n      finalize: [...config.finalize, ...asArray(finalize)],\n    } as TwindConfig<BaseTheme & ExtractThemes<Theme, Presets>>\n  }\n\n  return config\n}\n","import { DEV } from 'distilt/env'\n\ndeclare global {\n  interface WindowEventMap {\n    warning: CustomEvent<Warning>\n  }\n}\n\nexport type Warning = {\n  [Code in keyof WarningEventMap]: { message: string; code: Code; detail: WarningEventMap[Code] }\n}[keyof WarningEventMap]\n\nexport interface WarningEventMap {\n  TWIND_INVALID_CLASS: string\n  TWIND_INVALID_CSS: string\n}\n\nexport function warn<Code extends keyof WarningEventMap>(\n  message: string,\n  code: Code,\n  detail: WarningEventMap[Code],\n): void {\n  if (DEV) {\n    if (typeof dispatchEvent == 'function' && typeof CustomEvent === 'function') {\n      // Browser\n      const event = new CustomEvent('warning', {\n        detail: { message, code, detail },\n        cancelable: true,\n      })\n\n      dispatchEvent(event)\n\n      if (!event.defaultPrevented) {\n        console.warn(`[${code}] ${message}`, { detail })\n      }\n    } else if (typeof process == 'object' && typeof process.emitWarning == 'function') {\n      // Node.JS\n      process.emitWarning(message, { code, detail } as unknown as string)\n    } else {\n      // Fallback\n      console.warn(`[${code}] ${message}`, { detail })\n    }\n  }\n}\n","import type {\n  BaseTheme,\n  Context,\n  RuleResult,\n  TwindConfig,\n  CSSProperties,\n  MatchResult,\n  MaybeArray,\n  RuleResolver,\n  MatchConverter,\n  Rule,\n  CSSObject,\n  Variant,\n  VariantResult,\n  VariantResolver,\n  Falsey,\n} from '../types'\n\nimport { DEV } from 'distilt/env'\n\nimport { makeThemeFunction } from './theme'\nimport { asArray, escape, hash as defaultHash, identity, noop } from '../utils'\nimport { fromMatch } from '../rules'\nimport { warn } from './warn'\n\ntype ResolveFunction<Theme extends BaseTheme = BaseTheme> = (\n  className: string,\n  context: Context<Theme>,\n  isDark?: boolean,\n) => RuleResult\n\ntype VariantFunction<Theme extends BaseTheme = BaseTheme> = (\n  variant: string,\n  context: Context<Theme>,\n) => VariantResult\n\nexport function createContext<Theme extends BaseTheme = BaseTheme>({\n  theme,\n  darkMode,\n  darkColor = noop,\n  variants,\n  rules,\n  hash,\n  stringify,\n  ignorelist,\n  finalize,\n}: TwindConfig<Theme>): Context<Theme> {\n  // Used to cache resolved rule values\n  const variantCache = new Map<string, MaybeArray<string>>()\n\n  // lazy created resolve functions\n  const variantResolvers = new Map<Variant<Theme>, VariantFunction<Theme>>()\n\n  // Used to cache resolved rule values\n  const ruleCache = new Map<string, RuleResult>()\n\n  // lazy created resolve functions\n  const ruleResolvers = new Map<Rule<Theme>, ResolveFunction<Theme>>()\n\n  const ignored = createRegExpExecutor(ignorelist, (value, condition) => condition.test(value))\n\n  const reportedUnknownClasses = /* #__PURE__ */ new Set<string>()\n\n  // add dark as last variant to allow user to override it\n  // we can modify variants as it has been passed through defineConfig which already made a copy\n  variants.push([\n    'dark',\n    Array.isArray(darkMode) || darkMode == 'class'\n      ? `${asArray(darkMode)[1] || '.dark'} &`\n      : typeof darkMode == 'string' && darkMode != 'media'\n      ? darkMode // a custom selector\n      : '@media (prefers-color-scheme:dark)',\n  ])\n\n  const h =\n    typeof hash == 'function'\n      ? (value: string) => hash(value, defaultHash)\n      : hash\n      ? defaultHash\n      : identity\n\n  if (h !== identity) {\n    finalize.push((rule) => ({\n      ...rule,\n      n: rule.n && h(rule.n),\n      d: rule.d?.replace(\n        /--(tw(?:-[\\w-]+)?)\\b/g,\n        (_: string, property: string) => '--' + h(property).replace('#', ''),\n      ),\n    }))\n  }\n\n  const ctx: Context<Theme> = {\n    theme: makeThemeFunction(theme),\n\n    e: escape,\n\n    h,\n\n    s(property, value) {\n      return stringify(property, value, ctx)\n    },\n\n    d(section, key, color) {\n      return darkColor(section, key, ctx, color)\n    },\n\n    v(value) {\n      if (!variantCache.has(value)) {\n        variantCache.set(\n          value,\n          find(value, variants, variantResolvers, getVariantResolver, ctx) || '&:' + value,\n        )\n      }\n\n      return variantCache.get(value) as string\n    },\n\n    r(className, isDark) {\n      const key = JSON.stringify([className, isDark])\n\n      if (!ruleCache.has(key)) {\n        ruleCache.set(\n          key,\n          !ignored(className, ctx) &&\n            find(className, rules, ruleResolvers, getRuleResolver, ctx, isDark),\n        )\n\n        if (DEV) {\n          const rule = ruleCache.get(key)\n          if (rule == null && !reportedUnknownClasses.has(className)) {\n            reportedUnknownClasses.add(className)\n\n            warn(\n              `Unknown class ${JSON.stringify(className)} found.`,\n              'TWIND_INVALID_CLASS',\n              className,\n            )\n          }\n        }\n      }\n\n      return ruleCache.get(key)\n    },\n\n    f(rule) {\n      return finalize.reduce((rule, p) => p(rule, ctx), rule)\n    },\n  }\n\n  return ctx\n}\n\nfunction find<Value, Config, Result, Theme extends BaseTheme = BaseTheme>(\n  value: Value,\n  list: Config[],\n  cache: Map<Config, (value: Value, context: Context<Theme>, isDark?: boolean) => Result>,\n  getResolver: (\n    item: Config,\n  ) => (value: Value, context: Context<Theme>, isDark?: boolean) => Result,\n  context: Context<Theme>,\n  isDark?: boolean,\n) {\n  for (const item of list) {\n    let resolver = cache.get(item)\n\n    if (!resolver) {\n      cache.set(item, (resolver = getResolver(item)))\n    }\n\n    const resolved = resolver(value, context, isDark)\n\n    if (resolved) return resolved\n  }\n}\n\nfunction getVariantResolver<Theme extends BaseTheme = BaseTheme>(\n  variant: Variant<Theme>,\n): VariantFunction<Theme> {\n  return createVariantFunction(variant[0], variant[1])\n}\n\nfunction getRuleResolver<Theme extends BaseTheme = BaseTheme>(\n  rule: Rule<Theme>,\n): ResolveFunction<Theme> {\n  if (Array.isArray(rule)) {\n    return createResolveFunction(rule[0], rule[1], rule[2])\n  }\n\n  return createResolveFunction(rule)\n}\n\nfunction createVariantFunction<Theme extends BaseTheme = BaseTheme>(\n  patterns: MaybeArray<string | RegExp>,\n  resolve: string | VariantResolver<Theme>,\n): VariantFunction<Theme> {\n  return createResolve(patterns, typeof resolve == 'function' ? resolve : () => resolve)\n}\n\nfunction createResolveFunction<Theme extends BaseTheme = BaseTheme>(\n  patterns: MaybeArray<string | RegExp>,\n  resolve?: keyof CSSProperties | string | CSSObject | RuleResolver<Theme>,\n  convert?: MatchConverter<Theme>,\n): ResolveFunction<Theme> {\n  return createResolve(patterns, fromMatch(resolve as keyof CSSProperties, convert))\n}\n\nfunction createResolve<Result, Theme extends BaseTheme = BaseTheme>(\n  patterns: MaybeArray<string | RegExp>,\n  resolve: (match: MatchResult, context: Context<Theme>) => Result,\n): (value: string, context: Context<Theme>, isDark?: boolean) => Result | undefined {\n  return createRegExpExecutor(patterns, (value, condition, context, isDark?: boolean) => {\n    const match = condition.exec(value) as MatchResult | Falsey\n\n    if (match) {\n      // MATCH.$_ = value\n      match.$$ = value.slice(match[0].length)\n      match.dark = isDark\n\n      return resolve(match, context)\n    }\n  })\n}\n\nfunction createRegExpExecutor<Result, Theme extends BaseTheme = any>(\n  patterns: MaybeArray<string | RegExp>,\n  run: (value: string, condition: RegExp, context: Context<Theme>, isDark?: boolean) => Result,\n): (value: string, context: Context<Theme>, isDark?: boolean) => Result | undefined {\n  const conditions = asArray(patterns).map(toCondition)\n\n  return (value, context, isDark) => {\n    for (const condition of conditions) {\n      const result = run(value, condition, context, isDark)\n\n      if (result) return result\n    }\n  }\n}\n\nexport function toCondition(value: string | RegExp): RegExp {\n  // \"visible\" -> /^visible$/\n  // \"(float)-(left|right|none)\" -> /^(float)-(left|right|none)$/\n  // \"auto-rows-\" -> /^auto-rows-/\n  // \"gap(-|$)\" -> /^gap(-|$)/\n  return typeof value == 'string'\n    ? new RegExp('^' + value + (value.includes('$') || value.slice(-1) == '-' ? '' : '$'))\n    : value\n}\n","import type {\n  BaseTheme,\n  ExtractThemes,\n  Preset,\n  Twind,\n  Sheet,\n  TwindConfig,\n  TwindRule,\n  TwindUserConfig,\n} from './types'\nimport type { SortableRule } from './internal/sorted-insertion-index'\n\nimport { sortedInsertionIndex } from './internal/sorted-insertion-index'\nimport { stringify } from './internal/stringify'\nimport { createContext } from './internal/context'\nimport { translate, translateWith } from './internal/translate'\nimport { parse } from './parse'\nimport { defineConfig } from './define-config'\nimport { asArray } from './utils'\nimport { serialize } from './internal/serialize'\nimport { Layer } from './internal/precedence'\n\n/**\n * @group Runtime\n * @param config\n * @param sheet\n */\nexport function twind<Theme extends BaseTheme = BaseTheme, Target = unknown>(\n  config: TwindConfig<Theme>,\n  sheet: Sheet<Target>,\n): Twind<Theme, Target>\n\nexport function twind<\n  Theme = BaseTheme,\n  Presets extends Preset<any>[] = Preset[],\n  Target = unknown,\n>(\n  config: TwindUserConfig<Theme, Presets>,\n  sheet: Sheet<Target>,\n): Twind<BaseTheme & ExtractThemes<Theme, Presets>, Target>\n\nexport function twind(userConfig: TwindConfig<any> | TwindUserConfig<any>, sheet: Sheet): Twind {\n  const config = defineConfig(userConfig as TwindUserConfig<any>)\n\n  const context = createContext(config)\n\n  // Map of tokens to generated className\n  let cache = new Map<string, string>()\n\n  // An array of precedence by index within the sheet\n  // always sorted\n  let sortedPrecedences: SortableRule[] = []\n\n  // Cache for already inserted css rules\n  // to prevent double insertions\n  let insertedRules = new Set<string>()\n\n  sheet.resume(\n    (className) => cache.set(className, className),\n    (cssText, rule) => {\n      sheet.insert(cssText, sortedPrecedences.length, rule)\n      sortedPrecedences.push(rule)\n      insertedRules.add(cssText)\n    },\n  )\n\n  function insert(rule: TwindRule): string | undefined {\n    const finalRule = context.f(rule)\n\n    const cssText = stringify(finalRule)\n\n    // If not already inserted\n    if (cssText && !insertedRules.has(cssText)) {\n      // Mark rule as inserted\n      insertedRules.add(cssText)\n\n      // Find the correct position\n      const index = sortedInsertionIndex(sortedPrecedences, rule)\n\n      // Insert\n      sheet.insert(cssText, index, rule)\n\n      // Update sorted index\n      sortedPrecedences.splice(index, 0, rule)\n    }\n\n    return finalRule.n\n  }\n\n  return Object.defineProperties(\n    function tw(tokens) {\n      if (!cache.size) {\n        for (let preflight of asArray(config.preflight)) {\n          if (typeof preflight == 'function') {\n            preflight = preflight(context)\n          }\n\n          if (preflight) {\n            ;(typeof preflight == 'string'\n              ? translateWith('', Layer.b, parse(preflight), context, Layer.b, [], false, true)\n              : serialize(preflight, {}, context, Layer.b)\n            ).forEach(insert)\n          }\n        }\n      }\n\n      tokens = '' + tokens\n\n      let className = cache.get(tokens)\n\n      if (!className) {\n        const classNames = new Set<string | undefined>()\n\n        for (const rule of translate(parse(tokens), context)) {\n          classNames.add(rule.c).add(insert(rule))\n        }\n\n        className = [...classNames].filter(Boolean).join(' ')\n\n        // Remember the generated class name\n        cache.set(tokens, className).set(className, className)\n      }\n\n      return className\n    } as Twind,\n    Object.getOwnPropertyDescriptors({\n      get target() {\n        return sheet.target\n      },\n\n      theme: context.theme,\n\n      config,\n\n      snapshot() {\n        const restoreSheet = sheet.snapshot()\n        const insertedRules$ = new Set(insertedRules)\n        const cache$ = new Map(cache)\n        const sortedPrecedences$ = [...sortedPrecedences]\n\n        return () => {\n          restoreSheet()\n\n          insertedRules = insertedRules$\n          cache = cache$\n          sortedPrecedences = sortedPrecedences$\n        }\n      },\n\n      clear() {\n        sheet.clear()\n\n        insertedRules = new Set()\n        cache = new Map()\n        sortedPrecedences = []\n      },\n\n      destroy() {\n        this.clear()\n        sheet.destroy()\n      },\n    }),\n  )\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport type {\n  BaseTheme,\n  MaybeColorValue,\n  ThemeConfig,\n  ThemeFunction,\n  ThemeSectionResolverContext,\n} from '../types'\nimport { toColorValue } from '../colors'\nimport { resolveThemeFunction } from './serialize'\n\nexport function makeThemeFunction<Theme extends BaseTheme = BaseTheme>({\n  extend = {},\n  ...base\n}: ThemeConfig<Theme>): ThemeFunction<Theme> {\n  const resolved: Record<string, any> = {}\n\n  const resolveContext: ThemeSectionResolverContext<Theme> = {\n    get colors() {\n      return theme('colors')\n    },\n\n    theme,\n\n    // Stub implementation as negated values are automatically infered and do _not_ need to be in the theme\n    negative() {\n      return {}\n    },\n\n    breakpoints(screens) {\n      const breakpoints = {} as Record<string, string>\n\n      for (const key in screens) {\n        if (typeof screens[key] == 'string') {\n          breakpoints['screen-' + key] = screens[key] as string\n        }\n      }\n\n      return breakpoints\n    },\n  }\n\n  return theme as ThemeFunction<Theme>\n\n  function theme(\n    sectionKey?: string,\n    key?: string,\n    defaultValue?: any,\n    opacityValue?: string | undefined,\n  ): any {\n    if (sectionKey) {\n      ;({ 1: sectionKey, 2: opacityValue } =\n        // eslint-disable-next-line no-sparse-arrays\n        /^(\\S+?)(?:\\s*\\/\\s*([^/]+))?$/.exec(sectionKey) || ([, sectionKey] as [undefined, string]))\n\n      if (/[.[]/.test(sectionKey)) {\n        const path: string[] = []\n\n        // dotted deep access: colors.gray.500 or spacing[2.5]\n        sectionKey.replace(\n          /\\[([^\\]]+)\\]|([^.[]+)/g,\n          (_, $1, $2 = $1) => path.push($2) as unknown as string,\n        )\n\n        sectionKey = path.shift() as string\n        defaultValue = key\n        key = path.join('-')\n      }\n\n      const section =\n        resolved[sectionKey] ||\n        // two-step deref to allow extend section to reference base section\n        Object.assign(\n          Object.assign(\n            // Make sure to not get into recursive calls\n            (resolved[sectionKey] = {}),\n            deref(base, sectionKey),\n          ),\n          deref(extend, sectionKey),\n        )\n\n      if (key == null) return section\n\n      key ||= 'DEFAULT'\n\n      const value =\n        section[key] ?? key.split('-').reduce((obj, prop) => obj?.[prop], section) ?? defaultValue\n\n      return opacityValue\n        ? toColorValue(value, { opacityValue: resolveThemeFunction(opacityValue, theme) })\n        : value\n    }\n\n    // Collect the whole theme\n    const result = {} as Record<string, any>\n\n    for (const section of [...Object.keys(base), ...Object.keys(extend)]) {\n      result[section] = theme(section)\n    }\n\n    return result\n  }\n\n  function deref(source: any, section: string): any {\n    let value = source[section]\n\n    if (typeof value == 'function') {\n      value = value(resolveContext)\n    }\n\n    if (value && /color|fill|stroke/i.test(section)) {\n      return flattenColorPalette(value)\n    }\n\n    return value\n  }\n}\n\nfunction flattenColorPalette(colors: Record<string, MaybeColorValue>, path: string[] = []): any {\n  const flattend: Record<string, MaybeColorValue> = {}\n\n  for (const key in colors) {\n    const value = colors[key]\n\n    let keyPath = [...path, key]\n\n    flattend[keyPath.join('-')] = value\n\n    if (key == 'DEFAULT') {\n      keyPath = path\n      flattend[path.join('-')] = value\n    }\n\n    if (typeof value == 'object') {\n      Object.assign(flattend, flattenColorPalette(value, keyPath))\n    }\n  }\n\n  return flattend\n}\n","/**\n * Determines if two class name strings contain the same classes.\n *\n * @param a first class names\n * @param b second class names\n * @returns are they different\n */\nexport function changed(a: string, b: string): boolean {\n  return a != b && '' + a.split(' ').sort() != '' + b.split(' ').sort()\n}\n","import type { BaseTheme, Twind } from './types'\n\nimport { changed } from './internal/changed'\nimport { tw as tw$ } from './runtime'\n\nexport interface TwindMutationObserver {\n  observe: (target: Node) => void\n  disconnect: () => void\n}\n\n/**\n * @group Runtime\n * @param tw\n * @param target\n * @returns\n * @internal\n */\nexport function mo<Theme extends BaseTheme = BaseTheme, Target = unknown>(\n  tw: Twind<Theme, Target>,\n): TwindMutationObserver {\n  const observer = new MutationObserver(handleMutationRecords)\n\n  return {\n    observe(target) {\n      observer.observe(target, {\n        attributeFilter: ['class'],\n        subtree: true,\n        childList: true,\n      })\n\n      // handle class attribute on target\n      handleClassAttributeChange(target as Element)\n\n      // handle children of target\n      handleMutationRecords([{ target, type: '' }])\n    },\n    disconnect() {\n      observer.disconnect()\n    },\n  }\n\n  function handleMutationRecords(records: MinimalMutationRecord[]): void {\n    for (const { type, target } of records) {\n      if (type[0] == 'a' /* attribute */) {\n        // class attribute has been changed\n        handleClassAttributeChange(target as Element)\n      } else {\n        /* childList */\n        // some nodes have been added — find all with a class attribute\n        for (const el of (target as Element).querySelectorAll('[class]')) {\n          handleClassAttributeChange(el)\n        }\n      }\n    }\n\n    // remove pending mutations — these are triggered by updating the class attributes\n    observer.takeRecords()\n    // XXX maybe we need to handle all pending mutations\n    // observer.takeRecords().forEach(handleMutation)\n  }\n\n  function handleClassAttributeChange(target: Element): void {\n    // Not using target.classList.value (not supported in all browsers) or target.class (this is an SVGAnimatedString for svg)\n    // safe guard access to getAttribute because ShadowRoot does not have attribute but child nodes\n    const tokens = target.getAttribute?.('class')\n\n    let className: string\n\n    // try do keep classNames unmodified\n    if (tokens && changed(tokens, (className = tw(tokens)))) {\n      // Not using `target.className = ...` as that is read-only for SVGElements\n      target.setAttribute('class', className)\n    }\n  }\n}\n\n/**\n * @group Runtime\n * @param tw\n * @param target\n * @returns\n */\nexport function observe<Theme extends BaseTheme = BaseTheme, Target = unknown>(\n  tw: Twind<Theme, Target> = tw$ as unknown as Twind<Theme, Target>,\n  target: false | Node = typeof document != 'undefined' && document.documentElement,\n): Twind<Theme, Target> {\n  if (target) {\n    const observer = mo(tw)\n\n    observer.observe(target)\n\n    // monkey patch tw.destroy to disconnect this observer\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { destroy } = tw\n    tw.destroy = () => {\n      observer.disconnect()\n      destroy.call(tw)\n    }\n  }\n\n  return tw\n}\n\n/**\n * Simplified MutationRecord which allows us to pass an\n * ArrayLike (compatible with Array and NodeList) `addedNodes` and\n * omit other properties we are not interested in.\n */\ninterface MinimalMutationRecord {\n  readonly type: string\n  readonly target: Node\n}\n","import { warn } from './internal/warn'\nimport type { Sheet, SheetRule } from './types'\nimport { asArray, noop } from './utils'\n\nfunction getStyleElement(selector: string | null | undefined | false): HTMLStyleElement {\n  let style = document.querySelector(selector || 'style[data-twind=\"\"]')\n\n  if (!style || style.tagName != 'STYLE') {\n    style = document.createElement('style')\n    document.head.prepend(style)\n  }\n\n  ;(style as HTMLElement).dataset.twind = 'claimed'\n\n  return style as HTMLStyleElement\n}\n\n/**\n * @group Sheets\n * @param element\n * @returns\n */\nexport function cssom(\n  element?: CSSStyleSheet | HTMLStyleElement | string | null | false,\n): Sheet<CSSStyleSheet> {\n  const target = (element as CSSStyleSheet)?.cssRules\n    ? (element as CSSStyleSheet)\n    : ((element && typeof element != 'string'\n        ? (element as HTMLStyleElement)\n        : getStyleElement(element)\n      ).sheet as CSSStyleSheet)\n\n  return {\n    target,\n\n    snapshot() {\n      // collect current rules\n      const rules = Array.from(target.cssRules, (rule) => rule.cssText)\n\n      return () => {\n        // remove all existing rules\n        this.clear()\n\n        // add all snapshot rules back\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        rules.forEach(this.insert as (cssText: string, index: number) => void)\n      }\n    },\n\n    clear() {\n      // remove all added rules\n      for (let index = target.cssRules.length; index--; ) {\n        target.deleteRule(index)\n      }\n    },\n\n    destroy() {\n      target.ownerNode?.remove()\n    },\n\n    insert(cssText, index) {\n      try {\n        // Insert\n        target.insertRule(cssText, index)\n      } catch (error) {\n        // Empty rule to keep index valid — not using `*{}` as that would show up in all rules (DX)\n        target.insertRule(':root{}', index)\n\n        // Some thrown errors are because of specific pseudo classes\n        // lets filter them to prevent unnecessary warnings\n        // ::-moz-focus-inner\n        // :-moz-focusring\n        if (!/:-[mwo]/.test(cssText)) {\n          warn((error as Error).message, 'TWIND_INVALID_CSS', cssText)\n        }\n      }\n    },\n\n    resume: noop,\n  }\n}\n\n/**\n * @group Sheets\n * @param element\n * @returns\n */\nexport function dom(element?: HTMLStyleElement | string | null | false): Sheet<HTMLStyleElement> {\n  const target = element && typeof element != 'string' ? element : getStyleElement(element)\n\n  return {\n    target,\n\n    snapshot() {\n      // collect current rules\n      const rules = Array.from(target.childNodes, (node) => node.textContent as string)\n\n      return () => {\n        // remove all existing rules\n        this.clear()\n\n        // add all snapshot rules back\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        rules.forEach(this.insert as (cssText: string, index: number) => void)\n      }\n    },\n\n    clear() {\n      target.textContent = ''\n    },\n\n    destroy() {\n      target.remove()\n    },\n\n    insert(cssText, index) {\n      target.insertBefore(document.createTextNode(cssText), target.childNodes[index] || null)\n    },\n\n    resume: noop,\n  }\n}\n\n/**\n * @group Sheets\n * @param includeResumeData\n * @returns\n */\nexport function virtual(includeResumeData?: boolean): Sheet<string[]> {\n  const target: string[] = []\n\n  return {\n    target,\n\n    snapshot() {\n      // collect current rules\n      const rules = [...target]\n\n      return () => {\n        // remove all existing rules and add all snapshot rules back\n        target.splice(0, target.length, ...rules)\n      }\n    },\n\n    clear() {\n      target.length = 0\n    },\n\n    destroy() {\n      this.clear()\n    },\n\n    insert(css, index, rule) {\n      target.splice(\n        index,\n        0,\n        includeResumeData\n          ? `/*!${rule.p.toString(36)},${(rule.o * 2).toString(36)}${\n              rule.n ? ',' + rule.n : ''\n            }*/${css}`\n          : css,\n      )\n    },\n\n    resume: noop,\n  }\n}\n\n/**\n * Returns a sheet useable in the current environment.\n *\n * @group Sheets\n * @param useDOMSheet usually something like `process.env.NODE_ENV != 'production'` or `import.meta.env.DEV` (default: browser={@link cssom}, server={@link virtual})\n * @param disableResume to not include or use resume data\n * @returns a sheet to use\n */\nexport function getSheet(\n  useDOMSheet?: boolean,\n  disableResume?: boolean,\n): Sheet<string[] | HTMLStyleElement | CSSStyleSheet> {\n  const sheet =\n    typeof document == 'undefined' ? virtual(!disableResume) : useDOMSheet ? dom() : cssom()\n\n  if (!disableResume) sheet.resume = resume\n\n  return sheet\n}\n\n/**\n * @group Sheets\n * @param target\n * @returns\n */\nexport function stringify(target: unknown): string {\n  // string[] | CSSStyleSheet | HTMLStyleElement\n  return (\n    // prefer the raw text content of a CSSStyleSheet as it may include the resume data\n    ((target as CSSStyleSheet).ownerNode || (target as HTMLStyleElement)).textContent ||\n    ((target as CSSStyleSheet).cssRules\n      ? Array.from((target as CSSStyleSheet).cssRules, (rule) => rule.cssText)\n      : asArray(target)\n    ).join('')\n  )\n}\n\nfunction resume(\n  this: Sheet,\n  addClassName: (className: string) => void,\n  insert: (cssText: string, rule: SheetRule) => void,\n) {\n  // hydration from SSR sheet\n  const textContent = stringify(this.target)\n  const RE = /\\/\\*!([\\da-z]+),([\\da-z]+)(?:,(.+?))?\\*\\//g\n\n  // only if this is a hydratable sheet\n  if (RE.test(textContent)) {\n    // RE has global flag — reset index to get the first match as well\n    RE.lastIndex = 0\n\n    // 1. start with a fresh sheet\n    this.clear()\n\n    // 2. add all existing class attributes to the token/className cache\n    if (typeof document != 'undefined') {\n      for (const el of document.querySelectorAll('[class]')) {\n        addClassName(el.getAttribute('class') as string)\n      }\n    }\n\n    // 3. parse SSR styles\n    let lastMatch: RegExpExecArray | null | undefined\n\n    while (\n      (function commit(match?: RegExpExecArray | null) {\n        if (lastMatch) {\n          insert(\n            // grep the cssText from the previous match end up to this match start\n            textContent.slice(lastMatch.index + lastMatch[0].length, match?.index),\n            {\n              p: parseInt(lastMatch[1], 36),\n              o: parseInt(lastMatch[2], 36) / 2,\n              n: lastMatch[3],\n            },\n          )\n        }\n\n        return (lastMatch = match)\n      })(RE.exec(textContent))\n    ) {\n      /* no-op */\n    }\n  }\n}\n","import type { CSSObject, CSSValue, StringLike } from './types'\n\nimport { escape, hash } from './utils'\nimport { tw as tw$ } from './runtime'\nimport { astish } from './internal/astish'\nimport { css } from './css'\n\nexport interface KeyframesFunction {\n  (style: CSSObject | string): StringLike\n\n  (strings: TemplateStringsArray, ...interpolations: readonly CSSValue[]): StringLike\n\n  bind(thisArg?: ((tokens: string) => string) | undefined | void): Keyframes & {\n    [label: string]: KeyframesFunction\n  }\n\n  call(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    style: CSSObject | string,\n  ): StringLike\n\n  call(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    strings: TemplateStringsArray,\n    ...interpolations: readonly CSSValue[]\n  ): StringLike\n\n  apply(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    args: [CSSObject | string],\n  ): StringLike\n\n  apply(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    args:\n      | [CSSObject | string]\n      | [strings: TemplateStringsArray, ...interpolations: readonly CSSValue[]],\n  ): StringLike\n}\n\nexport type Keyframes = KeyframesFunction & {\n  [label: string]: KeyframesFunction\n}\n\n/**\n * **Note**: The styles will be injected on first use.\n *\n * @group Style Injectors\n */\nexport const keyframes = /* #__PURE__ */ bind()\n\nfunction bind(thisArg: ((tokens: string) => string) | undefined | void): Keyframes {\n  return new Proxy(\n    function keyframes(\n      strings: CSSObject | string | TemplateStringsArray,\n      ...interpolations: readonly CSSValue[]\n    ): StringLike {\n      return keyframes$(thisArg, '', strings, interpolations)\n    } as Keyframes,\n    {\n      get(target, name) {\n        if (name === 'bind') {\n          return bind\n        }\n\n        if (name in target) return target[name as string]\n\n        return function namedKeyframes(\n          strings: CSSObject | string | TemplateStringsArray,\n          ...interpolations: readonly CSSValue[]\n        ): StringLike {\n          return keyframes$(thisArg, name as string, strings, interpolations)\n        }\n      },\n    },\n  )\n}\n\nfunction keyframes$(\n  thisArg: ((tokens: string) => string) | undefined | void,\n  name: string,\n  strings: CSSObject | string | TemplateStringsArray,\n  interpolations: readonly CSSValue[],\n): StringLike {\n  // lazy inject keyframes\n  return {\n    toString() {\n      // lazy access tw\n      const tw = typeof thisArg == 'function' ? thisArg : tw$\n\n      const ast = astish(strings, interpolations)\n\n      const keyframeName = escape(name + hash(JSON.stringify([name, ast])))\n\n      tw(\n        css({\n          [`@keyframes ${keyframeName}`]: astish(strings, interpolations),\n        } as unknown as CSSObject),\n      )\n\n      return keyframeName\n    },\n  } as StringLike\n}\n","import type { Twind } from './types'\nimport { changed } from './internal/changed'\nimport { tw as tw$ } from './runtime'\nimport { identity } from './utils'\nimport { stringify } from './sheets'\nimport { fixClassList, parseHTML } from './internal/parse-html'\n\n/**\n * Options for {@link inline}\n */\nexport interface InlineOptions {\n  /**\n   * {@link Twind} instance to use (default: {@link @twind/core.tw})\n   */\n  tw?: Twind<any, any>\n\n  /**\n   * Allows to minify the resulting CSS.\n   */\n  minify?: InlineMinify\n}\n\nexport interface InlineMinify {\n  /**\n   * Called to minify the CSS.\n   *\n   * @param css the CSS to minify\n   * @param html the HTML that will be used — allows to only include above-the-fold CSS\n   * @return the resulting CSS\n   */\n  (css: string, html: string): string\n}\n/**\n * Used for static HTML processing (usually to provide SSR support for your javascript-powered web apps)\n *\n * 1. parse the markup and process element classes with the provided Twind instance\n * 2. update the class attributes _if_ necessary\n * 3. inject a style element with the CSS as last element into the head\n * 4. return the HTML string with the final element classes\n *\n * ```js\n * import { inline } from '@twind/core'\n *\n * function render() {\n *   return inline(renderApp())\n * }\n * ```\n *\n * Minify CSS with [@parcel/css](https://www.npmjs.com/package/@parcel/css):\n *\n * ```js\n * import { inline } from '@twind/core'\n * import { transform } from '@parcel/css'\n *\n * function render() {\n *   return inline(renderApp(), { minify: (css) => transform({ filename: 'twind.css', code: Buffer.from(css), minify: true }) })\n * }\n * ```\n *\n * You can provide your own Twind instance:\n *\n * ```js\n * import { inline } from '@twind/core'\n * import { tw } from './custom/twind/instance'\n *\n * function render() {\n *   return inline(renderApp(), { tw })\n * }\n * ```\n *\n * @group Static Extraction\n * @param markup HTML to process\n * @param options to customize the processing\n * @returns the resulting HTML\n */\nexport function inline(markup: string, options: InlineOptions['tw'] | InlineOptions = {}): string {\n  const { tw = tw$, minify = identity } =\n    typeof options == 'function' ? ({ tw: options } as InlineOptions) : options\n\n  const { html, css } = extract(markup, tw)\n\n  // inject as last element into the head\n  return html.replace('</head>', `<style data-twind>${minify(css, html)}</style></head>`)\n}\n\n/**\n * Result of {@link extract}\n */\nexport interface ExtractResult {\n  /** The possibly modified HTML */\n  html: string\n\n  /** The generated CSS */\n  css: string\n}\n\n/**\n * Used for static HTML processing (usually to provide SSR support for your javascript-powered web apps)\n *\n * **Note**: Consider using {@link inline} instead.\n *\n * 1. parse the markup and process element classes with the provided Twind instance\n * 2. update the class attributes _if_ necessary\n * 3. return the HTML string with the final element classes\n *\n * ```js\n * import { extract } from '@twind/core'\n *\n * function render() {\n *   const { html, css } = extract(renderApp())\n *\n *   // inject as last element into the head\n *   return html.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * You can provide your own Twind instance:\n *\n * ```js\n * import { extract } from '@twind/core'\n * import { tw } from './custom/twind/instance'\n *\n * function render() {\n *   const { html, css } = extract(renderApp(), tw)\n *\n *   // inject as last element into the head\n *   return html.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * @group Static Extraction\n * @param markup HTML to process\n * @param tw a {@link Twind} instance (default: twind managed tw)\n * @returns the possibly modified html and css\n */\nexport function extract(html: string, tw: Twind<any, any> = tw$): ExtractResult {\n  const restore = tw.snapshot()\n\n  const result = { html: consume(html, tw), css: stringify(tw.target) }\n\n  restore()\n\n  return result\n}\n\n/**\n * Used for static HTML processing (usually to provide SSR support for your javascript-powered web apps)\n *\n * **Note**: Consider using {@link inline} or {@link extract} instead.\n *\n * 1. parse the markup and process element classes with the provided Twind instance\n * 2. update the class attributes _if_ necessary\n * 3. return the HTML string with the final element classes\n *\n * ```js\n * import { consume, stringify, tw } from '@twind/core'\n *\n * function render() {\n *   const html = renderApp()\n *\n *   // remember global classes\n *   const restore = tw.snapshot()\n *\n *   // generated markup\n *   const markup = consume(html)\n *\n *   // create CSS\n *   const css = stringify(tw.target)\n *\n *   // restore global classes\n *   restore()\n *\n *   // inject as last element into the head\n *   return markup.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * You can provide your own Twind instance:\n *\n * ```js\n * import { consume, stringify } from '@twind/core'\n * import { tw } from './custom/twind/instance'\n *\n * function render() {\n *   const html = renderApp()\n *\n *   // remember global classes\n *   const restore = snapshot(tw.target)\n *\n *   // generated markup\n *   const markup = consume(html)\n *\n *   // restore global classes\n *   restore()\n *\n *   // create CSS\n *   const css = stringify(tw.target)\n *\n *   // inject as last element into the head\n *   return markup.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * @group Static Extraction\n * @param markup HTML to process\n * @param tw a {@link Twind} instance\n * @returns possibly modified HTML\n */\nexport function consume(markup: string, tw: (className: string) => string = tw$): string {\n  let result = ''\n  let lastChunkStart = 0\n\n  parseHTML(markup, (startIndex, endIndex, quote) => {\n    const value = markup.slice(startIndex, endIndex)\n    const className = tw(fixClassList(value, quote))\n\n    // We only need to shift things around if we need to actually change the markup\n    if (changed(value, className)) {\n      // We've hit another mutation boundary\n\n      // Add quote if necessary\n      quote = quote ? '' : '\"'\n\n      result += markup.slice(lastChunkStart, startIndex) + quote + className + quote\n\n      lastChunkStart = endIndex\n    }\n  })\n\n  // Combine the current result with the tail-end of the input\n  return result + markup.slice(lastChunkStart, markup.length)\n}\n","// For now we are using a simple parser adapted from htm (https://github.com/developit/htm/blob/master/src/build.mjs)\n// If we find any issues we can switch to something more sophisticated like\n// - https://github.com/acrazing/html5parser\n// - https://github.com/fb55/htmlparser2\n\nconst MODE_SLASH = 0\nconst MODE_TEXT = 1\nconst MODE_WHITESPACE = 2\nconst MODE_TAGNAME = 3\nconst MODE_COMMENT = 4\nconst MODE_ATTRIBUTE = 5\n\nexport function parseHTML(\n  markup: string,\n  onClass: (startIndex: number, endIndex: number, quote: string) => false | unknown,\n): void {\n  let mode = MODE_TEXT\n  let startIndex = 0\n  let quote = ''\n  let attributeName = ''\n\n  const commit = (currentIndex: number): void => {\n    if (mode == MODE_ATTRIBUTE && attributeName == 'class') {\n      if (onClass(startIndex, currentIndex, quote) === false) {\n        markup = ''\n      }\n    }\n  }\n\n  for (let position = 0; position < markup.length; position++) {\n    const char = markup[position]\n\n    if (mode == MODE_TEXT) {\n      if (char == '<') {\n        mode = markup.substr(position + 1, 3) == '!--' ? MODE_COMMENT : MODE_TAGNAME\n      }\n    } else if (mode == MODE_COMMENT) {\n      // Ignore everything until the last three characters are '-', '-' and '>'\n      if (char == '>' && markup.slice(position - 2, position) == '--') {\n        mode = MODE_TEXT\n      }\n    } else if (quote) {\n      if (char == quote && markup[position - 1] != '\\\\') {\n        commit(position)\n        mode = MODE_WHITESPACE\n        quote = ''\n      }\n    } else if (char == '\"' || char == \"'\") {\n      quote = char\n      startIndex += 1\n    } else if (char == '>') {\n      commit(position)\n      mode = MODE_TEXT\n    } else if (!mode) {\n      // MODE_SLASH\n      // Ignore everything until the tag ends\n    } else if (char == '=') {\n      attributeName = markup.slice(startIndex, position)\n      mode = MODE_ATTRIBUTE\n      startIndex = position + 1\n    } else if (char == '/' && (mode < MODE_ATTRIBUTE || markup[position + 1] == '>')) {\n      commit(position)\n      mode = MODE_SLASH\n    } else if (/\\s/.test(char)) {\n      // <a class=font-bold>\n      commit(position)\n      mode = MODE_WHITESPACE\n      startIndex = position + 1\n    }\n  }\n}\n\nexport function fixClassList(value: string, quote: string): string {\n  // const value = markup.slice(startIndex, endIndex)\n\n  // Lets handle some special react cases:\n  //   * arbitrary values for `content-`\n  //     <span class=\"before:content-[&#x27;asas&#x27;]\"></span>\n  //     <span class=\"before:content-[&quot;asas&quot;]\"></span>\n  //\n  //   * self-referenced groups\n  //     <span class=\"flex(&amp; col)\"></span>\n  //\n  //     If a class name contains `'`, `\"`, or `&` those will be replaced with HTML entities\n  //     To fix this we replace those for depending on the actual symbol that is being used\n  //     As an alternative we could always escape class names direcly in twind like react does\n  //     but this works for now\n  return (\n    quote == `\"`\n      ? // `'` -> &#39; &apos; &#x27;\n        value.replace(/(=|\\[)(?:&#39;|&apos;|&#x27;)|(?:&#39;|&apos;|&#x27;)(])/g, `$1'$2`)\n      : quote == `'`\n      ? // `\"` -> &#34; &quot; &#x22;\n        value.replace(/(=|\\[)(?:&#34;|&quot;|&#x22;)|(?:&#34;|&quot;|&#x22;)(])/g, `$1\"$2`)\n      : value\n  ).replace(/(&#38;|&amp;|&#x26;)/g, '&')\n}\n","// Based on https://github.com/modulz/stitches\n// License MIT\n// eslint-disable @typescript-eslint/ban-types\n\nimport type { Falsey, MatchResult } from './types'\nimport { parse } from './parse'\nimport { Layer } from './internal/precedence'\n\nimport { escape, hash } from './utils'\nimport { define } from './internal/define'\n\nexport type StrictMorphVariant<T> = T extends number\n  ? `${T}` | T\n  : T extends 'true'\n  ? true | T\n  : T extends 'false'\n  ? false | T\n  : T\n\nexport type MorphVariant<T> = T extends number\n  ? `${T}` | T\n  : T extends 'true'\n  ? boolean | T\n  : T extends 'false'\n  ? boolean | T\n  : T extends `${number}`\n  ? number | T\n  : T\n\nexport type StyleTokenValue = string | Falsey\n\n// No support for thunks yet — these may use props that are not in the generated class name\n// and may therefore override each other\n\nexport type StyleToken = StyleTokenValue\n\n/**\n * Allows to extract the supported properties of a style function.\n *\n * Here is an example for `react`\n * ```js\n * import { HTMLAttributes } from \"react\";\n * import { style, PropsOf } from \"@twind/core\";\n * const button = style({ ... })\n * type ButtonProps = PropsOf<typeof button>\n * export const Button = (props: ButtonProps & HTMLAttributes<HTMLButtonElement>) => {\n *   return <button className={style(props)} {...rest} />\n * }\n * ```\n */\nexport type PropsOf<T> = T extends Style<infer Variants>\n  ? {\n      [key in keyof Variants]: MorphVariant<keyof Variants[key]>\n    }\n  : never\n\nexport type DefaultVariants<Variants> = {\n  [key in keyof Variants]?:\n    | StrictMorphVariant<keyof Variants[key]>\n    | (Record<string, StrictMorphVariant<keyof Variants[key]>> & {\n        /** initial breakpoint */\n        _?: StrictMorphVariant<keyof Variants[key]>\n      })\n}\n\nexport type VariantsProps<Variants> = {\n  [key in keyof Variants]?:\n    | MorphVariant<keyof Variants[key]>\n    // TODO possible breakpoint from theme\n    | (Record<string, MorphVariant<keyof Variants[key]>> & {\n        /** initial breakpoint */\n        _?: MorphVariant<keyof Variants[key]>\n      })\n}\n\nexport type When<Variants> = {\n  [key in keyof Variants]?: StrictMorphVariant<keyof Variants[key]>\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface StyleConfig<Variants, BaseVariants = {}> {\n  /** Used as prefix */\n  label?: string\n  base?: StyleToken\n  props?: Variants & {\n    [variant in keyof BaseVariants]?: {\n      [key in keyof BaseVariants[variant]]?: StyleToken\n    }\n  }\n  defaults?: DefaultVariants<Variants & BaseVariants>\n  when?: [match: When<Variants & BaseVariants>, then: StyleToken][]\n}\n\nexport interface StyleFunction {\n  <Variants>(config?: StyleConfig<Variants>): Style<Variants>\n  <Variants, BaseVariants>(\n    base: Style<BaseVariants>,\n    config?: StyleConfig<Variants, BaseVariants>,\n  ): Style<Variants & BaseVariants>\n}\n\nexport type StyleProps<Variants> = VariantsProps<Variants>\n\nexport interface Style<Variants> {\n  /**\n   * CSS Class associated with the current component.\n   *\n   * ```jsx\n   * const button = style({\n   *   base: css({\n   *     color: \"DarkSlateGray\"\n   *   })\n   * })\n   *\n   * <div className={button()} />\n   * ```\n   * <br />\n   */\n  (props?: StyleProps<Variants>): string\n\n  /**\n   * To be used as resolve within config.rules:\n   *\n   * ```js\n   * {\n   *   rules: [\n   *     // label?prop=value&other=propValue\n   *     // if the style has base eg no prop is required\n   *     ['label(\\\\?.+)?', style( /* ... *\\/ )],\n   *\n   *     // if the style requires at least one prop\n   *     ['label\\\\?(.+)', style( /* ... *\\/ )],\n   *   ]\n   * }\n   * ```\n   *\n   * The first group is used to extract the props using {@link !URLSearchParams | URLSearchParams}.\n   */\n  (match: MatchResult): string\n\n  readonly defaults: StyleProps<Variants>\n\n  /**\n   * CSS Class associated with the current component.\n   *\n   * ```js\n   * const button = style({\n   *   base: css`\n   *     color: \"DarkSlateGray\"\n   *   `\n   * })\n   *\n   * <div className={button.className} />\n   * ```\n   */\n  readonly className: string\n\n  /**\n   * CSS Selector associated with the current component.\n   *\n   * ```js\n   * const button = style({\n   *   base: css({\n   *     color: \"DarkSlateGray\"\n   *   })\n   * })\n   *\n   * const Card = styled({\n   *   base: css`\n   *     & ${button.selector} {\n   *       boxShadow: \"0 0 0 5px\"\n   *     }\n   *   `\n   * })\n   * ```\n   */\n  readonly selector: string\n}\n\n/**\n * @group Class Name Generators\n */\nexport const style = (<Variants, BaseVariants>(\n  base: Style<BaseVariants> | StyleConfig<Variants>,\n  config?: StyleConfig<Variants, BaseVariants>,\n): Style<Variants & BaseVariants> =>\n  (typeof base == 'function' ? createStyle(config, base) : createStyle(base)) as Style<\n    Variants & BaseVariants\n  > &\n    string) as StyleFunction\n\nfunction createStyle<Variants, BaseVariants>(\n  config: StyleConfig<Variants, BaseVariants> = {},\n  parent?: Style<BaseVariants>,\n): Style<Variants & BaseVariants> {\n  const { label = 'style', base, props: variants = {}, defaults: localDefaults, when = [] } = config\n\n  const defaults = { ...parent?.defaults, ...localDefaults }\n\n  const id = hash(JSON.stringify([label, parent?.className, base, variants, defaults, when]))\n\n  // Layers:\n  // component: 0b010\n  // props: 0b011\n  // when: 0b100\n\n  const className = register('', base || '', Layer.c)\n\n  function register(mq: string, token: string, layer: number): string {\n    return define(\n      // `<name>#<id>` or `<parent>~<name>#<id>`\n      ((parent ? parent.className.replace(/#.+$/, '~') : '') + label + mq + id).replace(\n        /[: ,()[\\]]/,\n        '',\n      ),\n      layer,\n      token && parse(token),\n    )\n  }\n\n  return Object.defineProperties(\n    function style(allProps) {\n      let isWithinRuleDeclaration\n\n      if (Array.isArray(allProps)) {\n        isWithinRuleDeclaration = true\n        allProps = Object.fromEntries(new URLSearchParams(allProps[1]).entries()) as VariantsProps<\n          Variants & BaseVariants\n        >\n      }\n\n      const props = { ...defaults, ...allProps }\n\n      // If this style is used within config.rules we do NOT include the marker classes\n      let classNames = isWithinRuleDeclaration\n        ? ''\n        : (parent ? parent(props) + ' ' : '') + className\n\n      let token: StyleToken\n\n      for (const variantKey in variants) {\n        const variant = (variants as Record<string, Record<string, StyleToken>>)[variantKey]\n        const propsValue = (props as Record<string, unknown>)[variantKey]\n\n        if (propsValue === Object(propsValue)) {\n          // inline responsive breakpoints\n          let mq = ''\n          token = ''\n\n          for (const breakpoint in propsValue as Record<string, string>) {\n            const breakpointToken = variant[(propsValue as Record<string, string>)[breakpoint]]\n\n            if (breakpointToken) {\n              mq += '@' + breakpoint + '-' + (propsValue as Record<string, string>)[breakpoint]\n\n              token +=\n                (token && ' ') +\n                (breakpoint == '_' ? breakpointToken : breakpoint + ':(' + breakpointToken + ')')\n            }\n          }\n\n          if (token) {\n            classNames +=\n              ' ' + register('--' + variantKey + '-' + mq, token, 0b011 << 27 /* Shifts.layer */)\n          }\n        } else if ((token = variant[propsValue as string])) {\n          classNames +=\n            ' ' +\n            register(\n              '--' + variantKey + '-' + (propsValue as string),\n              token,\n              0b011 << 27 /* Shifts.layer */,\n            )\n        }\n      }\n\n      when.forEach((match, index) => {\n        let mq = ''\n\n        for (const variantKey in match[0]) {\n          const propsValue = (props as Record<string, unknown>)[variantKey]\n\n          // TODO we ignore inline responsive breakpoints for now — what be the result??\n          if (\n            propsValue !== Object(propsValue) &&\n            '' + propsValue == '' + (match[0] as Record<string, string>)[variantKey]\n          ) {\n            mq += (mq && '_') + variantKey + '-' + (propsValue as string)\n          } else {\n            mq = ''\n            break\n          }\n        }\n\n        if (mq && (token = match[1])) {\n          classNames +=\n            ' ' + register('-' + index + '--' + mq, token, 0b100 << 27 /* Shifts.layer */)\n        }\n      })\n\n      return classNames\n    } as Style<Variants & BaseVariants>,\n    Object.getOwnPropertyDescriptors({\n      className,\n      defaults,\n      selector: '.' + escape(className),\n    }),\n  )\n}\n","import type { Class } from './types'\nimport { interpolate } from './internal/interpolate'\nimport { tw as tw$ } from './runtime'\n\nexport interface TxFunction {\n  (...classes: Class[]): string\n\n  (strings: TemplateStringsArray, ...interpolations: readonly Class[]): string\n\n  bind(thisArg?: ((tokens: string) => string) | undefined | void): TxFunction\n\n  call(thisArg: ((tokens: string) => string) | undefined | void, ...classes: Class[]): string\n  call(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    strings: TemplateStringsArray,\n    ...interpolations: readonly Class[]\n  ): string\n\n  apply(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    classes: Class[] | [strings: TemplateStringsArray, ...interpolations: readonly Class[]],\n  ): string\n}\n\n/**\n * Combines {@link tw} and {@link cx}.\n *\n * Using the default `tw` instance:\n *\n * ```js\n * import { tw } from '@twind/core'\n * tx`underline ${falsy && 'italic'}`\n * tx('underline', falsy && 'italic')\n * tx({'underline': true, 'italic': false})\n *\n * // using a custom twind instance\n * import { tw } from './custom/twind'\n * import { tw } from './custom/twind'\n * tx.bind(tw)\n * ```\n *\n * Using a custom `tw` instance:\n *\n * ```js\n * import { tx as tx$ } from '@twind/core'\n * import { tw } from './custom/twind'\n *\n * export const tx = tx$.bind(tw)\n *\n * tx`underline ${falsy && 'italic'}`\n * tx('underline', falsy && 'italic')\n * tx({'underline': true, 'italic': false})\n * ```\n *\n * @group Style Injectors\n * @param this {@link Twind} instance to use (default: {@link tw})\n * @param strings\n * @param interpolations\n * @returns the class name\n */\nexport const tx: TxFunction = function tx(\n  this: ((tokens: string) => string) | undefined | void,\n  strings: TemplateStringsArray | Class,\n  ...interpolations: Class[]\n): string {\n  const tw = typeof this == 'function' ? this : tw$\n  return tw(interpolate(strings, interpolations))\n}\n","import type { Class } from './types'\nimport { parse } from './parse'\nimport { format } from './internal/format'\nimport { interpolate } from './internal/interpolate'\n\n/**\n * Constructs `class` strings conditionally.\n *\n * Twinds version of popular libraries like [classnames](https://github.com/JedWatson/classnames) or [clsx](https://github.com/lukeed/clsx).\n * The key advantage of `cx` is that it supports twinds enhanced class name syntax like grouping and aliases.\n *\n * @group Class Name Generators\n * @param strings\n * @param interpolations\n * @returns\n */\nexport function cx(strings: TemplateStringsArray, ...interpolations: Class[]): string\n\n/**\n * Constructs `class` strings conditionally.\n *\n * Twinds version of popular libraries like [classnames](https://github.com/JedWatson/classnames) or [clsx](https://github.com/lukeed/clsx).\n * The key advantage of `cx` is that it supports twinds enhanced class name syntax like grouping and aliases.\n *\n * @group Class Name Generators\n * @param input\n */\nexport function cx(...input: Class[]): string\n\nexport function cx(strings: TemplateStringsArray | Class, ...interpolations: Class[]): string {\n  return format(parse(interpolate(strings, interpolations)), ' ')\n}\n","import type { CSSBase, CSSObject, CSSValue } from './types'\n\nimport { tw as tw$ } from './runtime'\nimport { astish } from './internal/astish'\nimport { css } from './css'\n\nexport interface InjectGlobalFunction {\n  (style: CSSBase | string): void\n\n  (strings: TemplateStringsArray, ...interpolations: readonly CSSValue[]): void\n\n  bind(thisArg?: ((tokens: string) => string) | undefined | void): InjectGlobalFunction\n\n  call(thisArg: ((tokens: string) => string) | undefined | void, style: CSSBase | string): void\n\n  apply(thisArg: ((tokens: string) => string) | undefined | void, args: [CSSBase | string]): void\n}\n\n/**\n * Injects styles into the global scope and is useful for applications such as gloabl styles, CSS resets or font faces.\n *\n * It **does not** return a class name, but adds the styles within the base layer to the stylesheet directly.\n *\n * @group Style Injectors\n */\nexport const injectGlobal: InjectGlobalFunction = function injectGlobal(\n  this: ((tokens: string) => string) | undefined | void,\n  strings: CSSBase | string | TemplateStringsArray,\n  ...interpolations: readonly CSSValue[]\n): void {\n  const tw = typeof this == 'function' ? this : tw$\n\n  tw(\n    css({\n      '@layer base': astish(strings as CSSObject, interpolations),\n    } as CSSObject),\n  )\n}\n","import type { Twind, BaseTheme, TwindConfig, TwindUserConfig, Preset, ExtractThemes } from './types'\n\nimport { PROD } from 'distilt/env'\n\nimport { defineConfig } from './define-config'\nimport { setup } from './runtime'\nimport { getSheet } from './sheets'\n\n/**\n * @group Runtime\n * @param config\n * @param isProduction\n */\nexport function install<Theme extends BaseTheme = BaseTheme>(\n  config: TwindConfig<Theme>,\n  isProduction?: boolean,\n): Twind<Theme & BaseTheme>\n\nexport function install<Theme = BaseTheme, Presets extends Preset<any>[] = Preset[]>(\n  config: TwindUserConfig<Theme, Presets>,\n  isProduction?: boolean,\n): Twind<BaseTheme & ExtractThemes<Theme, Presets>>\n\nexport function install(config: TwindConfig | TwindUserConfig, isProduction = PROD): Twind {\n  const config$ = defineConfig(config as TwindUserConfig)\n\n  return setup(\n    {\n      ...config$,\n      // in production use short hashed class names\n      hash: config$.hash ?? isProduction,\n    },\n    () => getSheet(!isProduction),\n  )\n}\n"],"names":["active","toClassName","rule","v","i","n","join","format","rules","seperator","map","escape","CSS","className","replace","hash","value","h","index","length","Math","imul","charCodeAt","toString","mql","screen","prefix","asArray","min","raw","Object","keys","feature","Array","isArray","identity","noop","Layer","d","b","c","a","u","o","seperatorPrecedence","string","match","atRulePrecedence","css","test","max","RegExp","$1","$2","PRECEDENCES_BY_PSEUDO_CLASS","convert","name","important","variants","context","precedence","conditions","variant","theme","condition","selector","push","indexOf","slice","p","r","registry","Map","extends_","assign","target","arguments","source","key","prototype","hasOwnProperty","call","apply","_extends","stringify","groups","replaceEach","reduce","selectorPart","conditionPart","mergeMatch","exec","selectorIndex","replaceReference","reduceRight","body","grouping","iteratee","_","comma","reference","collator","Intl","Collator","numeric","sortedInsertionIndex","array","element","low","high","pivot","compareTwindRules","layer","compare","byModifier","byName","s","split","pop","String","fromCharCode","parseColorComponent","chars","factor","round","parseInt","toColorValue","color","options","opacityValue","opacityVariable","opacity","includes","size","substr","serialize","style","serialize$","declarations","maxPropertyPrecedence","numberOfDeclarations","property","translateWith","parse","JSON","toLowerCase","resolveThemeFunction","rulePrecedence","screenKey","unshift","sort","__","___","defaultValue","filter","merge","current","result","Boolean","translate","cssRule","translate$","resolved","resolve","factory","get","moveToLayer","splice","useOrderOfRules","flatMap","define","set","createRule","loc","negated","endsWith","defineProperties","uniq","l","values","cache","token","parsed","startIndex","skip","comment","position","commit","isRule","endOffset","char","lastMatch","lastGroup","lastIndexOf","nested","shift","interleave","strings","interpolations","handle","interpolation","interpolate","trim","tmp","alias","shortcut","marker","Proxy","alias$","astish","astish$","newRule","block","tree","ast","find","label","animation","waypoints","animation$","animationName","fromMatch","maybeNegate","offset","$$","input","fromTheme","section","withAutocomplete","themeSection","camelize","arbitrary","isKeyLookup","entries","suffix","concat","colorFromTheme","colorMatch","opacityMatch","parseValue","colorValue","opacitySection","create","properties","toCSS","undefined","dark","darkColorValue","opacities","modifiers","modifier","normalize","x","toUpperCase","before","url","after","fullMatch","characterBefore","repeat","kAutocomplete","Symbol","autocomplete","defineProperty","configurable","pattern","_objectWithoutPropertiesLoose","excluded","sourceKeys","defineConfig","_param","presets","userConfig","_object_without_properties_loose","config","darkMode","darkColor","preflight","ignorelist","finalize","preset","extend","warn","message","code","detail","dispatchEvent","CustomEvent","event","cancelable","defaultPrevented","console","list","getResolver","isDark","item","resolver","getVariantResolver","createResolve","getRuleResolver","patterns","createRegExpExecutor","run","toCondition","twind","sheet","createContext","variantCache","variantResolvers","ruleCache","ruleResolvers","ignored","reportedUnknownClasses","Set","defaultHash","ctx","makeThemeFunction","base","resolveContext","colors","negative","breakpoints","screens","sectionKey","path","deref","obj","prop","flattenColorPalette","flattend","keyPath","e","has","add","f","sortedPrecedences","insertedRules","insert","finalRule","cssText","resume","tokens","forEach","classNames","getOwnPropertyDescriptors","snapshot","restoreSheet","insertedRules$","cache$","sortedPrecedences$","clear","destroy","changed","mo","tw","observer","MutationObserver","handleMutationRecords","observe","attributeFilter","subtree","childList","handleClassAttributeChange","type","disconnect","records","el","querySelectorAll","takeRecords","getAttribute","setAttribute","tw$","document","documentElement","getStyleElement","querySelector","tagName","createElement","head","prepend","dataset","cssom","cssRules","from","deleteRule","ownerNode","remove","insertRule","error","dom","childNodes","node","textContent","insertBefore","createTextNode","getSheet","useDOMSheet","disableResume","addClassName","RE","lastIndex","assertActive","Error","_target","_thisArg","args","setup","keyframes","bind","thisArg","keyframes$","keyframeName","extract","html","restore","consume","markup","lastChunkStart","parseHTML","onClass","mode","quote","attributeName","currentIndex","MODE_TAGNAME","MODE_TEXT","endIndex","createStyle","parent","props","defaults","localDefaults","when","id","register","mq","allProps","isWithinRuleDeclaration","fromEntries","URLSearchParams","variantKey","propsValue","breakpoint","breakpointToken","exports","auto","install","currentScript","cancelAutoInstall","mutationsList","autoDarkColor","shade","cx","getAutocompleteProvider","injectGlobal","inline","minify","isProduction","config$","matchColor","matchTheme","tx","virtual","includeResumeData"],"mappings":"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"}